#!/usr/bin/env ruby
require 'thor'
require_relative 'lib/schema_downloader'
require_relative 'lib/example_validator'
require_relative 'lib/data_copier'
require_relative 'lib/example_copier'
require_relative 'lib/schema_copier'
require_relative 'lib/referenceable_fields'
require_relative 'lib/plugin_priorities'
require_relative 'lib/convert_json_schema'

class Plugins < Thor
  class_option :verbose, :type => :boolean

  def self.exit_on_failure?
    true
  end

  desc 'download_schemas', 'Downloads the plugins schemas in json format'
  option :version,     aliases: '-v',    type: :string,  required: true,                        desc: 'Kong Version'
  option :plugins,     aliases: '-p',    type: :array,   required: true,                        desc: 'List containing the name of the plugins'
  option :host,        aliases: '-d',    type: :string,                   default: 'localhost', desc: 'Hostname of the server running the API.'
  option :port,        aliases: '-h',    type: :numeric,                  default: 8001,        desc: 'Port number'
  option :destination, aliases: '-dest', type: :string,                   default: './schemas', desc: 'Destination folder where the schemas will be written'
  def download_schemas
    puts 'Downloading schemas...'

    options[:plugins].each do |plugin|
      SchemaDownloader.run!(plugin:, options:)
    end

    puts 'Done!'
  end

  desc 'validate_examples', 'Validates an example against the schema'
  option :version, aliases: '-v', type: :string, required: true,  default: '_index',     desc: 'Kong Version'
  option :plugins, aliases: '-p', type: :array,  required: true,                         desc: 'List containing the name of the plugins'
  option :host,    aliases: '-d', type: :string,                  default: 'localhost',  desc: 'Hostname of the server running the API.'
  option :port,    aliases: '-h', type: :numeric,                 default: 8001,         desc: 'Port number'
  option :source,  aliases: '-s', type: :string,                  default: './examples', desc: 'Source folder containing the examples'
  def validate_examples
    puts 'Validating examples...'

    options[:plugins].each do |plugin|
      ExampleValidator.run!(plugin:, options:)
    end

    puts 'Done!'
  end

  desc 'copy_examples', 'Copy latest examples'
  option :version, aliases: '-v', type: :string, required: true,  default: '_index',     desc: 'Kong Version'
  option :plugins, aliases: '-p', type: :array,  required: true,                         desc: 'List containing the name of the plugins'
  option :source,  aliases: '-s', type: :string,                  default: './examples', desc: 'Source folder containing the examples'
  def copy_examples
    puts 'Copying examples...'

    options[:plugins].each do |plugin|
      ExampleCopier.run!(plugin:, options:)
    end

    puts 'Done!'
  end

  desc 'copy_schemas', 'Copy latest schemas'
  option :version, aliases: '-v', type: :string, required: true,  default: 'index',     desc: 'Kong Version'
  option :plugins, aliases: '-p', type: :array,  required: true,                         desc: 'List containing the name of the plugins'
  option :source,  aliases: '-s', type: :string,                  default: './schemas', desc: 'Source folder containing the schemas'
  def copy_schemas
    puts 'Copying schemas...'

    options[:plugins].each do |plugin|
      SchemaCopier.run!(plugin:, options:)
    end

    puts 'Done!'
  end

  desc 'copy_data_files', 'Copy data files'
  option :version, aliases: '-v', type: :string, required: true,                     desc: 'Kong Version'
  option :source,  aliases: '-s', type: :string,                  default: './data', desc: 'Source folder containing the data files'
  def copy_data_files
    puts 'Copying files...'

    DataCopier.run!(options:)

    puts 'Done!'
  end

  desc 'generate_referenceable_fields_list', 'Generates a json object listing all the referenceable fields for each plugin'
  option :version,     aliases: '-v',    type: :string, required: true,                       desc: 'Kong Version'
  option :plugins,     aliases: '-p',    type: :array,  required: true,                       desc: 'List containing the name of the plugins'
  option :source,      aliases: '-s',    type: :string,                 default: './schemas', desc: 'Source folder containing the schemas'
  option :destination, aliases: '-dest', type: :string,                 default: './data', desc: 'Destination folder where the json object containing the referenceable fields will be written'
  def generate_referenceable_fields_list
    puts 'Finding referenceable fields...'

    ReferenceableFields.run!(plugins: options[:plugins], options: options)

    puts 'Done!'
  end

  desc 'generate_plugin_priorities', 'Generates a json object listing all the plugins and their corresponding priorities'
  option :version,     aliases: '-v',    type: :string,    required: true,       desc: 'Kong Version'
  option :host,        aliases: '-d',    type: :string,    default: 'localhost', desc: 'Hostname of the server running the API.'
  option :port,        aliases: '-h',    type: :numeric,   default: 8001,        desc: 'Port number'
  option :type,        aliases: '-t',    enum: %w(oss ee), required: true,       desc: 'Specify whether the API running is the OSS or Enterprise version'
  option :destination, aliases: '-dest', type: :string,    default: './data',    desc: 'Destination folder where the json object containing the plugins and their priorities will be written'
  def generate_plugin_priorities
    puts 'Listing plugins and their priorities...'

    PluginPriorities.run!(options: options)

    puts 'Done!'
  end

  desc 'convert_json_schema', 'Converts Kong plugin schema to JSON schema'
  option :version,     aliases: '-v',    type: :string,  required: true,                        desc: 'Kong Version'
  option :plugins,     aliases: '-p',    type: :array,   required: true,                        desc: 'List containing the name of the plugins'
  option :source,      aliases: '-s',    type: :string,                 default: './schemas', desc: 'Source folder containing the schemas'
  option :destination, aliases: '--dest', type: :string,                   default: './json_schemas', desc: 'Destination folder where the schemas will be written'
  option :skip_custom_annotations, aliases: '--skip-custom-annotations', type: :boolean,                   default: false, desc: 'Skip custom annotations'
  option :allow_auto_fields, aliases: '--allow-auto-fields', type: :boolean,                   default: false, desc: 'Do not make a field required if it has auto: true'
  def convert_json_schema
    puts 'Converting plugins to JSON schema...'

    ConvertJsonSchema.run!(plugins: options[:plugins], options: options)

    puts 'Done!'
  end
end

Plugins.start(ARGV)

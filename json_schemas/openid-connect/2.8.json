{
  "properties": {
    "config": {
      "properties": {
        "anonymous": {
          "description": "An optional string (consumer UUID) value to use as an anonymous consumer if authentication fails.\nIf empty (default), the request will fail with an authentication failure `4xx`. Note that this value\nmust refer to the consumer `id` attribute that is internal to Kong Gateway, and **not** its `custom_id`.",
          "legacy": true,
          "type": "string",
          "uuid": true
        },
        "audience": {
          "description": "The audience passed to the authorization endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "audience_claim": {
          "default": [
            "aud"
          ],
          "description": "The claim that contains the audience.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "audience_required": {
          "description": "The audiences (`audience_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.\n- When `[\"audience1 audience2\"]` are in the same array indices, both `audience1` AND `audience2` need to be present in access token (or introspection results).\n- When `[\"audience1\", \"audience2\"]` are in different array indices, either `audience1` OR `audience2` need to be present in access token (or introspection results).",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "auth_methods": {
          "default": [
            "authorization_code",
            "bearer",
            "client_credentials",
            "introspection",
            "kong_oauth2",
            "password",
            "refresh_token",
            "session",
            "userinfo"
          ],
          "description": "Types of credentials/grants to enable:\n- `password`: OAuth legacy password grant\n- `client_credentials`: OAuth client credentials grant\n- `authorization_code`: authorization code flow\n- `bearer`: JWT access token verification\n- `introspection`: OAuth introspection\n- `userinfo`: OpenID Connect user info endpoint authentication\n- `kong_oauth2`: Kong OAuth plugin issued tokens verification\n- `refresh_token`: OAuth refresh token grant\n- `session`: session cookie authentication",
          "examples": [
            [
              "authorization_code",
              "session"
            ]
          ],
          "items": {
            "enum": [
              "authorization_code",
              "bearer",
              "client_credentials",
              "introspection",
              "kong_oauth2",
              "password",
              "refresh_token",
              "session",
              "userinfo"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "authenticated_groups_claim": {
          "description": "The claim that contains authenticated groups. This setting can be used together\nwith ACL plugin, but it also enables IdP managed groups with other applications\nand integrations (for example, Kong Manager and Dev Portal). The OpenID Connect\nplugin itself does not do anything other than set the context value.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "authorization_cookie_domain": {
          "description": "The authorization cookie Domain flag.",
          "type": "string"
        },
        "authorization_cookie_httponly": {
          "default": true,
          "description": "Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.",
          "type": "boolean"
        },
        "authorization_cookie_lifetime": {
          "default": 600,
          "description": "The authorization cookie lifetime in seconds.",
          "type": "number"
        },
        "authorization_cookie_name": {
          "default": "authorization",
          "description": "The authorization cookie name.",
          "type": "string"
        },
        "authorization_cookie_path": {
          "default": "/",
          "description": "The authorization cookie Path flag.",
          "type": "string"
        },
        "authorization_cookie_samesite": {
          "default": "off",
          "description": "Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks:\n- `Strict`: Cookies will only be sent in a first-party context and not be sent along with requests initiated by third party websites.\n- `Lax`: Cookies are not sent on normal cross-site subrequests (for example to load images or frames into a third party site), but are sent when a user is navigating to the origin site (for instance, when following a link).\n- `None`: Cookies will be sent in all contexts, for example in responses to both first-party and cross-origin requests. If `SameSite=None` is set, the cookie Secure attribute must also be set (or the cookie will be blocked).\n- `off`: Do not set the SameSite flag.",
          "enum": [
            "Lax",
            "None",
            "Strict",
            "off"
          ],
          "type": "string"
        },
        "authorization_cookie_secure": {
          "description": "Cookie is only sent to the server when a request is made with the https: scheme (except on localhost),\nand therefore is more resistant to man-in-the-middle attacks.",
          "type": "boolean"
        },
        "authorization_endpoint": {
          "description": "The authorization endpoint.",
          "type": "string"
        },
        "authorization_query_args_client": {
          "description": "Extra query arguments passed from the client to the authorization endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "authorization_query_args_names": {
          "description": "Extra query argument names passed to the authorization endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "authorization_query_args_values": {
          "description": "Extra query argument values passed to the authorization endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "bearer_token_cookie_name": {
          "description": "The name of the cookie in which the bearer token is passed.",
          "type": "string"
        },
        "bearer_token_param_type": {
          "default": [
            "body",
            "header",
            "query"
          ],
          "description": "Where to look for the bearer token:\n- `header`: search the HTTP headers\n- `query`: search the URL's query string\n- `body`: search the HTTP request body\n- `cookie`: search the HTTP request cookies specified with `config.bearer_token_cookie_name`",
          "items": {
            "enum": [
              "body",
              "cookie",
              "header",
              "query"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "by_username_ignore_case": {
          "default": false,
          "description": "If `consumer_by` is set to `username`, specify whether `username` can match consumers case-insensitively.",
          "type": "boolean"
        },
        "cache_introspection": {
          "default": true,
          "description": "Cache the introspection endpoint requests.",
          "type": "boolean"
        },
        "cache_token_exchange": {
          "default": true,
          "description": "Cache the token exchange endpoint requests.",
          "type": "boolean"
        },
        "cache_tokens": {
          "default": true,
          "description": "Cache the token endpoint requests.",
          "type": "boolean"
        },
        "cache_tokens_salt": {
          "description": "Salt used for generating the cache key that us used for caching the token\nendpoint requests.\n> If you use multiple plugin instances of the OpenID Connect\n> plugin and want to share token endpoint caches between the plugin\n> instances, set the salt to the same value on each plugin instance.",
          "type": "string"
        },
        "cache_ttl": {
          "default": 3600,
          "description": "The default cache ttl in seconds that is used in case the cached object does not specify the expiry.",
          "type": "number"
        },
        "cache_ttl_max": {
          "description": "The maximum cache ttl in seconds (enforced).",
          "type": "number"
        },
        "cache_ttl_min": {
          "description": "The minimum cache ttl in seconds (enforced).",
          "type": "number"
        },
        "cache_ttl_neg": {
          "description": "The negative cache ttl in seconds.",
          "type": "number"
        },
        "cache_ttl_resurrect": {
          "description": "The resurrection ttl in seconds.",
          "type": "number"
        },
        "cache_user_info": {
          "default": true,
          "description": "Cache the user info requests.",
          "type": "boolean"
        },
        "client_alg": {
          "description": "The algorithm to use for `client_secret_jwt` (only `HS***`) or `private_key_jwt` authentication:\n- `HS256`: HMAC using SHA-256\n- `HS384`: HMAC using SHA-384\n- `HS512`: HMAC using SHA-512\n- `RS256`: RSASSA-PKCS1-v1_5 using SHA-256\n- `RS512`: RSASSA-PKCS1-v1_5 using SHA-512\n- `ES256`: ECDSA using P-256 and SHA-256\n- `ES384`: ECDSA using P-384 and SHA-384\n- `ES512`: ECDSA using P-521 and SHA-512\n- `PS256`: RSASSA-PSS using SHA-256 and MGF1 with SHA-256\n- `PS384`: RSASSA-PSS using SHA-384 and MGF1 with SHA-384\n- `PS512`: RSASSA-PSS using SHA-512 and MGF1 with SHA-512\n- `EdDSA`: EdDSA with Ed25519",
          "items": {
            "enum": [
              "ES256",
              "ES384",
              "ES512",
              "EdDSA",
              "HS256",
              "HS384",
              "HS512",
              "PS256",
              "PS384",
              "PS512",
              "RS256",
              "RS384",
              "RS512"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "client_arg": {
          "default": "client_id",
          "description": "The client to use for this request (the selection is made with a request parameter with the same name).\nFor example, setting this value to `Client`, and sending the request header `Client: 1` will cause the plugin\nto use the first client (see: `config.client_id`) from the client array.",
          "type": "string"
        },
        "client_auth": {
          "description": "The authentication method used by the client (plugin) when calling the endpoints:\n- `client_secret_basic`: send `client_id` and `client_secret` in `Authorization: Basic` header\n- `client_secret_post`: send `client_id` and `client_secret` as part of the body\n- `client_secret_jwt`: send client assertion signed with the `client_secret` as part of the body\n- `private_key_jwt`:  send client assertion signed with the `private key` as part of the body\n- `none`: do not authenticate\n> Private keys can be stored in a database, and they are by the default automatically generated\n> in the database. It is also possible to specify private keys with `config.client_jwk` directly\n> in the plugin configuration.",
          "items": {
            "enum": [
              "client_secret_basic",
              "client_secret_jwt",
              "client_secret_post",
              "none",
              "private_key_jwt"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "client_credentials_param_type": {
          "default": [
            "body",
            "header",
            "query"
          ],
          "description": "Where to look for the client credentials:\n- `header`: search the HTTP headers\n- `query`: search the URL's query string\n- `body`: search from the HTTP request body",
          "items": {
            "enum": [
              "body",
              "header",
              "query"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "client_id": {
          "description": "The client id(s) that the plugin uses when it calls authenticated endpoints on the identity provider.\nOther settings that are associated with the client are:\n- `config.client_secret`\n- `config.client_auth`\n- `config.client_jwk`\n- `config.client_alg`\n- `config.redirect_uri`\n- `config.login_redirect_uri`\n- `config.logout_redirect_uri`\n- `config.unauthorized_redirect_uri`\n- `config.forbidden_redirect_uri`\n- `config.unexpected_redirect_uri`\n\nUse the same array index when configuring related settings for the client.",
          "examples": [
            [
              "<client-id>"
            ]
          ],
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "client_jwk": {
          "description": "The JWK used for the `private_key_jwt` authentication.",
          "items": {
            "properties": {
              "alg": {
                "type": "string"
              },
              "crv": {
                "type": "string"
              },
              "d": {
                "type": "string"
              },
              "dp": {
                "type": "string"
              },
              "dq": {
                "type": "string"
              },
              "e": {
                "type": "string"
              },
              "issuer": {
                "type": "string"
              },
              "k": {
                "type": "string"
              },
              "key_ops": {
                "items": {
                  "required": [

                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "kid": {
                "type": "string"
              },
              "kty": {
                "type": "string"
              },
              "n": {
                "type": "string"
              },
              "oth": {
                "type": "string"
              },
              "p": {
                "type": "string"
              },
              "q": {
                "type": "string"
              },
              "qi": {
                "type": "string"
              },
              "r": {
                "type": "string"
              },
              "t": {
                "type": "string"
              },
              "use": {
                "type": "string"
              },
              "x": {
                "type": "string"
              },
              "x5c": {
                "items": {
                  "required": [

                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "x5t": {
                "type": "string"
              },
              "x5t#S256": {
                "type": "string"
              },
              "x5u": {
                "type": "string"
              },
              "y": {
                "type": "string"
              }
            },
            "required": [

            ],
            "type": "object"
          },
          "type": "array"
        },
        "client_secret": {
          "description": "The client secret.\n> Specify one if using `client_secret_*` authentication with the client on\n> the identity provider endpoints.",
          "examples": [
            [
              "<client-secret>"
            ]
          ],
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "consumer_by": {
          "default": [
            "custom_id",
            "username"
          ],
          "description": "Consumer fields used for mapping:\n- `id`: try to find the matching Consumer by `id`\n- `username`: try to find the matching Consumer by `username`\n- `custom_id`: try to find the matching Consumer by `custom_id`",
          "items": {
            "enum": [
              "custom_id",
              "id",
              "username"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "consumer_claim": {
          "description": "The claim used for consumer mapping.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "consumer_optional": {
          "default": false,
          "description": "Do not terminate the request if consumer mapping fails.",
          "type": "boolean"
        },
        "credential_claim": {
          "default": [
            "sub"
          ],
          "description": "The claim used to derive virtual credentials (e.g. to be consumed by the rate-limiting plugin), in case the consumer mapping is not used.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "disable_session": {
          "description": "Disable issuing the session cookie with the specified grants:\n- `password`: do not start a session with the password grant\n- `client_credentials`: do not start a session with the client credentials grant\n- `authorization_code`: do not start a session after authorization code flow\n- `bearer`: do not start session with JWT access token authentication\n- `introspection`: do not start session with introspection authentication\n- `userinfo`: do not start session with user info authentication\n- `kong_oauth2`: do not start session with Kong OAuth authentication\n- `refresh_token` do not start session with refresh token grant\n- `session`: do not renew the session with session cookie authentication",
          "items": {
            "enum": [
              "authorization_code",
              "bearer",
              "client_credentials",
              "introspection",
              "kong_oauth2",
              "password",
              "refresh_token",
              "session",
              "userinfo"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "discovery_headers_names": {
          "description": "Extra header names passed to the discovery endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "discovery_headers_values": {
          "description": "Extra header values passed to the discovery endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "display_errors": {
          "default": false,
          "description": "Display errors on failure responses.",
          "type": "boolean"
        },
        "domains": {
          "description": "The allowed values for the `hd` claim.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "downstream_access_token_header": {
          "description": "The downstream access token header.",
          "type": "string"
        },
        "downstream_access_token_jwk_header": {
          "description": "The downstream access token JWK header.",
          "type": "string"
        },
        "downstream_headers_claims": {
          "description": "The downstream header claims.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "downstream_headers_names": {
          "description": "The downstream header names for the claim values.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "downstream_id_token_header": {
          "description": "The downstream id token header.",
          "type": "string"
        },
        "downstream_id_token_jwk_header": {
          "description": "The downstream id token JWK header.",
          "type": "string"
        },
        "downstream_introspection_header": {
          "description": "The downstream introspection header.",
          "type": "string"
        },
        "downstream_introspection_jwt_header": {
          "type": "string"
        },
        "downstream_refresh_token_header": {
          "description": "The downstream refresh token header.",
          "type": "string"
        },
        "downstream_session_id_header": {
          "description": "The downstream session id header.",
          "type": "string"
        },
        "downstream_user_info_header": {
          "description": "The downstream user info header.",
          "type": "string"
        },
        "downstream_user_info_jwt_header": {
          "description": "The downstream user info JWT header (in case the user info returns a JWT response).",
          "type": "string"
        },
        "enable_hs_signatures": {
          "default": false,
          "description": "Enable shared secret, for example, HS256, signatures (when disabled they will not be accepted).",
          "type": "boolean"
        },
        "end_session_endpoint": {
          "description": "The end session endpoint.",
          "type": "string"
        },
        "extra_jwks_uris": {
          "description": "JWKS URIs whose public keys are trusted (in addition to the keys found with the discovery).",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "forbidden_destroy_session": {
          "default": true,
          "description": "Destroy any active session for the forbidden requests.",
          "type": "boolean"
        },
        "forbidden_error_message": {
          "default": "Forbidden",
          "description": "The error message for the forbidden requests (when not using the redirection).",
          "type": "string"
        },
        "forbidden_redirect_uri": {
          "description": "Where to redirect the client on forbidden requests.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "groups_claim": {
          "default": [
            "groups"
          ],
          "description": "The claim that contains the groups.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "groups_required": {
          "description": "The groups (`groups_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.\n- When `[\"group1 group2\"]` are in the same array indices, both `group1` AND `group2` need to be present in access token (or introspection results).\n- When `[\"group1\", \"group2\"]` are in different array indices, either `group1` OR `group2` need to be present in access token (or introspection results).",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "hide_credentials": {
          "default": false,
          "description": "Remove the credentials used for authentication from the request.\n> If multiple credentials are sent with the same request, the plugin will\n> remove those that were used for successful authentication.",
          "type": "boolean"
        },
        "http_proxy": {
          "description": "The HTTP proxy",
          "type": "string"
        },
        "http_proxy_authorization": {
          "description": "The HTTP proxy authorization.",
          "type": "string"
        },
        "http_version": {
          "default": 1.1,
          "description": "The HTTP version used for the requests by this plugin:\n- `1.1`: HTTP 1.1 (the default)\n- `1.0`: HTTP 1.0",
          "type": "number"
        },
        "https_proxy": {
          "description": "The HTTPS proxy",
          "type": "string"
        },
        "https_proxy_authorization": {
          "description": "The HTTPS proxy authorization.",
          "type": "string"
        },
        "id_token_param_name": {
          "description": "The name of the parameter used to pass the id token.",
          "type": "string"
        },
        "id_token_param_type": {
          "default": [
            "body",
            "header",
            "query"
          ],
          "description": "Where to look for the id token:\n- `header`: search the HTTP headers\n- `query`: search the URL's query string\n- `body`: search the HTTP request body",
          "items": {
            "enum": [
              "body",
              "header",
              "query"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "ignore_signature": {
          "default": [

          ],
          "description": "Skip the token signature verification on certain grants:\n- `password`: OAuth password grant\n- `client_credentials`: OAuth client credentials grant\n- `authorization_code`: authorization code flow\n- `refresh_token`: OAuth refresh token grant\n- `session`: session cookie authentication\n- `introspection`: OAuth introspection\n- `userinfo`: OpenID Connect user info endpoint authentication",
          "items": {
            "enum": [
              "authorization_code",
              "client_credentials",
              "introspection",
              "password",
              "refresh_token",
              "session",
              "userinfo"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "introspect_jwt_tokens": {
          "default": false,
          "description": "Specifies whether to introspect the JWT access tokens (can be used to check for revocations).",
          "type": "boolean"
        },
        "introspection_accept": {
          "default": "application/json",
          "description": "The value of `Accept` header for introspection requests:\n- `application/json`: introspection response as JSON\n- `application/token-introspection+jwt`: introspection response as JWT (from the current IETF draft document)\n- `application/jwt`: introspection response as JWT (from the obsolete IETF draft document)",
          "enum": [
            "application/json",
            "application/jwt",
            "application/token-introspection+jwt"
          ],
          "type": "string"
        },
        "introspection_check_active": {
          "default": true,
          "description": "Check that the introspection response has an `active` claim with a value of `true`.",
          "type": "boolean"
        },
        "introspection_endpoint": {
          "description": "The introspection endpoint.",
          "type": "string"
        },
        "introspection_endpoint_auth_method": {
          "description": "The introspection endpoint authentication method:\n- `client_secret_basic`: send `client_id` and `client_secret` in `Authorization: Basic` header\n- `client_secret_post`: send `client_id` and `client_secret` as part of the body\n- `client_secret_jwt`: send client assertion signed with the `client_secret` as part of the body\n- `private_key_jwt`:  send client assertion signed with the `private key` as part of the body\n- `none`: do not authenticate",
          "enum": [
            "client_secret_basic",
            "client_secret_jwt",
            "client_secret_post",
            "none",
            "private_key_jwt"
          ],
          "type": "string"
        },
        "introspection_headers_client": {
          "description": "Extra headers passed from the client to the introspection endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "introspection_headers_names": {
          "description": "Extra header names passed to the introspection endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "introspection_headers_values": {
          "description": "Extra header values passed to the introspection endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "introspection_hint": {
          "default": "access_token",
          "description": "Introspection hint parameter value passed to the introspection endpoint.",
          "type": "string"
        },
        "introspection_post_args_client": {
          "description": "Extra post arguments passed from the client to the introspection endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "introspection_post_args_names": {
          "description": "Extra post argument names passed to the introspection endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "introspection_post_args_values": {
          "description": "Extra post argument values passed to the introspection endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "issuer": {
          "description": "The discovery endpoint (or the issuer identifier).\n> When using Kong with the database, the discovery information and the JWKS\n> are cached to the Kong configuration database.",
          "examples": [
            "http://example.org"
          ],
          "type": "string"
        },
        "issuers_allowed": {
          "description": "The issuers allowed to be present in the tokens (`iss` claim).",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "jwt_session_claim": {
          "default": "sid",
          "description": "The claim to match against the JWT session cookie.",
          "type": "string"
        },
        "jwt_session_cookie": {
          "description": "The name of the JWT session cookie.",
          "type": "string"
        },
        "keepalive": {
          "default": true,
          "description": "Use keepalive with the HTTP client.",
          "type": "boolean"
        },
        "leeway": {
          "default": 0,
          "description": "Allow some leeway on the ttl / expiry verification.",
          "type": "number"
        },
        "login_action": {
          "default": "upstream",
          "description": "What to do after successful login:\n- `upstream`: proxy request to upstream service\n- `response`: terminate request with a response\n- `redirect`: redirect to a different location",
          "enum": [
            "redirect",
            "response",
            "upstream"
          ],
          "type": "string"
        },
        "login_methods": {
          "default": [
            "authorization_code"
          ],
          "description": "Enable login functionality with specified grants:\n- `password`: enable for OAuth password grant\n- `client_credentials`: enable OAuth client credentials grant\n- `authorization_code`: enable for authorization code flow\n- `bearer`: enable for JWT access token authentication\n- `introspection`: enable for OAuth introspection authentication\n- `userinfo`: enable for OpenID Connect user info endpoint authentication\n- `kong_oauth2`: enable for Kong OAuth Plugin authentication\n- `refresh_token`: enable for OAuth refresh token grant\n- `session`: enable for session cookie authentication",
          "items": {
            "enum": [
              "authorization_code",
              "bearer",
              "client_credentials",
              "introspection",
              "kong_oauth2",
              "password",
              "refresh_token",
              "session",
              "userinfo"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "login_redirect_mode": {
          "default": "fragment",
          "description": "Where to place `login_tokens` when using `redirect` `login_action`:\n- `query`: place tokens in query string\n- `fragment`: place tokens in url fragment (not readable by servers)",
          "enum": [
            "fragment",
            "query"
          ],
          "type": "string"
        },
        "login_redirect_uri": {
          "description": "Where to redirect the client when `login_action` is set to `redirect`.\n> Tip: Leave this empty and the plugin will redirect the client to the URL that originally initiated the\n> flow with possible query args preserved from the original request when `config.preserve_query_args`\n> is enabled.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "login_tokens": {
          "default": [
            "id_token"
          ],
          "description": "What tokens to include in `response` body or `redirect` query string or fragment:\n- `id_token`: include id token\n- `access_token`: include access token\n- `refresh_token`: include refresh token\n- `tokens`: include the full token endpoint response\n- `introspection`: include introspection response",
          "items": {
            "enum": [
              "access_token",
              "id_token",
              "introspection",
              "refresh_token",
              "tokens"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "logout_methods": {
          "default": [
            "DELETE",
            "POST"
          ],
          "description": "The request methods that can activate the logout:\n- `POST`: HTTP POST method\n- `GET`: HTTP GET method\n- `DELETE`: HTTP DELETE method",
          "items": {
            "enum": [
              "DELETE",
              "GET",
              "POST"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "logout_post_arg": {
          "description": "The request body argument that activates the logout.",
          "type": "string"
        },
        "logout_query_arg": {
          "description": "The request query argument that activates the logout.",
          "type": "string"
        },
        "logout_redirect_uri": {
          "description": "Where to redirect the client after the logout.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "logout_revoke": {
          "default": false,
          "description": "Revoke tokens as part of the logout.",
          "type": "boolean"
        },
        "logout_revoke_access_token": {
          "default": true,
          "description": "Revoke the access token as part of the logout.",
          "type": "boolean"
        },
        "logout_revoke_refresh_token": {
          "default": true,
          "description": "Revoke the refresh token as part of the logout.",
          "type": "boolean"
        },
        "logout_uri_suffix": {
          "description": "The request URI suffix that activates the logout.",
          "type": "string"
        },
        "max_age": {
          "description": "The maximum age (in seconds) compared to the `auth_time` claim.",
          "type": "number"
        },
        "no_proxy": {
          "description": "Do not use proxy with these hosts.",
          "type": "string"
        },
        "password_param_type": {
          "default": [
            "body",
            "header",
            "query"
          ],
          "description": "Where to look for the username and password:\n- `header`: search the HTTP headers\n- `query`: search the URL's query string\n- `body`: search the HTTP request body",
          "items": {
            "enum": [
              "body",
              "header",
              "query"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "preserve_query_args": {
          "default": false,
          "description": "With this parameter, you can preserve request query arguments even when doing authorization code flow.\n> When this parameter is used with the `config.login_action=redirect` parameter, the browser location\n> will change and display the original query arguments. Otherwise, the upstream request\n> is modified to include the original query arguments, and the browser will not display\n> them in the location field.",
          "type": "boolean"
        },
        "redirect_uri": {
          "description": "The redirect URI passed to the authorization and token endpoints.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "rediscovery_lifetime": {
          "default": 30,
          "description": "Specifies how long (in seconds) the plugin waits between discovery attempts. Discovery is still triggered on an as-needed basis.\n> The re-discovery usually happens when the plugin cannot find a key for verifying\n> the signature. For example, if a token is presented for which Kong does not have a\n> JWK cached, it will poll the discovery endpoint for new JWK data. If that discovery\n> attempt does not yield a JWK that can validate the token, Kong will wait the specified\n> number of seconds before retrying the discovery.",
          "type": "number"
        },
        "refresh_token_param_name": {
          "description": "The name of the parameter used to pass the refresh token.",
          "type": "string"
        },
        "refresh_token_param_type": {
          "default": [
            "body",
            "header",
            "query"
          ],
          "description": "Where to look for the refresh token:\n- `header`: search the HTTP headers\n- `query`: search the URL's query string\n- `body`: search the HTTP request body",
          "items": {
            "enum": [
              "body",
              "header",
              "query"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "refresh_tokens": {
          "default": true,
          "description": "Specifies whether the plugin should try to refresh (soon to be) expired access tokens if the\nplugin has a `refresh_token` available.",
          "type": "boolean"
        },
        "resolve_distributed_claims": {
          "default": false,
          "description": "Distributed claims are represented by the `_claim_names` and `_claim_sources` members\nof the JSON object containing the claims.\nIf this parameter is set to `true`, the plugin explicitly resolves these distributed claims.",
          "type": "boolean"
        },
        "response_mode": {
          "default": "query",
          "description": "The response mode passed to the authorization endpoint:\n- `query`: Instructs the identity provider to pass parameters in query string\n- `form_post`: Instructs the identity provider to pass parameters in request body\n- `fragment`: Instructs the identity provider to pass parameters in uri fragment (rarely useful as the plugin itself cannot read it)",
          "enum": [
            "form_post",
            "fragment",
            "query"
          ],
          "examples": [
            "form_post"
          ],
          "type": "string"
        },
        "response_type": {
          "default": [
            "code"
          ],
          "description": "The response type passed to the authorization endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "reverify": {
          "default": false,
          "description": "Specifies whether to always verify tokens stored in the session.",
          "type": "boolean"
        },
        "revocation_endpoint": {
          "description": "The revocation endpoint.",
          "type": "string"
        },
        "revocation_endpoint_auth_method": {
          "description": "The revocation endpoint authentication method:\n- `client_secret_basic`: send `client_id` and `client_secret` in `Authorization: Basic` header\n- `client_secret_post`: send `client_id` and `client_secret` as part of the body\n- `client_secret_jwt`: send client assertion signed with the `client_secret` as part of the body\n- `private_key_jwt`:  send client assertion signed with the `private key` as part of the body\n- `none`: do not authenticate",
          "enum": [
            "client_secret_basic",
            "client_secret_jwt",
            "client_secret_post",
            "none",
            "private_key_jwt"
          ],
          "type": "string"
        },
        "roles_claim": {
          "default": [
            "roles"
          ],
          "description": "The claim that contains the roles.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "roles_required": {
          "description": "The roles (`roles_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.\n- When `[\"role1 role2\"]` are in the same array indices, both `role1` AND `role2` need to be present in access token (or introspection results).\n- When `[\"role1\", \"role2\"]` are in different array indices, either `role1` OR `role2` need to be present in access token (or introspection results).",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "run_on_preflight": {
          "default": true,
          "description": "Specifies whether to run this plugin on pre-flight (`OPTIONS`) requests.",
          "type": "boolean"
        },
        "scopes": {
          "default": [
            "openid"
          ],
          "description": "The scopes passed to the authorization and token endpoints.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "scopes_claim": {
          "default": [
            "scope"
          ],
          "description": "The claim that contains the scopes.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "scopes_required": {
          "description": "The scopes (`scopes_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.\n- When `[\"scope1 scope2\"]` are in the same array indices, both `scope1` AND `scope2` need to be present in access token (or introspection results).\n- When `[\"scope1\", \"scope2\"]` are in different array indices, either `scope1` OR `scope2` need to be present in access token (or introspection results).",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "search_user_info": {
          "default": false,
          "description": "Specify whether to use the user info endpoint to get additional claims for consumer mapping,\ncredential mapping, authenticated groups, and upstream and downstream headers.\n> This requires an extra round-trip and can add latency, but the plugin can also cache\n> user info requests (see: `config.cache_user_info`).",
          "type": "boolean"
        },
        "session_compressor": {
          "default": "none",
          "description": "The session strategy:\n- `none`: no compression\n- `zlib`: use zlib to compress cookie data",
          "enum": [
            "none",
            "zlib"
          ],
          "type": "string"
        },
        "session_cookie_domain": {
          "description": "The session cookie Domain flag.",
          "type": "string"
        },
        "session_cookie_httponly": {
          "default": true,
          "description": "Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.",
          "type": "boolean"
        },
        "session_cookie_idletime": {
          "description": "The session cookie idle time in seconds.",
          "type": "number"
        },
        "session_cookie_lifetime": {
          "default": 3600,
          "description": "The session cookie lifetime in seconds.",
          "type": "number"
        },
        "session_cookie_maxsize": {
          "default": 4000,
          "description": "The maximum size of each cookie chunk in bytes.",
          "type": "integer"
        },
        "session_cookie_name": {
          "default": "session",
          "description": "The session cookie name.",
          "type": "string"
        },
        "session_cookie_path": {
          "default": "/",
          "description": "The session cookie Path flag.",
          "type": "string"
        },
        "session_cookie_renew": {
          "default": 600,
          "description": "The number of seconds prior to the `session_cookie_lifetime` that the session cookie will be renewed.",
          "type": "number"
        },
        "session_cookie_samesite": {
          "default": "Lax",
          "description": "Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks:\n- `Strict`: Cookies will only be sent in a first-party context and not be sent along with requests initiated by third party websites.\n- `Lax`: Cookies are not sent on normal cross-site subrequests (for example to load images or frames into a third party site), but are sent when a user is navigating to the origin site (for example, when following a link).\n- `None`: Cookies will be sent in all contexts, for example in responses to both first-party and cross-origin requests. If SameSite=None is set, the cookie Secure attribute must also be set (or the cookie will be blocked)\n- `off`: Do not set the SameSite flag.",
          "enum": [
            "Lax",
            "None",
            "Strict",
            "off"
          ],
          "type": "string"
        },
        "session_cookie_secure": {
          "description": "Cookie is only sent to the server when a request is made with the https: scheme (except on localhost),\nand therefore is more resistant to man-in-the-middle attacks.",
          "type": "boolean"
        },
        "session_memcache_host": {
          "default": "127.0.0.1",
          "description": "The memcached host.",
          "type": "string"
        },
        "session_memcache_port": {
          "default": 11211,
          "description": "The memcached port.",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "session_memcache_prefix": {
          "default": "sessions",
          "description": "The memcached session key prefix.",
          "type": "string"
        },
        "session_memcache_socket": {
          "description": "The memcached unix socket path.",
          "type": "string"
        },
        "session_redis_cluster_maxredirections": {
          "description": "The Redis cluster maximum redirects.",
          "type": "integer"
        },
        "session_redis_cluster_nodes": {
          "description": "The Redis cluster node host. Takes an array of host records, with\neither `ip` or `host`, and `port` values.",
          "items": {
            "properties": {
              "ip": {
                "default": "127.0.0.1",
                "type": "string"
              },
              "port": {
                "default": 6379,
                "maximum": 65535,
                "minimum": 0,
                "type": "integer"
              }
            },
            "required": [

            ],
            "type": "object"
          },
          "type": "array"
        },
        "session_redis_connect_timeout": {
          "description": "The Redis connection timeout in milliseconds.",
          "type": "integer"
        },
        "session_redis_host": {
          "default": "127.0.0.1",
          "description": "The Redis host",
          "type": "string"
        },
        "session_redis_password": {
          "description": "Password to use for Redis connection when the `redis` session storage is defined.\nIf undefined, no AUTH commands are sent to Redis.",
          "type": "string"
        },
        "session_redis_port": {
          "default": 6379,
          "description": "The Redis port.",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "session_redis_prefix": {
          "default": "sessions",
          "description": "The Redis session key prefix.",
          "type": "string"
        },
        "session_redis_read_timeout": {
          "description": "The Redis read timeout in milliseconds.",
          "type": "integer"
        },
        "session_redis_send_timeout": {
          "description": "The Redis send timeout in milliseconds.",
          "type": "integer"
        },
        "session_redis_server_name": {
          "description": "The SNI used for connecting the Redis server.",
          "type": "string"
        },
        "session_redis_socket": {
          "description": "The Redis unix socket path.",
          "type": "string"
        },
        "session_redis_ssl": {
          "default": false,
          "description": "Use SSL/TLS for Redis connection.",
          "type": "boolean"
        },
        "session_redis_ssl_verify": {
          "default": false,
          "description": "Verify Redis server certificate.",
          "type": "boolean"
        },
        "session_redis_username": {
          "description": "Username to use for Redis connection when the `redis` session storage is defined and ACL authentication is desired.\nIf undefined, ACL authentication will not be performed.\nThis requires Redis v6.0.0+. The username **cannot** be set to `default`.",
          "type": "string"
        },
        "session_secret": {
          "description": "The session secret.",
          "examples": [
            "<session-secret>"
          ],
          "type": "string"
        },
        "session_storage": {
          "default": "cookie",
          "description": "The session storage for session data:\n- `cookie`: stores session data with the session cookie (the session cannot be invalidated or revoked without changing session secret, but is stateless, and doesn't require a database)\n- `memcache`: stores session data in memcached\n- `redis`: stores session data in Redis",
          "enum": [
            "cookie",
            "memcache",
            "redis"
          ],
          "type": "string"
        },
        "session_strategy": {
          "default": "default",
          "description": "The session strategy:\n- `default`:  reuses session identifiers over modifications (but can be problematic with single-page applications with a lot of concurrent asynchronous requests)\n- `regenerate`: generates a new session identifier on each modification and does not use expiry for signature verification (useful in single-page applications or SPAs)",
          "enum": [
            "default",
            "regenerate"
          ],
          "type": "string"
        },
        "ssl_verify": {
          "default": false,
          "description": "Verify identity provider server certificate.",
          "type": "boolean"
        },
        "timeout": {
          "default": 10000,
          "description": "Network IO timeout in milliseconds.",
          "type": "number"
        },
        "token_endpoint": {
          "description": "The token endpoint.",
          "type": "string"
        },
        "token_endpoint_auth_method": {
          "description": "The token endpoint authentication method:\n- `client_secret_basic`: send `client_id` and `client_secret` in `Authorization: Basic` header\n- `client_secret_post`: send `client_id` and `client_secret` as part of the body\n- `client_secret_jwt`: send client assertion signed with the `client_secret` as part of the body\n- `private_key_jwt`:  send client assertion signed with the `private key` as part of the body\n- `none`: do not authenticate",
          "enum": [
            "client_secret_basic",
            "client_secret_jwt",
            "client_secret_post",
            "none",
            "private_key_jwt"
          ],
          "type": "string"
        },
        "token_exchange_endpoint": {
          "description": "The token exchange endpoint.",
          "type": "string"
        },
        "token_headers_client": {
          "description": "Extra headers passed from the client to the token endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "token_headers_grants": {
          "description": "Enable the sending of the token endpoint response headers only with certain grants:\n- `password`: with OAuth password grant\n- `client_credentials`: with OAuth client credentials grant\n- `authorization_code`: with authorization code flow\n- `refresh_token` with refresh token grant",
          "items": {
            "enum": [
              "authorization_code",
              "client_credentials",
              "password",
              "refresh_token"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "token_headers_names": {
          "description": "Extra header names passed to the token endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "token_headers_prefix": {
          "description": "Add a prefix to the token endpoint response headers before forwarding them to the downstream client.",
          "type": "string"
        },
        "token_headers_replay": {
          "description": "The names of token endpoint response headers to forward to the downstream client.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "token_headers_values": {
          "description": "Extra header values passed to the token endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "token_post_args_client": {
          "description": "Pass extra arguments from the client to the OpenID-Connect plugin. If arguments exist, the client can pass them using:\n- Request Body\n- Query parameters\n\nThis parameter can be used with `scope` values, like this:\n\n`config.token_post_args_client=scope`\n\nIn this case, the token would take the `scope` value from the query parameter or from the request body and send it to the token endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "token_post_args_names": {
          "description": "Extra post argument names passed to the token endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "token_post_args_values": {
          "description": "Extra post argument values passed to the token endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "unauthorized_destroy_session": {
          "default": true,
          "description": "Destroy any active session for the unauthorized requests.",
          "type": "boolean"
        },
        "unauthorized_error_message": {
          "default": "Unauthorized",
          "description": "The error message for the unauthorized requests (when not using the redirection).",
          "type": "string"
        },
        "unauthorized_redirect_uri": {
          "description": "Where to redirect the client on unauthorized requests.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "unexpected_redirect_uri": {
          "description": "Where to redirect the client when unexpected errors happen with the requests.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "upstream_access_token_header": {
          "default": "authorization:bearer",
          "description": "The upstream access token header.",
          "type": "string"
        },
        "upstream_access_token_jwk_header": {
          "description": "The upstream access token JWK header.",
          "type": "string"
        },
        "upstream_headers_claims": {
          "description": "The upstream header claims.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "upstream_headers_names": {
          "description": "The upstream header names for the claim values.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "upstream_id_token_header": {
          "description": "The upstream id token header.",
          "type": "string"
        },
        "upstream_id_token_jwk_header": {
          "description": "The upstream id token JWK header.",
          "type": "string"
        },
        "upstream_introspection_header": {
          "description": "The upstream introspection header.",
          "type": "string"
        },
        "upstream_introspection_jwt_header": {
          "type": "string"
        },
        "upstream_refresh_token_header": {
          "description": "The upstream refresh token header.",
          "type": "string"
        },
        "upstream_session_id_header": {
          "description": "The upstream session id header.",
          "type": "string"
        },
        "upstream_user_info_header": {
          "description": "The upstream user info header.",
          "type": "string"
        },
        "upstream_user_info_jwt_header": {
          "description": "The upstream user info JWT header (in case the user info returns a JWT response).",
          "type": "string"
        },
        "userinfo_accept": {
          "default": "application/json",
          "description": "The value of `Accept` header for user info requests:\n- `application/json`: user info response as JSON\n- `application/jwt`: user info response as JWT (from the obsolete IETF draft document)",
          "enum": [
            "application/json",
            "application/jwt"
          ],
          "type": "string"
        },
        "userinfo_endpoint": {
          "description": "The user info endpoint.",
          "type": "string"
        },
        "userinfo_headers_client": {
          "description": "Extra headers passed from the client to the user info endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "userinfo_headers_names": {
          "description": "Extra header names passed to the user info endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "userinfo_headers_values": {
          "description": "Extra header values passed to the user info endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "userinfo_query_args_client": {
          "description": "Extra query arguments passed from the client to the user info endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "userinfo_query_args_names": {
          "description": "Extra query argument names passed to the user info endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "userinfo_query_args_values": {
          "description": "Extra query argument values passed to the user info endpoint.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "verify_claims": {
          "default": true,
          "description": "Verify tokens for standard claims.",
          "type": "boolean"
        },
        "verify_nonce": {
          "default": true,
          "description": "Verify nonce on authorization code flow.",
          "type": "boolean"
        },
        "verify_parameters": {
          "default": false,
          "description": "Verify plugin configuration against discovery.",
          "type": "boolean"
        },
        "verify_signature": {
          "default": true,
          "description": "Verify signature of tokens.",
          "type": "boolean"
        }
      },
      "required": [

      ],
      "shorthands": {
      },
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": [

        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
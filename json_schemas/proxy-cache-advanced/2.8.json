{
  "properties": {
    "config": {
      "properties": {
        "bypass_on_err": {
          "default": false,
          "description": "Unhandled errors while trying to retrieve a cache entry (such as redis down) are resolved with `Bypass`, with the request going upstream.",
          "type": "boolean"
        },
        "cache_control": {
          "default": false,
          "description": "When enabled, respect the Cache-Control behaviors defined in [RFC7234](https://tools.ietf.org/html/rfc7234#section-5.2).",
          "type": "boolean"
        },
        "cache_ttl": {
          "default": 300,
          "description": "TTL in seconds of cache entities.",
          "minimum": 0,
          "type": "integer"
        },
        "content_type": {
          "default": [
            "application/json",
            "text/plain"
          ],
          "description": "Upstream response content types considered cacheable. The plugin performs an **exact match** against each specified value; for example, if the upstream is expected to respond with a `application/json; charset=utf-8` content-type, the plugin configuration must contain said value or a `Bypass` cache status is returned.",
          "examples": [
            [
              "application/json",
              "text/plain"
            ]
          ],
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "memory": {
          "properties": {
            "dictionary_name": {
              "default": "kong_db_cache",
              "description": "The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template.",
              "type": "string"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "redis": {
          "properties": {
            "cluster_addresses": {
              "description": "Cluster addresses to use for Redis connection when the `redis` strategy is defined.\nDefining this value implies using Redis cluster. Each string element must\nbe a hostname. The minimum length of the array is 1 element.",
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "minLength": 1,
              "type": "array"
            },
            "connect_timeout": {
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "database": {
              "default": 0,
              "description": "Database to use for Redis connection when the `redis` strategy is defined.",
              "type": "integer"
            },
            "host": {
              "description": "Host to use for Redis connection when the redis strategy is defined.",
              "type": "string"
            },
            "keepalive_backlog": {
              "description": "If specified, limits the total number of opened connections for a pool. If the\nconnection pool is full, all connection queues beyond the maximum limit go into\nthe backlog queue. Once the backlog queue is full, subsequent connect operations\nwill fail and return `nil`. Queued connect operations resume once the number of\nconnections in the pool is less than `keepalive_pool_size`. Note that queued\nconnect operations are subject to set timeouts.",
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "keepalive_pool_size": {
              "default": 30,
              "description": "The size limit for every cosocket connection pool associated with every remote\nserver, per worker process. If no `keepalive_pool_size` is specified and no `keepalive_backlog`\nis specified, no pool is created. If no `keepalive_pool_size` is specified and `keepalive_backlog`\nis specified, then the pool uses the default value `30`.",
              "maximum": 2147483646,
              "minimum": 1,
              "type": "integer"
            },
            "password": {
              "description": "Password to use for Redis connection when the `redis` strategy is defined.\nIf undefined, no AUTH commands are sent to Redis.",
              "type": "string"
            },
            "port": {
              "description": "Port to use for Redis connections when the `redis` strategy is defined. Must be a\nvalue between 0 and 65535. Default: 6379.",
              "maximum": 65535,
              "minimum": 0,
              "type": "integer"
            },
            "read_timeout": {
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "send_timeout": {
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "sentinel_addresses": {
              "description": "Sentinel addresses to use for Redis connections when the `redis` strategy is defined.\nDefining this value implies using Redis Sentinel. Each string element must\nbe a hostname. The minimum length of the array is 1 element.",
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "minLength": 1,
              "type": "array"
            },
            "sentinel_master": {
              "description": "Sentinel master to use for Redis connection when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.",
              "type": "string"
            },
            "sentinel_password": {
              "description": "Sentinel password to authenticate with a Redis Sentinel instance.\nIf undefined, no AUTH commands are sent to Redis Sentinels.",
              "type": "string"
            },
            "sentinel_role": {
              "description": "Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value\nimplies using Redis Sentinel. Available options:  `master`, `slave`, `any`.",
              "enum": [
                "any",
                "master",
                "slave"
              ],
              "type": "string"
            },
            "sentinel_username": {
              "description": "Sentinel username to authenticate with a Redis Sentinel instance.\nIf undefined, ACL authentication will not be performed. This requires Redis v6.2.0+.",
              "type": "string"
            },
            "server_name": {
              "description": "Specifies the server name for the new TLS extension Server Name Indication (SNI) when connecting over SSL.\n**Note:** This parameter is only available for Kong Gateway versions\n2.2.x and later.",
              "type": "string"
            },
            "ssl": {
              "default": false,
              "description": "If set to `true`, then uses SSL to connect to Redis.\n**Note:** This parameter is only available for Kong Gateway versions\n2.2.x and later.",
              "type": "boolean"
            },
            "ssl_verify": {
              "default": false,
              "description": "If set to `true`, then verifies the validity of the server SSL certificate. Note that you need to configure the\n[lua_ssl_trusted_certificate](/gateway/latest/reference/configuration/#lua_ssl_trusted_certificate)\nto specify the CA (or server) certificate used by your Redis server. You may also need to configure\n[lua_ssl_verify_depth](/gateway/latest/reference/configuration/#lua_ssl_verify_depth) accordingly.\n**Note:** This parameter is only available for Kong Gateway versions\n2.2.x and later.",
              "type": "boolean"
            },
            "timeout": {
              "default": 2000,
              "description": "Connection timeout to use for Redis connection when the `redis` strategy is defined.",
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "username": {
              "type": "string"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "request_method": {
          "default": [
            "GET",
            "HEAD"
          ],
          "description": "Downstream request methods considered cacheable. Available options: `HEAD`, `GET`, `POST`, `PATCH`, `PUT`.",
          "examples": [
            [
              "GET",
              "HEAD"
            ]
          ],
          "items": {
            "enum": [
              "GET",
              "HEAD",
              "PATCH",
              "POST",
              "PUT"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "response_code": {
          "default": [
            200,
            301,
            404
          ],
          "description": "Upstream response status code considered cacheable. The integers must be a value\nbetween 100 and 900.",
          "examples": [
            [
              200
            ]
          ],
          "items": {
            "maximum": 900,
            "minimum": 100,
            "required": [

            ],
            "type": "integer"
          },
          "minLength": 1,
          "type": "array"
        },
        "storage_ttl": {
          "description": "Number of seconds to keep resources in the storage backend. This value is independent\nof `cache_ttl` or resource TTLs defined by Cache-Control behaviors.",
          "type": "integer"
        },
        "strategy": {
          "description": "The backing data store in which to hold cache entities. Accepted values are: `memory` and `redis`.",
          "enum": [
            "memory",
            "redis"
          ],
          "examples": [
            "memory"
          ],
          "type": "string"
        },
        "vary_headers": {
          "description": "Relevant headers considered for the cache key. If undefined, none of the headers are taken into consideration.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "vary_query_params": {
          "description": "Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
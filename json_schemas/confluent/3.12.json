{
  "properties": {
    "config": {
      "properties": {
        "allowed_topics": {
          "description": "The list of allowed topic names to which messages can be sent. The default topic configured in the `topic` field is always allowed, regardless of its inclusion in `allowed_topics`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "bootstrap_servers": {
          "description": "Set of bootstrap brokers in a `{host: host, port: port}` list format.",
          "items": {
            "properties": {
              "host": {
                "description": "A string representing a host name, such as example.com.",
                "type": "string"
              },
              "port": {
                "description": "An integer representing a port number between 0 and 65535, inclusive.",
                "maximum": 65535,
                "minimum": 0,
                "type": "integer"
              }
            },
            "required": [
              "host",
              "port"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "cluster_api_key": {
          "description": "Username/Apikey for SASL authentication.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "cluster_api_secret": {
          "description": "Password/ApiSecret for SASL authentication.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "cluster_name": {
          "description": "An identifier for the Kafka cluster. By default, this field generates a random string. You can also set your own custom cluster identifier.  If more than one Kafka plugin is configured without a `cluster_name` (that is, if the default autogenerated value is removed), these plugins will use the same producer, and by extension, the same cluster. Logs will be sent to the leader of the cluster.",
          "type": "string"
        },
        "confluent_cloud_api_key": {
          "description": "Apikey for authentication with Confluent Cloud. This allows for management tasks such as creating topics, ACLs, etc.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "confluent_cloud_api_secret": {
          "description": "The corresponding secret for the Confluent Cloud API key.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "forward_body": {
          "default": true,
          "description": "Include the request body in the message. At least one of these must be true: `forward_method`, `forward_uri`, `forward_headers`, `forward_body`.",
          "type": "boolean"
        },
        "forward_headers": {
          "default": false,
          "description": "Include the request headers in the message. At least one of these must be true: `forward_method`, `forward_uri`, `forward_headers`, `forward_body`.",
          "type": "boolean"
        },
        "forward_method": {
          "default": false,
          "description": "Include the request method in the message. At least one of these must be true: `forward_method`, `forward_uri`, `forward_headers`, `forward_body`.",
          "type": "boolean"
        },
        "forward_uri": {
          "default": false,
          "description": "Include the request URI and URI arguments (as in, query arguments) in the message. At least one of these must be true: `forward_method`, `forward_uri`, `forward_headers`, `forward_body`.",
          "type": "boolean"
        },
        "keepalive": {
          "default": 60000,
          "description": "Keepalive timeout in milliseconds.",
          "type": "integer"
        },
        "keepalive_enabled": {
          "default": false,
          "type": "boolean"
        },
        "key_query_arg": {
          "description": "The request query parameter name that contains the Kafka message key. If specified, messages with the same key will be sent to the same Kafka partition, ensuring consistent ordering.",
          "type": "string"
        },
        "message_by_lua_functions": {
          "description": "The Lua functions that manipulates the message being sent to the Kafka topic.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "producer_async": {
          "default": true,
          "description": "Flag to enable asynchronous mode.",
          "type": "boolean"
        },
        "producer_async_buffering_limits_messages_in_memory": {
          "default": 50000,
          "description": "Maximum number of messages that can be buffered in memory in asynchronous mode.",
          "type": "integer"
        },
        "producer_async_flush_timeout": {
          "default": 1000,
          "description": "Maximum time interval in milliseconds between buffer flushes in asynchronous mode.",
          "type": "integer"
        },
        "producer_request_acks": {
          "default": 1,
          "description": "The number of acknowledgments the producer requires the leader to have received before considering a request complete. Allowed values: 0 for no acknowledgments; 1 for only the leader; and -1 for the full ISR (In-Sync Replica set).",
          "enum": [
            -1,
            0,
            1
          ],
          "type": "integer"
        },
        "producer_request_limits_bytes_per_request": {
          "default": 1048576,
          "description": "Maximum size of a Produce request in bytes.",
          "type": "integer"
        },
        "producer_request_limits_messages_per_request": {
          "default": 200,
          "description": "Maximum number of messages to include into a single producer request.",
          "type": "integer"
        },
        "producer_request_retries_backoff_timeout": {
          "default": 100,
          "description": "Backoff interval between retry attempts in milliseconds.",
          "type": "integer"
        },
        "producer_request_retries_max_attempts": {
          "default": 10,
          "description": "Maximum number of retry attempts per single Produce request.",
          "type": "integer"
        },
        "producer_request_timeout": {
          "default": 2000,
          "description": "Time to wait for a Produce response in milliseconds.",
          "type": "integer"
        },
        "schema_registry": {
          "description": "The plugin-global schema registry configuration. This can be overwritten by the topic configuration.",
          "properties": {
            "confluent": {
              "properties": {
                "authentication": {
                  "properties": {
                    "basic": {
                      "properties": {
                        "password": {
                          "description": "This field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                          "type": "string"
                        },
                        "username": {
                          "description": "This field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "password",
                        "username"
                      ],
                      "type": "object"
                    },
                    "mode": {
                      "default": "none",
                      "description": "Authentication mode to use with the schema registry.",
                      "enum": [
                        "basic",
                        "none",
                        "oauth2"
                      ],
                      "type": "string"
                    },
                    "oauth2": {
                      "properties": {
                        "audience": {
                          "default": [],
                          "description": "List of audiences passed to the IdP when obtaining a new token.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "client_id": {
                          "description": "The client ID for the application registration in the IdP.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                          "type": "string"
                        },
                        "client_secret": {
                          "description": "The client secret for the application registration in the IdP.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                          "type": "string"
                        },
                        "grant_type": {
                          "default": "client_credentials",
                          "description": "The OAuth grant type to be used.",
                          "enum": [
                            "client_credentials",
                            "password"
                          ],
                          "type": "string"
                        },
                        "password": {
                          "description": "The password to use if `config.oauth.grant_type` is set to `password`.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                          "type": "string"
                        },
                        "scopes": {
                          "default": [
                            "openid"
                          ],
                          "description": "List of scopes to request from the IdP when obtaining a new token.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "token_endpoint": {
                          "description": "The token endpoint URI.",
                          "type": "string"
                        },
                        "token_headers": {
                          "additionalProperties": true,
                          "description": "Extra headers to be passed in the token endpoint request.",
                          "type": "object"
                        },
                        "token_post_args": {
                          "additionalProperties": true,
                          "description": "Extra post arguments to be passed in the token endpoint request.",
                          "type": "object"
                        },
                        "username": {
                          "description": "The username to use if `config.oauth.grant_type` is set to `password`.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "token_endpoint"
                      ],
                      "type": "object"
                    },
                    "oauth2_client": {
                      "properties": {
                        "auth_method": {
                          "default": "client_secret_post",
                          "description": "The authentication method used in client requests to the IdP. Supported values are: `client_secret_basic` to send `client_id` and `client_secret` in the `Authorization: Basic` header, `client_secret_post` to send `client_id` and `client_secret` as part of the request body, or `client_secret_jwt` to send a JWT signed with the `client_secret` using the client assertion as part of the body.",
                          "enum": [
                            "client_secret_basic",
                            "client_secret_jwt",
                            "client_secret_post",
                            "none"
                          ],
                          "type": "string"
                        },
                        "client_secret_jwt_alg": {
                          "default": "HS512",
                          "description": "The algorithm to use with JWT when using `client_secret_jwt` authentication.",
                          "enum": [
                            "HS256",
                            "HS512"
                          ],
                          "type": "string"
                        },
                        "http_proxy": {
                          "description": "The proxy to use when making HTTP requests to the IdP.",
                          "type": "string"
                        },
                        "http_proxy_authorization": {
                          "description": "The `Proxy-Authorization` header value to be used with `http_proxy`.",
                          "type": "string"
                        },
                        "http_version": {
                          "default": 1.1,
                          "description": "The HTTP version used for requests made by this plugin. Supported values: `1.1` for HTTP 1.1 and `1.0` for HTTP 1.0.",
                          "type": "number"
                        },
                        "https_proxy": {
                          "description": "The proxy to use when making HTTPS requests to the IdP.",
                          "type": "string"
                        },
                        "https_proxy_authorization": {
                          "description": "The `Proxy-Authorization` header value to be used with `https_proxy`.",
                          "type": "string"
                        },
                        "keep_alive": {
                          "default": true,
                          "description": "Whether to use keepalive connections to the IdP.",
                          "type": "boolean"
                        },
                        "no_proxy": {
                          "description": "A comma-separated list of hosts that should not be proxied.",
                          "type": "string"
                        },
                        "ssl_verify": {
                          "default": false,
                          "description": "Whether to verify the certificate presented by the IdP when using HTTPS.",
                          "type": "boolean"
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Network I/O timeout for requests to the IdP in milliseconds.",
                          "maximum": 2147483646,
                          "minimum": 0,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "key_schema": {
                  "properties": {
                    "schema_version": {
                      "description": "The schema version to use for serialization/deserialization. Use 'latest' to always fetch the most recent version.",
                      "type": "string"
                    },
                    "subject_name": {
                      "description": "The name of the subject",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "ssl_verify": {
                  "default": true,
                  "description": "Set to false to disable SSL certificate verification when connecting to the schema registry.",
                  "type": "boolean"
                },
                "ttl": {
                  "description": "The TTL in seconds for the schema registry cache.",
                  "maximum": 3600,
                  "minimum": 0,
                  "type": "number"
                },
                "url": {
                  "description": "The URL of the schema registry.",
                  "type": "string"
                },
                "value_schema": {
                  "properties": {
                    "schema_version": {
                      "description": "The schema version to use for serialization/deserialization. Use 'latest' to always fetch the most recent version.",
                      "type": "string"
                    },
                    "subject_name": {
                      "description": "The name of the subject",
                      "type": "string"
                    }
                  },
                  "type": "object"
                }
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "timeout": {
          "default": 10000,
          "description": "Socket timeout in milliseconds.",
          "type": "integer"
        },
        "topic": {
          "description": "The default Kafka topic to publish to if the query parameter defined in the `topics_query_arg` does not exist in the request",
          "type": "string"
        },
        "topics_query_arg": {
          "description": "The request query parameter name that contains the topics to publish to",
          "type": "string"
        }
      },
      "required": [
        "cluster_api_key",
        "cluster_api_secret",
        "topic"
      ],
      "type": "object"
    },
    "consumer": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A set of strings representing HTTP protocols.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "config"
  ]
}
{
  "properties": {
    "config": {
      "properties": {
        "add": {
          "properties": {
            "headers": {
              "default": [

              ],
              "description": "List of `headername:value` pairs. If and only if the header is not already set, set a new header with the given value. Ignored if the header is already set.",
              "examples": [
                [
                  "x-another-header:something",
                  "x-new-header:value"
                ]
              ],
              "items": {
                "pattern": "^[^:]+:.*$",
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "json": {
              "default": [

              ],
              "description": "List of `property:value` pairs. If and only if the property is not present, add a new property with the given value to the JSON body. Ignored if the property is already present.",
              "examples": [
                [
                  "another-json-key:some_value",
                  "new-json-key:some_value"
                ]
              ],
              "items": {
                "pattern": "^[^:]+:.*$",
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "json_types": {
              "default": [

              ],
              "description": "List of JSON type names. Specify the types of the JSON values returned when adding\na new JSON property. Each string element can be one of: boolean, number, or string.",
              "examples": [
                [
                  "boolean",
                  "number",
                  "string"
                ]
              ],
              "items": {
                "enum": [
                  "boolean",
                  "number",
                  "string"
                ],
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "append": {
          "properties": {
            "headers": {
              "default": [

              ],
              "description": "List of `headername:value` pairs. If the header is not set, set it with the given value. If it is\nalready set, a new header with the same name and the new value will be set. Each string\nelement can be one of: boolean, number, or string.",
              "examples": [
                [
                  "x-another-header:some_value",
                  "x-existing-header:some_value"
                ]
              ],
              "items": {
                "pattern": "^[^:]+:.*$",
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "json": {
              "default": [

              ],
              "description": "List of `property:value` pairs. If the property is not present in the JSON body, add it with the given value. If it is already present, the two values (old and new) will be aggregated in an array.",
              "items": {
                "pattern": "^[^:]+:.*$",
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "json_types": {
              "default": [

              ],
              "description": "List of JSON type names. Specify the types of the JSON values returned when appending\nJSON properties. Each string element can be one of: boolean, number, or string.",
              "items": {
                "enum": [
                  "boolean",
                  "number",
                  "string"
                ],
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "remove": {
          "properties": {
            "headers": {
              "default": [

              ],
              "description": "List of header names. Unset the header(s) with the given name.",
              "examples": [
                [
                  "x-another-one",
                  "x-toremove"
                ]
              ],
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "json": {
              "default": [

              ],
              "description": "List of property names. Remove the property from the JSON body if it is present.",
              "examples": [
                [
                  "another-json-key",
                  "json-key-toremove"
                ]
              ],
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "rename": {
          "properties": {
            "headers": {
              "default": [

              ],
              "description": "List of `original_header_name:new_header_name` pairs. If the header `original_headername` is already set, rename it to `new_headername`. Ignored if the header is not already set.",
              "items": {
                "pattern": "^[^:]+:.*$",
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "replace": {
          "properties": {
            "headers": {
              "default": [

              ],
              "description": "List of `headername:value` pairs. If and only if the header is already set, replace its old value with the new one. Ignored if the header is not already set.",
              "items": {
                "pattern": "^[^:]+:.*$",
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "json": {
              "default": [

              ],
              "description": "List of `property:value` pairs. If and only if the parameter is already present, replace its old value with the new one. Ignored if the parameter is not already present.",
              "items": {
                "pattern": "^[^:]+:.*$",
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "json_types": {
              "default": [

              ],
              "description": "List of JSON type names. Specify the types of the JSON values returned when\nreplacing JSON properties. Each string\nelement can be one of: boolean, number, or string.",
              "items": {
                "enum": [
                  "boolean",
                  "number",
                  "string"
                ],
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [

          ],
          "type": "object"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": [

        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
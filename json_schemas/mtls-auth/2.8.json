{
  "properties": {
    "config": {
      "properties": {
        "anonymous": {
          "description": "An optional string (consumer UUID) value to use as an \"anonymous\" consumer if authentication fails.\nIf the request is left empty (which it is by default), it fails with an authentication failure of either\n`HTTP 495` if the client presented a certificate that is not acceptable, or `HTTP 496` if the client failed\nto present certificate as requested. Please note that this value must refer to the consumer `id`\nattribute, which is internal to Kong, and **not** its `custom_id`.",
          "legacy": true,
          "type": "string",
          "uuid": true
        },
        "authenticated_group_by": {
          "default": "CN",
          "description": "Certificate property to use as the authenticated group. Valid values are `CN` (Common Name) or\n`DN` (Distinguished Name). Once `skip_consumer_lookup` is applied, any client with a\nvalid certificate can access the Service/API. To restrict usage to only some of the authenticated users,\nalso add the ACL plugin (not covered here) and create allowed or denied groups of users.",
          "enum": [
            "CN",
            "DN"
          ],
          "type": "string"
        },
        "ca_certificates": {
          "description": "List of CA Certificates strings to use as Certificate Authorities (CA) when validating a client certificate.\nAt least one is required but you can specify as many as needed. The value of this array is comprised\nof primary keys (`id`).",
          "examples": [
            [
              "fdac360e-7b19-4ade-a553-6dd22937c82f"
            ]
          ],
          "items": {
            "required": [

            ],
            "type": "string",
            "uuid": true
          },
          "type": "array"
        },
        "cache_ttl": {
          "default": 60,
          "description": "Cache expiry time in seconds.",
          "type": "number"
        },
        "cert_cache_ttl": {
          "default": 60000,
          "description": "The length of time in milliseconds between refreshes of the revocation check status cache.",
          "type": "number"
        },
        "consumer_by": {
          "default": [
            "custom_id",
            "username"
          ],
          "description": "Whether to match the subject name of the client-supplied certificate against consumer's `username` and/or `custom_id` attribute. If set to `[]` (the empty array), then auto-matching is disabled.",
          "items": {
            "enum": [
              "custom_id",
              "username"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "http_proxy_host": {
          "examples": [
            "example"
          ],
          "type": "string"
        },
        "http_proxy_port": {
          "description": "The HTTP hostname or IP address of a proxy. Use this setting with\n`http_proxy_port` to access a certificate revocation list\n(CRL) or an OCSP server.\n\nRequired if `http_proxy_port` is set.",
          "examples": [
            80
          ],
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "http_timeout": {
          "default": 30000,
          "description": "HTTP timeout threshold in milliseconds when communicating with the OCSP server or downloading CRL.",
          "type": "number"
        },
        "https_proxy_host": {
          "description": "The HTTPS hostname or IP address of a proxy. Use this setting with\n`https_proxy_port` to access a certificate revocation list\n(CRL) or an OCSP server.\n\nRequired if `https_proxy_port` is set.",
          "type": "string"
        },
        "https_proxy_port": {
          "description": "The TCP port of the HTTPS proxy.\n\nRequired if `https_proxy_host` is set.",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "revocation_check_mode": {
          "default": "IGNORE_CA_ERROR",
          "description": ">**Known Issue:** The default value `IGNORE_CA_ERROR` has a known issue in versions 1.5.0.0 and later.m As a workaround, manually set the value to `SKIP`.\n\nControls client certificate revocation check behavior. Valid values are `SKIP`, `IGNORE_CA_ERROR`, or `STRICT`.\nIf set to `SKIP`, no revocation check is performed. If set to `IGNORE_CA_ERROR`, the plugin respects\nthe revocation status when either OCSP or CRL URL is set, and doesn't fail on network issues. If set to `STRICT`,\nthe plugin only treats the certificate as valid when it's able to verify the revocation status, and a missing\nOCSP or CRL URL in the certificate or a failure to connect to the server results in a revoked status.\nIf both OCSP and CRL URL are set, the plugin always checks OCSP first, and only checks the CRL URL if\nit can't communicate with the OCSP server.",
          "enum": [
            "IGNORE_CA_ERROR",
            "SKIP",
            "STRICT"
          ],
          "type": "string"
        },
        "skip_consumer_lookup": {
          "default": false,
          "description": "Skip consumer lookup once certificate is trusted against the configured CA list.",
          "type": "boolean"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": [

        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
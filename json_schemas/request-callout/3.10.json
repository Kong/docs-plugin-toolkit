{
  "properties": {
    "config": {
      "properties": {
        "cache": {
          "description": "Plugin global caching configuration.",
          "properties": {
            "cache_ttl": {
              "default": 300,
              "description": "TTL in seconds of cache entities.",
              "minimum": 0,
              "type": "integer"
            },
            "memory": {
              "properties": {
                "dictionary_name": {
                  "default": "kong_db_cache",
                  "description": "The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template.",
                  "type": "string"
                }
              },
              "required": [

              ],
              "type": "object"
            },
            "redis": {
              "properties": {
                "cluster_max_redirections": {
                  "default": 5,
                  "description": "Maximum retry attempts for redirection.",
                  "type": "integer"
                },
                "cluster_nodes": {
                  "description": "Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.",
                  "items": {
                    "properties": {
                      "ip": {
                        "default": "127.0.0.1",
                        "description": "A string representing a host name, such as example.com.",
                        "type": "string"
                      },
                      "port": {
                        "default": 6379,
                        "description": "An integer representing a port number between 0 and 65535, inclusive.",
                        "maximum": 65535,
                        "minimum": 0,
                        "type": "integer"
                      }
                    },
                    "required": [

                    ],
                    "type": "object"
                  },
                  "minLength": 1,
                  "type": "array"
                },
                "connect_timeout": {
                  "default": 2000,
                  "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                  "maximum": 2147483646,
                  "minimum": 0,
                  "type": "integer"
                },
                "connection_is_proxied": {
                  "default": false,
                  "description": "If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.",
                  "type": "boolean"
                },
                "database": {
                  "default": 0,
                  "description": "Database to use for the Redis connection when using the `redis` strategy",
                  "type": "integer"
                },
                "host": {
                  "default": "127.0.0.1",
                  "description": "A string representing a host name, such as example.com.",
                  "type": "string"
                },
                "keepalive_backlog": {
                  "description": "Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.",
                  "maximum": 2147483646,
                  "minimum": 0,
                  "type": "integer"
                },
                "keepalive_pool_size": {
                  "default": 256,
                  "description": "The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.",
                  "maximum": 2147483646,
                  "minimum": 1,
                  "type": "integer"
                },
                "password": {
                  "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                  "type": "string"
                },
                "port": {
                  "default": 6379,
                  "description": "An integer representing a port number between 0 and 65535, inclusive.",
                  "maximum": 65535,
                  "minimum": 0,
                  "type": "integer"
                },
                "read_timeout": {
                  "default": 2000,
                  "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                  "maximum": 2147483646,
                  "minimum": 0,
                  "type": "integer"
                },
                "send_timeout": {
                  "default": 2000,
                  "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                  "maximum": 2147483646,
                  "minimum": 0,
                  "type": "integer"
                },
                "sentinel_master": {
                  "description": "Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.",
                  "type": "string"
                },
                "sentinel_nodes": {
                  "description": "Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.",
                  "items": {
                    "properties": {
                      "host": {
                        "default": "127.0.0.1",
                        "description": "A string representing a host name, such as example.com.",
                        "type": "string"
                      },
                      "port": {
                        "default": 6379,
                        "description": "An integer representing a port number between 0 and 65535, inclusive.",
                        "maximum": 65535,
                        "minimum": 0,
                        "type": "integer"
                      }
                    },
                    "required": [

                    ],
                    "type": "object"
                  },
                  "minLength": 1,
                  "type": "array"
                },
                "sentinel_password": {
                  "description": "Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                  "type": "string"
                },
                "sentinel_role": {
                  "description": "Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.",
                  "enum": [
                    "any",
                    "master",
                    "slave"
                  ],
                  "type": "string"
                },
                "sentinel_username": {
                  "description": "Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                  "type": "string"
                },
                "server_name": {
                  "description": "A string representing an SNI (server name indication) value for TLS.",
                  "type": "string"
                },
                "ssl": {
                  "default": false,
                  "description": "If set to true, uses SSL to connect to Redis.",
                  "type": "boolean"
                },
                "ssl_verify": {
                  "default": false,
                  "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.",
                  "type": "boolean"
                },
                "username": {
                  "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                  "type": "string"
                }
              },
              "required": [

              ],
              "shorthand_fields": {
                "cluster_addresses": {
                  "items": {
                    "type": "string"
                  },
                  "minLength": 1,
                  "type": "array"
                },
                "sentinel_addresses": {
                  "items": {
                    "type": "string"
                  },
                  "minLength": 1,
                  "type": "array"
                },
                "timeout": {
                  "type": "integer"
                }
              },
              "type": "object"
            },
            "strategy": {
              "default": "off",
              "description": "The backing data store in which to hold cache entities. Accepted values are: `off`, `memory`, and `redis`.",
              "enum": [
                "memory",
                "off",
                "redis"
              ],
              "type": "string"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "callouts": {
          "description": "A collection of callout objects, where each object represents an HTTPrequest made in the context of a proxy request.",
          "items": {
            "properties": {
              "cache": {
                "description": "Callout caching configuration.",
                "properties": {
                  "bypass": {
                    "default": false,
                    "description": "If true, skips caching the callout response.",
                    "type": "boolean"
                  }
                },
                "required": [

                ],
                "type": "object"
              },
              "depends_on": {
                "default": [

                ],
                "description": "An array of callout names the current callout depends on.This dependency determines the callout execution order.",
                "items": {
                  "required": [

                  ],
                  "type": "string"
                },
                "type": "array"
              },
              "name": {
                "description": "A string identifier for a callout. A callout object is referenceablevia its name in the kong.ctx.shared.callouts.<name>",
                "type": "string"
              },
              "request": {
                "description": "The customizations for the callout request.",
                "properties": {
                  "body": {
                    "description": "Callout request body customizations.",
                    "properties": {
                      "custom": {
                        "additionalProperties": true,
                        "description": "The custom body fields to be added in the callout HTTP request.Values can contain Lua expressions in the form $(some_lua_code).",
                        "type": "object"
                      },
                      "decode": {
                        "default": false,
                        "description": "If true, decodes the request's body to make it available for customizations.",
                        "type": "boolean"
                      },
                      "forward": {
                        "default": false,
                        "description": "If true, forwards the incoming request's body to the callout request.",
                        "type": "boolean"
                      }
                    },
                    "required": [

                    ],
                    "type": "object"
                  },
                  "by_lua": {
                    "description": "Lua code that executes before the callout request is made.Standard Lua sandboxing restrictions apply.",
                    "type": "string"
                  },
                  "error": {
                    "description": "The error handling policy the plugin will apply to TCP and HTTP errors.",
                    "properties": {
                      "error_response_code": {
                        "default": 400,
                        "description": "The error code to respond with if `on_error` is `fail` or if `retries` is achieved.",
                        "type": "integer"
                      },
                      "error_response_msg": {
                        "default": "service callout error",
                        "description": "The error mesasge to respond with if `on_error` is `fail` or if `retries` is achieved.Templating with Lua expressions is supported.",
                        "type": "string"
                      },
                      "http_statuses": {
                        "description": "The list of HTTP status codes considered errors under the error handling policy.",
                        "items": {
                          "maximum": 999,
                          "minimum": 100,
                          "required": [

                          ],
                          "type": "integer"
                        },
                        "type": "array"
                      },
                      "on_error": {
                        "default": "fail",
                        "enum": [
                          "continue",
                          "fail",
                          "retry"
                        ],
                        "type": "string"
                      },
                      "retries": {
                        "default": 2,
                        "description": "The number of retries the plugin will attempt on TCP and HTTP errors if `on_error` is set to `retry`.",
                        "type": "integer"
                      }
                    },
                    "required": [

                    ],
                    "type": "object"
                  },
                  "headers": {
                    "description": "Callout request header customizations.",
                    "properties": {
                      "custom": {
                        "additionalProperties": true,
                        "description": "The custom headers to be added in the callout HTTP request.Values can contain Lua expressions in the form $(some_lua_code).",
                        "type": "object"
                      },
                      "forward": {
                        "default": false,
                        "description": "If true, forwards the incoming request's headers to the callout request. ",
                        "type": "boolean"
                      }
                    },
                    "required": [

                    ],
                    "type": "object"
                  },
                  "http_opts": {
                    "description": "HTTP connection parameters.",
                    "properties": {
                      "proxy": {
                        "description": "Proxy settings.",
                        "properties": {
                          "auth_password": {
                            "description": "The password to authenticate with, if the forward proxy is protected by basic authentication.\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                            "type": "string"
                          },
                          "auth_username": {
                            "description": "The username to authenticate with, if the forward proxy is protected by basic authentication.\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                            "type": "string"
                          },
                          "http_proxy": {
                            "description": "The HTTP proxy URL. This proxy server will be used for HTTP requests.",
                            "type": "string"
                          },
                          "https_proxy": {
                            "description": "The HTTPS proxy URL. This proxy server will be used for HTTPS requests.",
                            "type": "string"
                          }
                        },
                        "required": [

                        ],
                        "type": "object"
                      },
                      "ssl_server_name": {
                        "description": "The SNI used in the callout request. Defaults to host if omitted.",
                        "type": "string"
                      },
                      "ssl_verify": {
                        "default": false,
                        "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.",
                        "type": "boolean"
                      },
                      "timeouts": {
                        "description": "Socket timeouts in milliseconds. All or none must be set.",
                        "properties": {
                          "connect": {
                            "description": "The socket connect timeout.",
                            "maximum": 2147483646,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "read": {
                            "description": "The socket read timeout. ",
                            "maximum": 2147483646,
                            "minimum": 0,
                            "type": "integer"
                          },
                          "write": {
                            "description": "The socket write timeout.",
                            "maximum": 2147483646,
                            "minimum": 0,
                            "type": "integer"
                          }
                        },
                        "required": [

                        ],
                        "type": "object"
                      }
                    },
                    "required": [

                    ],
                    "type": "object"
                  },
                  "method": {
                    "default": "GET",
                    "description": "The HTTP method that will be requested.",
                    "pattern": "^%u+$",
                    "type": "string"
                  },
                  "query": {
                    "description": "Callout request query param customizations.",
                    "properties": {
                      "custom": {
                        "additionalProperties": true,
                        "description": "The custom query params to be added in the callout HTTP request.Values can contain Lua expressions in the form $(some_lua_code).",
                        "type": "object"
                      },
                      "forward": {
                        "default": false,
                        "description": "If true, forwards the incoming request's query params to the callout request. ",
                        "type": "boolean"
                      }
                    },
                    "required": [

                    ],
                    "type": "object"
                  },
                  "url": {
                    "description": "The URL that will be requested.\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                    "type": "string"
                  }
                },
                "required": [
                  "body",
                  "error",
                  "headers",
                  "http_opts",
                  "query",
                  "url"
                ],
                "type": "object"
              },
              "response": {
                "description": "Configurations of callout response handling.",
                "properties": {
                  "body": {
                    "properties": {
                      "decode": {
                        "default": false,
                        "description": "If true, decodes the response body before storing into the context. Only JSON is supported.",
                        "type": "boolean"
                      },
                      "store": {
                        "default": true,
                        "description": "If false, skips storing the callout response body into kong.ctx.shared.callouts.<name>.response.body.",
                        "type": "boolean"
                      }
                    },
                    "required": [

                    ],
                    "type": "object"
                  },
                  "by_lua": {
                    "description": "Lua code that executes after the callout request is made, before caching takes place. Standard Lua sandboxing restrictions apply.",
                    "type": "string"
                  },
                  "headers": {
                    "description": "Callout response header customizations.",
                    "properties": {
                      "store": {
                        "default": true,
                        "description": "If false, skips storing the callout response headers intokong.ctx.shared.callouts.<name>.response.headers.",
                        "type": "boolean"
                      }
                    },
                    "required": [

                    ],
                    "type": "object"
                  }
                },
                "required": [
                  "body",
                  "headers"
                ],
                "type": "object"
              }
            },
            "required": [
              "cache",
              "name",
              "request",
              "response"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "upstream": {
          "description": "Customizations to the upstream request.",
          "properties": {
            "body": {
              "description": "Callout request body customizations.",
              "properties": {
                "custom": {
                  "additionalProperties": true,
                  "description": "The custom body fields to be added in the upstream request body. Values can contain Lua expressions in the form $(some_lua_code).",
                  "type": "object"
                },
                "decode": {
                  "default": true,
                  "description": "If true, decodes the request's body to make it available for upstream by_lua customizations.",
                  "type": "boolean"
                },
                "forward": {
                  "default": true,
                  "description": "If false, skips forwarding the incoming request's body to the upstream request.",
                  "type": "boolean"
                }
              },
              "required": [

              ],
              "type": "object"
            },
            "by_lua": {
              "description": "Lua code that executes before the upstream request is made. Standard Lua sandboxing restrictions apply.",
              "type": "string"
            },
            "headers": {
              "description": "Callout request header customizations.",
              "properties": {
                "custom": {
                  "additionalProperties": true,
                  "description": "The custom headers to be added in the upstream HTTP request. Values can contain Lua expressions in the form $(some_lua_code).",
                  "type": "object"
                },
                "forward": {
                  "default": true,
                  "description": "If false, does not forward request headers to upstream request.",
                  "type": "boolean"
                }
              },
              "required": [

              ],
              "type": "object"
            },
            "query": {
              "description": "Upstream request query param customizations.",
              "properties": {
                "custom": {
                  "additionalProperties": true,
                  "description": "The custom query params to be added in the upstream HTTP request. Values can contain Lua expressions in the form $(some_lua_code).",
                  "type": "object"
                },
                "forward": {
                  "default": true,
                  "description": "If false, does not forward request query params to upstream request.",
                  "type": "boolean"
                }
              },
              "required": [

              ],
              "type": "object"
            }
          },
          "required": [

          ],
          "type": "object"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A set of strings representing HTTP protocols.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": [

        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
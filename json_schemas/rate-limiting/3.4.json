{
  "properties": {
    "config": {
      "properties": {
        "day": {
          "description": "The number of HTTP requests that can be made per day.",
          "minimum": 0,
          "type": "number"
        },
        "error_code": {
          "default": 429,
          "description": "Set a custom error code to return when the rate limit is exceeded.",
          "minimum": 0,
          "type": "number"
        },
        "error_message": {
          "default": "API rate limit exceeded",
          "description": "Set a custom error message to return when the rate limit is exceeded.",
          "type": "string"
        },
        "fault_tolerant": {
          "default": true,
          "description": "A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party data store. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the data store is working again. If `false`, then the clients will see `500` errors.",
          "type": "boolean"
        },
        "header_name": {
          "description": "A string representing an HTTP header name.",
          "type": "string"
        },
        "hide_client_headers": {
          "default": false,
          "description": "Optionally hide informative response headers.",
          "type": "boolean"
        },
        "hour": {
          "description": "The number of HTTP requests that can be made per hour.",
          "minimum": 0,
          "type": "number"
        },
        "limit_by": {
          "default": "consumer",
          "description": "The entity that is used when aggregating the limits.",
          "enum": [
            "consumer",
            "credential",
            "header",
            "ip",
            "path",
            "service"
          ],
          "type": "string"
        },
        "minute": {
          "description": "The number of HTTP requests that can be made per minute.",
          "minimum": 0,
          "type": "number"
        },
        "month": {
          "description": "The number of HTTP requests that can be made per month.",
          "minimum": 0,
          "type": "number"
        },
        "path": {
          "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).",
          "type": "string"
        },
        "policy": {
          "default": "local",
          "description": "The rate-limiting policies to use for retrieving and incrementing the limits.",
          "enum": [
            "cluster",
            "local",
            "redis"
          ],
          "minLength": 0,
          "type": "string"
        },
        "redis_database": {
          "default": 0,
          "description": "When using the `redis` policy, this property specifies the Redis database to use.",
          "type": "integer"
        },
        "redis_host": {
          "description": "A string representing a host name, such as example.com.",
          "type": "string"
        },
        "redis_password": {
          "description": "When using the `redis` policy, this property specifies the password to connect to the Redis server.\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "minLength": 0,
          "type": "string"
        },
        "redis_port": {
          "default": 6379,
          "description": "An integer representing a port number between 0 and 65535, inclusive.",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "redis_server_name": {
          "description": "A string representing an SNI (server name indication) value for TLS.",
          "type": "string"
        },
        "redis_ssl": {
          "default": false,
          "description": "When using the `redis` policy, this property specifies if SSL is used to connect to the Redis server.",
          "type": "boolean"
        },
        "redis_ssl_verify": {
          "default": false,
          "description": "When using the `redis` policy with `redis_ssl` set to `true`, this property specifies it server SSL certificate is validated. Note that you need to configure the lua_ssl_trusted_certificate to specify the CA (or server) certificate used by your Redis server. You may also need to configure lua_ssl_verify_depth accordingly.",
          "type": "boolean"
        },
        "redis_timeout": {
          "default": 2000,
          "description": "When using the `redis` policy, this property specifies the timeout in milliseconds of any command submitted to the Redis server.",
          "type": "number"
        },
        "redis_username": {
          "description": "When using the `redis` policy, this property specifies the username to connect to the Redis server when ACL authentication is desired.\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "second": {
          "description": "The number of HTTP requests that can be made per second.",
          "minimum": 0,
          "type": "number"
        },
        "sync_rate": {
          "default": -1,
          "description": "How often to sync counter data to the central data store. A value of -1 results in synchronous behavior.",
          "type": "number"
        },
        "year": {
          "description": "The number of HTTP requests that can be made per year.",
          "minimum": 0,
          "type": "number"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A set of strings representing HTTP protocols.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": [

        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
{
  "properties": {
    "config": {
      "properties": {
        "day": {
          "description": "The number of HTTP requests that can be made per day.",
          "minimum": 0,
          "type": "number"
        },
        "fault_tolerant": {
          "default": true,
          "description": "A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party data store. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the data store is working again. If `false`, then the clients will see `500` errors.",
          "type": "boolean"
        },
        "header_name": {
          "description": "Header name to be used if `limit_by` is set to `header`.",
          "type": "string"
        },
        "hide_client_headers": {
          "default": false,
          "description": "Optionally hide informative response headers.",
          "type": "boolean"
        },
        "hour": {
          "description": "The number of HTTP requests that can be made per hour.",
          "examples": [
            10000
          ],
          "minimum": 0,
          "type": "number"
        },
        "limit_by": {
          "default": "consumer",
          "description": "The entity that is used when aggregating the limits. Available values are:\n- `consumer`\n- `credential`\n- `ip`\n- `service`\n- `header` (The `header_name` configuration must be provided.)\n- `path` (The `path` configuration must be provided.)\n\nIf the entity value for aggregating the limits cannot be determined, the system falls back to `ip`.",
          "enum": [
            "consumer",
            "credential",
            "header",
            "ip",
            "path",
            "service"
          ],
          "type": "string"
        },
        "minute": {
          "description": "The number of HTTP requests that can be made per minute.",
          "minimum": 0,
          "type": "number"
        },
        "month": {
          "description": "The number of HTTP requests that can be made per month.",
          "minimum": 0,
          "type": "number"
        },
        "path": {
          "description": "Path to be used if `limit_by` is set to `path`.",
          "type": "string"
        },
        "policy": {
          "default": "cluster",
          "description": "The rate-limiting policies to use for retrieving and incrementing the\nlimits. Available values are:\n- `local`: Counters are stored locally in-memory on the node.\n- `cluster`: Counters are stored in the Kong data store and shared across\nthe nodes.\n- `redis`: Counters are stored on a Redis server and shared\nacross the nodes.\n\nIn DB-less, hybrid mode, and Konnect, the `cluster` config policy is not supported.\nFor DB-less mode or Konnect, use one of `redis` or `local`; for hybrid mode, use\n`redis`, or `local` for data planes only.\n\nFor details on which policy should be used, refer to the\n[implementation considerations](#implementation-considerations).",
          "enum": [
            "cluster",
            "local",
            "redis"
          ],
          "examples": [
            "local"
          ],
          "minLength": 0,
          "type": "string"
        },
        "redis_database": {
          "default": 0,
          "description": "When using the `redis` policy, this property specifies the Redis database to use.",
          "type": "integer"
        },
        "redis_host": {
          "description": "When using the `redis` policy, this property specifies the address to the Redis server.",
          "type": "string"
        },
        "redis_password": {
          "description": "When using the `redis` policy, this property specifies the password to connect to the Redis server.",
          "minLength": 0,
          "type": "string"
        },
        "redis_port": {
          "default": 6379,
          "description": "When using the `redis` policy, this property specifies the port of the Redis server. By default is `6379`.",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "redis_server_name": {
          "description": "When using the `redis` policy with `redis_ssl` set to `true`, this property specifies the server name for the TLS extension Server Name Indication (SNI)",
          "type": "string"
        },
        "redis_ssl": {
          "default": false,
          "description": "When using the `redis` policy, this property specifies if SSL is used to connect to the Redis server.",
          "type": "boolean"
        },
        "redis_ssl_verify": {
          "default": false,
          "description": "When using the `redis` policy with `redis_ssl` set to `true`, this property specifies it server SSL certificate is validated. Note that you need to configure the lua_ssl_trusted_certificate to specify the CA (or server) certificate used by your Redis server. You may also need to configure lua_ssl_verify_depth accordingly.",
          "type": "boolean"
        },
        "redis_timeout": {
          "default": 2000,
          "description": "When using the `redis` policy, this property specifies the timeout in milliseconds of any command submitted to the Redis server.",
          "type": "number"
        },
        "redis_username": {
          "description": "When using the `redis` policy, this property specifies the username to connect to the Redis server when ACL authentication is desired. \n\nThis requires Redis v6.0.0+. The username **cannot** be set to `default`.",
          "type": "string"
        },
        "second": {
          "description": "The number of HTTP requests that can be made per second.",
          "examples": [
            5
          ],
          "minimum": 0,
          "type": "number"
        },
        "year": {
          "description": "The number of HTTP requests that can be made per year.",
          "minimum": 0,
          "type": "number"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": [

        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
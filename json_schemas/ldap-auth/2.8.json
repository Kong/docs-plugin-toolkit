{
  "properties": {
    "config": {
      "properties": {
        "anonymous": {
          "description": "An optional string (consumer UUID) value to use as an anonymous consumer if authentication fails.\nIf empty (default), the request fails with an authentication failure `4xx`. Note that this value\nmust refer to the consumer `id` attribute that is internal to Kong Gateway, and **not** its `custom_id`.",
          "type": "string"
        },
        "attribute": {
          "description": "Attribute to be used to search the user; e.g., \"cn\".",
          "examples": [
            "cn"
          ],
          "type": "string"
        },
        "base_dn": {
          "description": "Base DN as the starting point for the search; e.g., \"dc=example,dc=com\".",
          "examples": [
            "dc=example,dc=com"
          ],
          "type": "string"
        },
        "cache_ttl": {
          "default": 60,
          "description": "Cache expiry time in seconds.",
          "type": "number"
        },
        "header_type": {
          "default": "ldap",
          "description": "An optional string to use as part of the Authorization header. By default, a valid Authorization header looks like this: `Authorization: ldap base64(username:password)`. If `header_type` is set to \"basic\", then the Authorization header would be `Authorization: basic base64(username:password)`. Note that `header_type` can take any string, not just `\"ldap\"` and `\"basic\"`.",
          "examples": [
            "ldap"
          ],
          "type": "string"
        },
        "hide_credentials": {
          "default": false,
          "description": "An optional boolean value telling the plugin to hide the credential to the upstream server. It will be removed by Kong before proxying the request.",
          "examples": [
            true
          ],
          "type": "boolean"
        },
        "keepalive": {
          "default": 60000,
          "description": "An optional value in milliseconds that defines how long an idle connection to LDAP server will live before being closed.",
          "type": "number"
        },
        "ldap_host": {
          "description": "Host on which the LDAP server is running.",
          "examples": [
            "ldap.example.com"
          ],
          "type": "string"
        },
        "ldap_port": {
          "default": 389,
          "description": "TCP port where the LDAP server is listening. 389 is the default\nport for non-SSL LDAP and AD. 636 is the port required for SSL LDAP and AD. If `ldaps` is\nconfigured, you must use port 636.",
          "examples": [
            389
          ],
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "ldaps": {
          "default": false,
          "description": "Set to `true` to connect using the LDAPS protocol (LDAP over TLS).  When `ldaps` is\nconfigured, you must use port 636. If the `ldap` setting is enabled, ensure the\n`start_tls` setting is disabled.",
          "type": "boolean"
        },
        "start_tls": {
          "default": false,
          "description": "Set it to `true` to issue StartTLS (Transport Layer Security) extended operation over `ldap`\nconnection. If the `start_tls` setting is enabled, ensure the `ldaps`\nsetting is disabled.",
          "type": "boolean"
        },
        "timeout": {
          "default": 10000,
          "description": "An optional timeout in milliseconds when waiting for connection with LDAP server.",
          "type": "number"
        },
        "verify_ldap_host": {
          "default": false,
          "description": "Set to `true` to authenticate LDAP server. The server certificate will be verified according to the CA certificates specified by the `lua_ssl_trusted_certificate` directive.",
          "type": "boolean"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": [

        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
{
  "properties": {
    "config": {
      "properties": {
        "auto_offset_reset": {
          "default": "latest",
          "description": "The offset to start from when there is no initial offset in the consumer group.",
          "enum": [
            "earliest",
            "latest"
          ],
          "type": "string"
        },
        "bootstrap_servers": {
          "description": "Set of bootstrap brokers in a `{host: host, port: port}` list format.",
          "items": {
            "properties": {
              "host": {
                "description": "A string representing a host name, such as example.com.",
                "type": "string"
              },
              "port": {
                "description": "An integer representing a port number between 0 and 65535, inclusive.",
                "maximum": 65535,
                "minimum": 0,
                "type": "integer"
              }
            },
            "required": [
              "host",
              "port"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "cluster_api_key": {
          "description": "Username/Apikey for SASL authentication.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "cluster_api_secret": {
          "description": "Password/ApiSecret for SASL authentication.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "cluster_name": {
          "description": "An identifier for the Kafka cluster. By default, this field generates a random string. You can also set your own custom cluster identifier.  If more than one Kafka plugin is configured without a `cluster_name` (that is, if the default autogenerated value is removed), these plugins will use the same producer, and by extension, the same cluster. Logs will be sent to the leader of the cluster.",
          "type": "string"
        },
        "commit_strategy": {
          "default": "auto",
          "description": "The strategy to use for committing offsets.",
          "enum": [
            "auto",
            "off"
          ],
          "type": "string"
        },
        "confluent_cloud_api_key": {
          "description": "Apikey for authentication with Confluent Cloud. This allows for management tasks such as creating topics, ACLs, etc.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "confluent_cloud_api_secret": {
          "description": "The corresponding secret for the Confluent Cloud API key.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "keepalive": {
          "default": 60000,
          "description": "Keepalive timeout in milliseconds.",
          "type": "integer"
        },
        "keepalive_enabled": {
          "default": false,
          "type": "boolean"
        },
        "message_by_lua_functions": {
          "description": "The Lua functions that manipulates the message being sent to the client.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "message_deserializer": {
          "default": "noop",
          "description": "The deserializer to use for the consumed messages.",
          "enum": [
            "json",
            "noop"
          ],
          "type": "string"
        },
        "mode": {
          "default": "http-get",
          "description": "The mode of operation for the plugin.",
          "enum": [
            "http-get",
            "server-sent-events",
            "websocket"
          ],
          "type": "string"
        },
        "schema_registry": {
          "description": "The plugin-global schema registry configuration.",
          "properties": {
            "confluent": {
              "properties": {
                "authentication": {
                  "properties": {
                    "basic": {
                      "properties": {
                        "password": {
                          "description": "This field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                          "type": "string"
                        },
                        "username": {
                          "description": "This field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "password",
                        "username"
                      ],
                      "type": "object"
                    },
                    "mode": {
                      "default": "none",
                      "description": "Authentication mode to use with the schema registry.",
                      "enum": [
                        "basic",
                        "none",
                        "oauth2"
                      ],
                      "type": "string"
                    },
                    "oauth2": {
                      "properties": {
                        "audience": {
                          "default": [],
                          "description": "List of audiences passed to the IdP when obtaining a new token.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "client_id": {
                          "description": "The client ID for the application registration in the IdP.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                          "type": "string"
                        },
                        "client_secret": {
                          "description": "The client secret for the application registration in the IdP.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                          "type": "string"
                        },
                        "grant_type": {
                          "default": "client_credentials",
                          "description": "The OAuth grant type to be used.",
                          "enum": [
                            "client_credentials",
                            "password"
                          ],
                          "type": "string"
                        },
                        "password": {
                          "description": "The password to use if `config.oauth.grant_type` is set to `password`.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                          "type": "string"
                        },
                        "scopes": {
                          "default": [
                            "openid"
                          ],
                          "description": "List of scopes to request from the IdP when obtaining a new token.",
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "token_endpoint": {
                          "description": "The token endpoint URI.",
                          "type": "string"
                        },
                        "token_headers": {
                          "additionalProperties": true,
                          "description": "Extra headers to be passed in the token endpoint request.",
                          "type": "object"
                        },
                        "token_post_args": {
                          "additionalProperties": true,
                          "description": "Extra post arguments to be passed in the token endpoint request.",
                          "type": "object"
                        },
                        "username": {
                          "description": "The username to use if `config.oauth.grant_type` is set to `password`.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                          "type": "string"
                        }
                      },
                      "required": [
                        "token_endpoint"
                      ],
                      "type": "object"
                    },
                    "oauth2_client": {
                      "properties": {
                        "auth_method": {
                          "default": "client_secret_post",
                          "description": "The authentication method used in client requests to the IdP. Supported values are: `client_secret_basic` to send `client_id` and `client_secret` in the `Authorization: Basic` header, `client_secret_post` to send `client_id` and `client_secret` as part of the request body, or `client_secret_jwt` to send a JWT signed with the `client_secret` using the client assertion as part of the body.",
                          "enum": [
                            "client_secret_basic",
                            "client_secret_jwt",
                            "client_secret_post",
                            "none"
                          ],
                          "type": "string"
                        },
                        "client_secret_jwt_alg": {
                          "default": "HS512",
                          "description": "The algorithm to use with JWT when using `client_secret_jwt` authentication.",
                          "enum": [
                            "HS256",
                            "HS512"
                          ],
                          "type": "string"
                        },
                        "http_proxy": {
                          "description": "The proxy to use when making HTTP requests to the IdP.",
                          "type": "string"
                        },
                        "http_proxy_authorization": {
                          "description": "The `Proxy-Authorization` header value to be used with `http_proxy`.",
                          "type": "string"
                        },
                        "http_version": {
                          "default": 1.1,
                          "description": "The HTTP version used for requests made by this plugin. Supported values: `1.1` for HTTP 1.1 and `1.0` for HTTP 1.0.",
                          "type": "number"
                        },
                        "https_proxy": {
                          "description": "The proxy to use when making HTTPS requests to the IdP.",
                          "type": "string"
                        },
                        "https_proxy_authorization": {
                          "description": "The `Proxy-Authorization` header value to be used with `https_proxy`.",
                          "type": "string"
                        },
                        "keep_alive": {
                          "default": true,
                          "description": "Whether to use keepalive connections to the IdP.",
                          "type": "boolean"
                        },
                        "no_proxy": {
                          "description": "A comma-separated list of hosts that should not be proxied.",
                          "type": "string"
                        },
                        "ssl_verify": {
                          "default": false,
                          "description": "Whether to verify the certificate presented by the IdP when using HTTPS.",
                          "type": "boolean"
                        },
                        "timeout": {
                          "default": 10000,
                          "description": "Network I/O timeout for requests to the IdP in milliseconds.",
                          "maximum": 2147483646,
                          "minimum": 0,
                          "type": "integer"
                        }
                      },
                      "type": "object"
                    }
                  },
                  "type": "object"
                },
                "ssl_verify": {
                  "default": true,
                  "description": "Set to false to disable SSL certificate verification when connecting to the schema registry.",
                  "type": "boolean"
                },
                "ttl": {
                  "description": "The TTL in seconds for the schema registry cache.",
                  "maximum": 3600,
                  "minimum": 0,
                  "type": "number"
                },
                "url": {
                  "description": "The URL of the schema registry.",
                  "type": "string"
                }
              },
              "required": [
                "authentication"
              ],
              "type": "object"
            }
          },
          "type": "object"
        },
        "timeout": {
          "default": 10000,
          "description": "Socket timeout in milliseconds.",
          "type": "integer"
        },
        "topics": {
          "description": "The Kafka topics and their configuration you want to consume from.",
          "items": {
            "properties": {
              "name": {
                "type": "string"
              },
              "schema_registry": {
                "description": "The plugin-global schema registry configuration.",
                "properties": {
                  "confluent": {
                    "properties": {
                      "authentication": {
                        "properties": {
                          "basic": {
                            "properties": {
                              "password": {
                                "description": "This field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                                "type": "string"
                              },
                              "username": {
                                "description": "This field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                                "type": "string"
                              }
                            },
                            "required": [
                              "password",
                              "username"
                            ],
                            "type": "object"
                          },
                          "mode": {
                            "default": "none",
                            "description": "Authentication mode to use with the schema registry.",
                            "enum": [
                              "basic",
                              "none",
                              "oauth2"
                            ],
                            "type": "string"
                          },
                          "oauth2": {
                            "properties": {
                              "audience": {
                                "default": [],
                                "description": "List of audiences passed to the IdP when obtaining a new token.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "client_id": {
                                "description": "The client ID for the application registration in the IdP.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                                "type": "string"
                              },
                              "client_secret": {
                                "description": "The client secret for the application registration in the IdP.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                                "type": "string"
                              },
                              "grant_type": {
                                "default": "client_credentials",
                                "description": "The OAuth grant type to be used.",
                                "enum": [
                                  "client_credentials",
                                  "password"
                                ],
                                "type": "string"
                              },
                              "password": {
                                "description": "The password to use if `config.oauth.grant_type` is set to `password`.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                                "type": "string"
                              },
                              "scopes": {
                                "default": [
                                  "openid"
                                ],
                                "description": "List of scopes to request from the IdP when obtaining a new token.",
                                "items": {
                                  "type": "string"
                                },
                                "type": "array"
                              },
                              "token_endpoint": {
                                "description": "The token endpoint URI.",
                                "type": "string"
                              },
                              "token_headers": {
                                "additionalProperties": true,
                                "description": "Extra headers to be passed in the token endpoint request.",
                                "type": "object"
                              },
                              "token_post_args": {
                                "additionalProperties": true,
                                "description": "Extra post arguments to be passed in the token endpoint request.",
                                "type": "object"
                              },
                              "username": {
                                "description": "The username to use if `config.oauth.grant_type` is set to `password`.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
                                "type": "string"
                              }
                            },
                            "required": [
                              "token_endpoint"
                            ],
                            "type": "object"
                          },
                          "oauth2_client": {
                            "properties": {
                              "auth_method": {
                                "default": "client_secret_post",
                                "description": "The authentication method used in client requests to the IdP. Supported values are: `client_secret_basic` to send `client_id` and `client_secret` in the `Authorization: Basic` header, `client_secret_post` to send `client_id` and `client_secret` as part of the request body, or `client_secret_jwt` to send a JWT signed with the `client_secret` using the client assertion as part of the body.",
                                "enum": [
                                  "client_secret_basic",
                                  "client_secret_jwt",
                                  "client_secret_post",
                                  "none"
                                ],
                                "type": "string"
                              },
                              "client_secret_jwt_alg": {
                                "default": "HS512",
                                "description": "The algorithm to use with JWT when using `client_secret_jwt` authentication.",
                                "enum": [
                                  "HS256",
                                  "HS512"
                                ],
                                "type": "string"
                              },
                              "http_proxy": {
                                "description": "The proxy to use when making HTTP requests to the IdP.",
                                "type": "string"
                              },
                              "http_proxy_authorization": {
                                "description": "The `Proxy-Authorization` header value to be used with `http_proxy`.",
                                "type": "string"
                              },
                              "http_version": {
                                "default": 1.1,
                                "description": "The HTTP version used for requests made by this plugin. Supported values: `1.1` for HTTP 1.1 and `1.0` for HTTP 1.0.",
                                "type": "number"
                              },
                              "https_proxy": {
                                "description": "The proxy to use when making HTTPS requests to the IdP.",
                                "type": "string"
                              },
                              "https_proxy_authorization": {
                                "description": "The `Proxy-Authorization` header value to be used with `https_proxy`.",
                                "type": "string"
                              },
                              "keep_alive": {
                                "default": true,
                                "description": "Whether to use keepalive connections to the IdP.",
                                "type": "boolean"
                              },
                              "no_proxy": {
                                "description": "A comma-separated list of hosts that should not be proxied.",
                                "type": "string"
                              },
                              "ssl_verify": {
                                "default": false,
                                "description": "Whether to verify the certificate presented by the IdP when using HTTPS.",
                                "type": "boolean"
                              },
                              "timeout": {
                                "default": 10000,
                                "description": "Network I/O timeout for requests to the IdP in milliseconds.",
                                "maximum": 2147483646,
                                "minimum": 0,
                                "type": "integer"
                              }
                            },
                            "type": "object"
                          }
                        },
                        "type": "object"
                      },
                      "ssl_verify": {
                        "default": true,
                        "description": "Set to false to disable SSL certificate verification when connecting to the schema registry.",
                        "type": "boolean"
                      },
                      "ttl": {
                        "description": "The TTL in seconds for the schema registry cache.",
                        "maximum": 3600,
                        "minimum": 0,
                        "type": "number"
                      },
                      "url": {
                        "description": "The URL of the schema registry.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "authentication"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              }
            },
            "required": [
              "name",
              "schema_registry"
            ],
            "type": "object"
          },
          "minLength": 1,
          "type": "array"
        }
      },
      "required": [
        "cluster_api_key",
        "cluster_api_secret",
        "topics"
      ],
      "type": "object"
    },
    "consumer": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https",
        "ws",
        "wss"
      ],
      "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https",
          "ws",
          "wss"
        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "config"
  ]
}
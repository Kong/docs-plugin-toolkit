{
  "properties": {
    "config": {
      "properties": {
        "allowed_content_types": {
          "default": [
            "application/json"
          ],
          "description": "List of allowed content types. The value can be configured with the `charset` parameter. For example, `application/json; charset=UTF-8`.\n\n{:.note}\n> **Notes:** \n* Body validation is only done for `application/json` and skipped for any other allowed content types.\n* Only one parameter is supported. If a request sends more than one parameter with the Content-Type header, only the first parameter is evaluated and the rest are truncated.\nThe type, subtype, parameter names, and the value of the charset parameter are not case sensitive based on the RFC explanation.\n* Parameter does not need to be explicitly configured to allow a request passed with a parameter content-type. The parameter is checked only if the request carries the parameter and it's explicitly configured. For example, a request with `application/json; charset=UTF-8` is to be considered valid for `application/json`.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "body_schema": {
          "description": "The request body schema specification. One of `body_schema` or `parameter_schema`\nmust be specified.",
          "examples": [
            "[{\"name\":{\"type\": \"string\", \"required\": true}}]"
          ],
          "type": "string"
        },
        "parameter_schema": {
          "description": "Array of parameter validator specifications. For details and examples, see\n[Parameter Schema Definition](#parameter-schema-definition). One of `body_schema` or `parameter_schema`\nmust be specified.",
          "items": {
            "properties": {
              "explode": {
                "type": "boolean"
              },
              "in": {
                "enum": [
                  "header",
                  "path",
                  "query"
                ],
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "required": {
                "type": "boolean"
              },
              "schema": {
                "type": "string"
              },
              "style": {
                "enum": [
                  "deepObject",
                  "form",
                  "label",
                  "matrix",
                  "pipeDelimited",
                  "simple",
                  "spaceDelimited"
                ],
                "type": "string"
              }
            },
            "required": [
              "in",
              "name",
              "required"
            ],
            "type": "object"
          },
          "type": "array"
        },
        "verbose_response": {
          "default": false,
          "description": "If enabled, the plugin returns more verbose and detailed validation errors\n(for example, the name of the required field that is missing).",
          "type": "boolean"
        },
        "version": {
          "default": "kong",
          "description": "Which validator to use. Supported values are `kong` (default) for using Kong's own schema\nvalidator, or `draft4` for using a JSON Schema Draft 4-compliant validator.",
          "enum": [
            "draft4",
            "kong"
          ],
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
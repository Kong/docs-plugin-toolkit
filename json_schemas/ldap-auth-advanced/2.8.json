{
  "properties": {
    "config": {
      "properties": {
        "anonymous": {
          "default": "",
          "description": "An optional string (consumer UUID) value to use as an anonymous consumer if authentication fails.\nIf empty (default), the request will fail with an authentication failure `4xx`. Note that this value\nmust refer to the consumer `id` attribute that is internal to Kong Gateway, and **not** its `custom_id`.",
          "minLength": 0,
          "type": "string"
        },
        "attribute": {
          "description": "Attribute to be used to search the user; e.g., \"cn\".",
          "examples": [
            "cn"
          ],
          "type": "string"
        },
        "base_dn": {
          "description": "Base DN as the starting point for the search; e.g., \"dc=example,dc=com\".",
          "examples": [
            "dc=example,dc=com"
          ],
          "type": "string"
        },
        "bind_dn": {
          "description": "The DN to bind to. Used to perform LDAP search of user. This `bind_dn`\nshould have permissions to search for the user being authenticated.",
          "type": "string"
        },
        "cache_ttl": {
          "default": 60,
          "description": "Cache expiry time in seconds.",
          "examples": [
            60
          ],
          "type": "number"
        },
        "consumer_by": {
          "default": [
            "custom_id",
            "username"
          ],
          "description": "Whether to authenticate consumers based on `username`, `custom_id`, or both.",
          "items": {
            "enum": [
              "custom_id",
              "username"
            ],
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "consumer_optional": {
          "default": false,
          "description": "Whether consumer mapping is optional. If `consumer_optional=true`, the plugin will not attempt to associate a consumer with the\nLDAP authenticated user. If `consumer_optional=false`, LDAP authenticated users can still access upstream resources.\n\nTo prevent access from LDAP users that are not associated with consumers, set `consumer_optional=false`, set the `anonymous` field to an\nexisting `consumer_id`, then use the [Request Termination plugin](/hub/kong-inc/request-termination/) to deny any requests from the anonymous consumer.",
          "type": "boolean"
        },
        "group_base_dn": {
          "description": "Sets a distinguished name (DN) for the entry where LDAP searches for groups begin. This field is case-insensitive.",
          "type": "string"
        },
        "group_member_attribute": {
          "default": "memberOf",
          "description": "Sets the attribute holding the members of the LDAP group. This field is case-sensitive.",
          "type": "string"
        },
        "group_name_attribute": {
          "description": "Sets the attribute holding the name of a group, typically\ncalled `name` (in Active Directory) or `cn` (in OpenLDAP). This\nfield is case-insensitive.",
          "type": "string"
        },
        "header_type": {
          "default": "ldap",
          "description": "An optional string to use as part of the Authorization header. By default, a valid Authorization header looks like this:\n`Authorization: ldap base64(username:password)`. If `header_type` is set to \"basic\", then the Authorization header would be\n`Authorization: basic base64(username:password)`. Note that `header_type` can take any string, not just `\"ldap\"` and `\"basic\"`.",
          "examples": [
            "ldap"
          ],
          "type": "string"
        },
        "hide_credentials": {
          "default": false,
          "description": "An optional boolean value telling the plugin to hide the credential to the upstream server. It will be removed by Kong before proxying the request.",
          "type": "boolean"
        },
        "keepalive": {
          "default": 60000,
          "description": "An optional value in milliseconds that defines how long an idle connection to LDAP server will live before being closed.",
          "type": "number"
        },
        "ldap_host": {
          "description": "Host on which the LDAP server is running.",
          "examples": [
            "ldap.example.com"
          ],
          "type": "string"
        },
        "ldap_password": {
          "description": "The password to the LDAP server.",
          "type": "string"
        },
        "ldap_port": {
          "default": 389,
          "description": "TCP port where the LDAP server is listening. 389 is the default\nport for non-SSL LDAP and AD. 636 is the port required for SSL LDAP and AD. If `ldaps` is\nconfigured, you must use port 636.",
          "examples": [
            389
          ],
          "type": "number"
        },
        "ldaps": {
          "default": false,
          "description": "Set it to `true` to use `ldaps`, a secure protocol (that can be configured\nto TLS) to connect to the LDAP server. When `ldaps` is\nconfigured, you must use port 636. If the `ldap` setting is enabled, ensure the\n`start_tls` setting is disabled.",
          "type": "boolean"
        },
        "log_search_results": {
          "default": false,
          "description": "Displays all the LDAP search results received from the LDAP\nserver for debugging purposes. Not recommended to be enabled in\na production environment.",
          "type": "boolean"
        },
        "start_tls": {
          "default": false,
          "description": "Set it to `true` to issue StartTLS (Transport Layer Security) extended operation\nover `ldap` connection. If the `start_tls` setting is enabled, ensure the `ldaps`\nsetting is disabled.",
          "examples": [
            true
          ],
          "type": "boolean"
        },
        "timeout": {
          "default": 10000,
          "description": "An optional timeout in milliseconds when waiting for connection with LDAP server.",
          "type": "number"
        },
        "verify_ldap_host": {
          "default": false,
          "description": "Set to `true` to authenticate LDAP server. The server certificate will be verified according to the CA certificates specified by the `lua_ssl_trusted_certificate` directive.",
          "examples": [
            false
          ],
          "type": "boolean"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
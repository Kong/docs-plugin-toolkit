{
  "properties": {
    "config": {
      "properties": {
        "anonymous": {
          "description": "An optional string (consumer UUID or username) value to use as an “anonymous” consumer. If not set, a Kong Consumer must exist for the SAML IdP user credentials, mapping the username format to the Kong Consumer username.",
          "type": "string"
        },
        "assertion_consumer_path": {
          "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).",
          "type": "string"
        },
        "idp_certificate": {
          "description": "The public certificate provided by the IdP. This is used to validate responses from the IdP.  Only include the contents of the certificate. Do not include the header (`BEGIN CERTIFICATE`) and footer (`END CERTIFICATE`) lines.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "idp_sso_url": {
          "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search.",
          "type": "string"
        },
        "issuer": {
          "description": "The unique identifier of the IdP application. Formatted as a URL containing information about the IdP so the SP can validate that the SAML assertions it receives are issued from the correct IdP.",
          "type": "string"
        },
        "nameid_format": {
          "default": "EmailAddress",
          "description": "The requested `NameId` format. Options available are: - `Unspecified` - `EmailAddress` - `Persistent` - `Transient`",
          "enum": [
            "EmailAddress",
            "Persistent",
            "Transient",
            "Unspecified"
          ],
          "type": "string"
        },
        "redis": {
          "properties": {
            "cluster_max_redirections": {
              "default": 5,
              "description": "Maximum retry attempts for redirection.",
              "type": "integer"
            },
            "cluster_nodes": {
              "description": "Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.",
              "items": {
                "properties": {
                  "ip": {
                    "default": "127.0.0.1",
                    "description": "A string representing a host name, such as example.com.",
                    "type": "string"
                  },
                  "port": {
                    "default": 6379,
                    "description": "An integer representing a port number between 0 and 65535, inclusive.",
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "minLength": 1,
              "type": "array"
            },
            "connect_timeout": {
              "default": 2000,
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "connection_is_proxied": {
              "default": false,
              "description": "If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.",
              "type": "boolean"
            },
            "database": {
              "default": 0,
              "description": "Database to use for the Redis connection when using the `redis` strategy",
              "type": "integer"
            },
            "host": {
              "default": "127.0.0.1",
              "description": "A string representing a host name, such as example.com.",
              "type": "string"
            },
            "keepalive_backlog": {
              "description": "Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.",
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "keepalive_pool_size": {
              "default": 256,
              "description": "The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.",
              "maximum": 2147483646,
              "minimum": 1,
              "type": "integer"
            },
            "password": {
              "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
              "type": "string"
            },
            "port": {
              "default": 6379,
              "description": "An integer representing a port number between 0 and 65535, inclusive.",
              "maximum": 65535,
              "minimum": 0,
              "type": "integer"
            },
            "prefix": {
              "description": "The Redis session key prefix.",
              "type": "string"
            },
            "read_timeout": {
              "default": 2000,
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "send_timeout": {
              "default": 2000,
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "sentinel_master": {
              "description": "Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.",
              "type": "string"
            },
            "sentinel_nodes": {
              "description": "Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.",
              "items": {
                "properties": {
                  "host": {
                    "default": "127.0.0.1",
                    "description": "A string representing a host name, such as example.com.",
                    "type": "string"
                  },
                  "port": {
                    "default": 6379,
                    "description": "An integer representing a port number between 0 and 65535, inclusive.",
                    "maximum": 65535,
                    "minimum": 0,
                    "type": "integer"
                  }
                },
                "type": "object"
              },
              "minLength": 1,
              "type": "array"
            },
            "sentinel_password": {
              "description": "Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
              "type": "string"
            },
            "sentinel_role": {
              "description": "Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.",
              "enum": [
                "any",
                "master",
                "slave"
              ],
              "type": "string"
            },
            "sentinel_username": {
              "description": "Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
              "type": "string"
            },
            "server_name": {
              "description": "A string representing an SNI (server name indication) value for TLS.",
              "type": "string"
            },
            "socket": {
              "description": "The Redis unix socket path.",
              "type": "string"
            },
            "ssl": {
              "default": false,
              "description": "If set to true, uses SSL to connect to Redis.",
              "type": "boolean"
            },
            "ssl_verify": {
              "default": false,
              "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.",
              "type": "boolean"
            },
            "username": {
              "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
              "type": "string"
            }
          },
          "type": "object"
        },
        "request_digest_algorithm": {
          "default": "SHA256",
          "description": "The digest algorithm for Authn requests: - `SHA256` - `SHA1`",
          "enum": [
            "SHA1",
            "SHA256"
          ],
          "type": "string"
        },
        "request_signature_algorithm": {
          "default": "SHA256",
          "description": "The signature algorithm for signing Authn requests. Options available are: - `SHA256` - `SHA384` - `SHA512`",
          "enum": [
            "SHA256",
            "SHA384",
            "SHA512"
          ],
          "type": "string"
        },
        "request_signing_certificate": {
          "description": "The certificate for signing requests.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "request_signing_key": {
          "description": "The private key for signing requests.  If this parameter is set, requests sent to the IdP are signed.  The `request_signing_certificate` parameter must be set as well.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "response_digest_algorithm": {
          "default": "SHA256",
          "description": "The algorithm for verifying digest in SAML responses: - `SHA256` - `SHA1`",
          "enum": [
            "SHA1",
            "SHA256"
          ],
          "type": "string"
        },
        "response_encryption_key": {
          "description": "The private encryption key required to decrypt encrypted assertions.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "response_signature_algorithm": {
          "default": "SHA256",
          "description": "The algorithm for validating signatures in SAML responses. Options available are: - `SHA256` - `SHA384` - `SHA512`",
          "enum": [
            "SHA256",
            "SHA384",
            "SHA512"
          ],
          "type": "string"
        },
        "session_absolute_timeout": {
          "default": 86400,
          "description": "The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.",
          "type": "number"
        },
        "session_audience": {
          "default": "default",
          "description": "The session audience, for example \"my-application\"",
          "type": "string"
        },
        "session_cookie_domain": {
          "description": "The session cookie domain flag.",
          "type": "string"
        },
        "session_cookie_http_only": {
          "default": true,
          "description": "Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.",
          "type": "boolean"
        },
        "session_cookie_name": {
          "default": "session",
          "description": "The session cookie name.",
          "type": "string"
        },
        "session_cookie_path": {
          "default": "/",
          "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).",
          "type": "string"
        },
        "session_cookie_same_site": {
          "default": "Lax",
          "description": "Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks.",
          "enum": [
            "Default",
            "Lax",
            "None",
            "Strict"
          ],
          "type": "string"
        },
        "session_cookie_secure": {
          "description": "The cookie is only sent to the server when a request is made with the https:scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.",
          "type": "boolean"
        },
        "session_enforce_same_subject": {
          "default": false,
          "description": "When set to `true`, audiences are forced to share the same subject.",
          "type": "boolean"
        },
        "session_hash_storage_key": {
          "default": false,
          "description": "When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.",
          "type": "boolean"
        },
        "session_hash_subject": {
          "default": false,
          "description": "When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.",
          "type": "boolean"
        },
        "session_idling_timeout": {
          "default": 900,
          "description": "The session cookie idle time in seconds.",
          "type": "number"
        },
        "session_memcached_host": {
          "default": "127.0.0.1",
          "description": "The memcached host.",
          "type": "string"
        },
        "session_memcached_port": {
          "default": 11211,
          "description": "An integer representing a port number between 0 and 65535, inclusive.",
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "session_memcached_prefix": {
          "description": "The memcached session key prefix.",
          "type": "string"
        },
        "session_memcached_socket": {
          "description": "The memcached unix socket path.",
          "type": "string"
        },
        "session_remember": {
          "default": false,
          "description": "Enables or disables persistent sessions",
          "type": "boolean"
        },
        "session_remember_absolute_timeout": {
          "default": 2592000,
          "description": "Persistent session absolute timeout in seconds.",
          "type": "number"
        },
        "session_remember_cookie_name": {
          "default": "remember",
          "description": "Persistent session cookie name",
          "type": "string"
        },
        "session_remember_rolling_timeout": {
          "default": 604800,
          "description": "Persistent session rolling timeout in seconds.",
          "type": "number"
        },
        "session_request_headers": {
          "items": {
            "enum": [
              "absolute-timeout",
              "audience",
              "id",
              "idling-timeout",
              "rolling-timeout",
              "subject",
              "timeout"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "session_response_headers": {
          "items": {
            "enum": [
              "absolute-timeout",
              "audience",
              "id",
              "idling-timeout",
              "rolling-timeout",
              "subject",
              "timeout"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "session_rolling_timeout": {
          "default": 3600,
          "description": "The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.",
          "type": "number"
        },
        "session_secret": {
          "description": "The session secret. This must be a random string of 32 characters from the base64 alphabet (letters, numbers, `/`, `_` and `+`). It is used as the secret key for encrypting session data as well as state information that is sent to the IdP in the authentication exchange.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "maxLength": 32,
          "minLength": 32,
          "type": "string"
        },
        "session_storage": {
          "default": "cookie",
          "description": "The session storage for session data: - `cookie`: stores session data with the session cookie. The session cannot be invalidated or revoked without changing the session secret, but is stateless, and doesn't require a database. - `memcached`: stores session data in memcached - `redis`: stores session data in Redis",
          "enum": [
            "cookie",
            "memcache",
            "memcached",
            "redis"
          ],
          "type": "string"
        },
        "session_store_metadata": {
          "default": false,
          "description": "Configures whether or not session metadata should be stored. This includes information about the active sessions for the `specific_audience` belonging to a specific subject.",
          "type": "boolean"
        },
        "validate_assertion_signature": {
          "default": true,
          "description": "Enable signature validation for SAML responses.",
          "type": "boolean"
        }
      },
      "required": [
        "assertion_consumer_path",
        "idp_sso_url",
        "issuer",
        "session_secret"
      ],
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A set of strings representing HTTP protocols.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "config"
  ]
}
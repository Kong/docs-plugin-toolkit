{
  "properties": {
    "config": {
      "properties": {
        "accept_http_if_already_terminated": {
          "default": false,
          "description": "Accepts HTTPs requests that have already been terminated by a proxy or load balancer and the\n`x-forwarded-proto: https` header has been added to the request. Only enable this option\nif the Kong server cannot be publicly accessed and the only entry point is such proxy or load balancer.",
          "type": "boolean"
        },
        "anonymous": {
          "description": "An optional string (consumer UUID) value to use as an anonymous consumer if authentication fails.\nIf empty (default), the request fails with an authentication failure `4xx`. Note that this value\nmust refer to the consumer `id` attribute that is internal to Kong Gateway, and **not** its `custom_id`.",
          "type": "string"
        },
        "auth_header_name": {
          "default": "authorization",
          "description": "The name of the header that is supposed to carry the access token. Default: `authorization`.",
          "type": "string"
        },
        "enable_authorization_code": {
          "default": false,
          "description": "An optional boolean value to enable the three-legged Authorization Code flow ([RFC 6742 Section 4.1](https://tools.ietf.org/html/rfc6749#section-4.1)).",
          "examples": [
            true
          ],
          "type": "boolean"
        },
        "enable_client_credentials": {
          "default": false,
          "description": "An optional boolean value to enable the Client Credentials Grant flow ([RFC 6742 Section 4.4](https://tools.ietf.org/html/rfc6749#section-4.4)).",
          "type": "boolean"
        },
        "enable_implicit_grant": {
          "default": false,
          "description": "An optional boolean value to enable the Implicit Grant flow which allows to provision a token as a result of the authorization process ([RFC 6742 Section 4.2](https://tools.ietf.org/html/rfc6749#section-4.2)).",
          "type": "boolean"
        },
        "enable_password_grant": {
          "default": false,
          "description": "An optional boolean value to enable the Resource Owner Password Credentials Grant flow ([RFC 6742 Section 4.3](https://tools.ietf.org/html/rfc6749#section-4.3)).",
          "type": "boolean"
        },
        "global_credentials": {
          "default": false,
          "description": "An optional boolean value that allows using the same OAuth credentials generated by the plugin with\nany other Service whose OAuth 2.0 plugin configuration also has `config.global_credentials=true`.",
          "type": "boolean"
        },
        "hide_credentials": {
          "default": false,
          "description": "An optional boolean value telling the plugin to show or hide the credential from the upstream service.\nIf `true`, the plugin will strip the credential from the request (the header containing the client credentials)\nbefore proxying it.",
          "type": "boolean"
        },
        "mandatory_scope": {
          "default": false,
          "description": "An optional boolean value telling the plugin to require at least one `scope` to be authorized by the end user.",
          "examples": [
            true
          ],
          "type": "boolean"
        },
        "persistent_refresh_token": {
          "default": false,
          "type": "boolean"
        },
        "pkce": {
          "default": "lax",
          "description": "Specifies a mode of how the Proof Key for Code Exchange (PKCE) should be\nhandled by the plugin. The possible modes are `none`, `lax`, and `strict`.\nThe `strict` mode enforces PKCE on both authorization and token endpoints for\nall the clients. The `lax` mode enforces PKCE for public clients, but it does\nnot enforce it for confidential clients. The `none` mode does not enforce PKCE\non any client. In any case, if a client asks for PKCE on authorization\nendpoint, the PKCE is also enforced on token endpoint.",
          "enum": [
            "lax",
            "none",
            "strict"
          ],
          "type": "string"
        },
        "provision_key": {
          "description": "The unique key the plugin has generated when it has been added to the Service.",
          "examples": [
            "<autogenerated>"
          ],
          "type": "string"
        },
        "refresh_token_ttl": {
          "default": 1209600,
          "description": "An optional integer value telling the plugin how many seconds a token/refresh token pair is valid for,\nand can be used to generate a new access token. Default value is 2 weeks. Set to `0` to keep the token/refresh\ntoken pair valid indefinitely.",
          "type": "number"
        },
        "reuse_refresh_token": {
          "default": false,
          "description": "An optional boolean value that indicates whether an OAuth refresh token is\nreused when refreshing an access token.",
          "type": "boolean"
        },
        "scopes": {
          "description": "Describes an array of scope names that will be available to the end user. If `mandatory_scope` is\nset to `true`, then `scopes` are required.",
          "examples": [
            [
              "address",
              "email",
              "phone"
            ]
          ],
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "token_expiration": {
          "default": 7200,
          "description": "An optional integer value telling the plugin how many seconds a token should last, after which the client will\nneed to refresh the token. Set to `0` to disable the expiration.",
          "type": "number"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": [

        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
{
  "properties": {
    "config": {
      "properties": {
        "add": {
          "properties": {
            "body": {
              "default": [

              ],
              "description": "List of `paramname:value` pairs. If and only if content-type is one the\nfollowing [`application/json`, `multipart/form-data`, `application/x-www-form-urlencoded`]\nand the parameter is not present, add a new parameter with the given value to the form-encoded\nbody. Ignored if the parameter is already present.",
              "examples": [
                [
                  "another-form-param:some_value",
                  "new-form-param:some_value"
                ]
              ],
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "headers": {
              "default": [

              ],
              "description": "List of `headername:value` pairs. If and only if the header is not already set, set a new header\nwith the given value. Ignored if the header is already set.",
              "examples": [
                [
                  "x-another-header:something",
                  "x-new-header:value"
                ]
              ],
              "items": {
                "pattern": "^[^:]+:.*$",
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "querystring": {
              "default": [

              ],
              "description": "List of `queryname:value` pairs. If and only if the querystring is not already set, set a new\nquerystring with the given value. Ignored if the querystring is already set.",
              "examples": [
                [
                  "another-param:some_value",
                  "new-param:some_value"
                ]
              ],
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "append": {
          "properties": {
            "body": {
              "default": [

              ],
              "description": "List of `paramname:value` pairs. If the content-type is one the following\n[`application/json`, `application/x-www-form-urlencoded`], add a new parameter\nwith the given value if the parameter is not present. Otherwise, if it is already present,\naggregate the two values (old and new) in an array.",
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "headers": {
              "default": [

              ],
              "description": "List of `headername:value` pairs. If the header is not set, set it with the given value.\nIf it is already set, an additional new header with the same name and the new value will be appended.",
              "items": {
                "pattern": "^[^:]+:.*$",
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "querystring": {
              "default": [

              ],
              "description": "List of `queryname:value` pairs. If the querystring is not set, set it with the given value. If it is already set, a new querystring with the same name and the new value will be set.",
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "http_method": {
          "description": "Sets the HTTP method for the upstream request.",
          "pattern": "^[A-Z]+$",
          "type": "string"
        },
        "remove": {
          "properties": {
            "body": {
              "default": [

              ],
              "description": "List of parameter names. Remove the parameter if and only if content-type is one the following:\n[`application/json`, `multipart/form-data`, `application/x-www-form-urlencoded`] and the parameter is present.",
              "examples": [
                [
                  "formparam-another-one",
                  "formparam-toremove"
                ]
              ],
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "headers": {
              "default": [

              ],
              "description": "List of header names. Unset the headers with the given name.",
              "examples": [
                [
                  "x-another-one",
                  "x-toremove"
                ]
              ],
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "querystring": {
              "default": [

              ],
              "description": "List of querystring names. Remove the querystring if it is present.",
              "examples": [
                [
                  "qs-old-name:qs-new-name",
                  "qs2-old-name:qs2-new-name"
                ]
              ],
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "rename": {
          "properties": {
            "body": {
              "default": [

              ],
              "description": "List of `paramname:value` pairs. Rename the parameter name if and only if\ncontent-type is one the following [`application/json`, `multipart/form-data`, `application/x-www-form-urlencoded`]\nand the parameter is present.",
              "examples": [
                [
                  "param-old:param-new",
                  "param2-old:param2-new"
                ]
              ],
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "headers": {
              "default": [

              ],
              "description": "List of `headername:value` pairs. If and only if the header is already set, rename\nthe header. The value is unchanged. Ignored if the header is not already set.",
              "examples": [
                [
                  "another-old-name:another-new-name",
                  "header-old-name:header-new-name"
                ]
              ],
              "items": {
                "pattern": "^[^:]+:.*$",
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "querystring": {
              "default": [

              ],
              "description": "List of queryname:value pairs. If and only if the field name is already set, rename the field name.\nThe value is unchanged. Ignored if the field name is not already set.",
              "examples": [
                [
                  "qs-old-name:qs-new-name",
                  "qs2-old-name:qs2-new-name"
                ]
              ],
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "replace": {
          "properties": {
            "body": {
              "default": [

              ],
              "description": "List of `paramname:value` pairs. If and only if content-type is one the following\n[`application/json`, `multipart/form-data`, `application/x-www-form-urlencoded`] and the\nparameter is already present, replace its old value with the new one. Ignored if\nthe parameter is not already present.",
              "examples": [
                [
                  "body-param1:new-value-1",
                  "body-param2:new-value-2"
                ]
              ],
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "headers": {
              "default": [

              ],
              "description": "List of `headername:value` pairs. If and only if the header is already set, replace\nits old value with the new one. Ignored if the header is not already set.",
              "items": {
                "pattern": "^[^:]+:.*$",
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "querystring": {
              "default": [

              ],
              "description": "List of `queryname:value pairs`. If and only if the field name is already set,\nreplace its old value with the new one. Ignored if the field name is not already set.",
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "type": "array"
            },
            "uri": {
              "description": "Updates the upstream request URI with a given value. This value can be used to update\nonly the path part of the URI, not the scheme or the hostname.",
              "type": "string"
            }
          },
          "required": [

          ],
          "type": "object"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
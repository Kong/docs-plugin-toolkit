{
  "properties": {
    "config": {
      "properties": {
        "cost_strategy": {
          "default": "default",
          "description": "Strategy to use to evaluate query costs. Either `default` or `node_quantifier`.",
          "enum": [
            "default",
            "node_quantifier"
          ],
          "type": "string"
        },
        "dictionary_name": {
          "default": "kong_rate_limiting_counters",
          "description": "The shared dictionary where counters will be stored until the next sync cycle.",
          "type": "string"
        },
        "hide_client_headers": {
          "default": false,
          "description": "Optionally hide informative response headers. Available options: `true` or `false`.",
          "type": "boolean"
        },
        "identifier": {
          "default": "consumer",
          "description": "How to define the rate limit key. Can be `ip`, `credential`, `consumer`.",
          "enum": [
            "consumer",
            "credential",
            "ip"
          ],
          "type": "string"
        },
        "limit": {
          "description": "One or more requests-per-window limits to apply.",
          "items": {
            "required": [

            ],
            "type": "number"
          },
          "type": "array"
        },
        "max_cost": {
          "default": 0,
          "description": "A defined maximum cost per query. 0 means unlimited.",
          "type": "number"
        },
        "namespace": {
          "description": "The rate limiting library namespace to use for this plugin instance. NOTE: For the plugin instances sharing the same namespace, all the configurations that are required for synchronizing counters, e.g. `strategy`, `redis`, `sync_rate`, `window_size`, `dictionary_name`, need to be the same.",
          "type": "string"
        },
        "redis": {
          "properties": {
            "cluster_addresses": {
              "description": "Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Cluster. Each string element must be a hostname. The minimum length of the array is 1 element.",
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "minLength": 1,
              "type": "array"
            },
            "connect_timeout": {
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "database": {
              "default": 0,
              "description": "Database to use for the Redis connection when using the `redis` strategy",
              "type": "integer"
            },
            "host": {
              "description": "A string representing a host name, such as example.com.",
              "type": "string"
            },
            "keepalive_backlog": {
              "description": "Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.",
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "keepalive_pool_size": {
              "default": 256,
              "description": "The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.",
              "maximum": 2147483646,
              "minimum": 1,
              "type": "integer"
            },
            "password": {
              "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
              "type": "string"
            },
            "port": {
              "description": "An integer representing a port number between 0 and 65535, inclusive.",
              "maximum": 65535,
              "minimum": 0,
              "type": "integer"
            },
            "read_timeout": {
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "send_timeout": {
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "sentinel_addresses": {
              "description": "Sentinel addresses to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel. Each string element must be a hostname. The minimum length of the array is 1 element.",
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "minLength": 1,
              "type": "array"
            },
            "sentinel_master": {
              "description": "Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.",
              "type": "string"
            },
            "sentinel_password": {
              "description": "Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
              "type": "string"
            },
            "sentinel_role": {
              "description": "Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.",
              "enum": [
                "any",
                "master",
                "slave"
              ],
              "type": "string"
            },
            "sentinel_username": {
              "description": "Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
              "type": "string"
            },
            "server_name": {
              "description": "A string representing an SNI (server name indication) value for TLS.",
              "type": "string"
            },
            "ssl": {
              "default": false,
              "description": "If set to true, uses SSL to connect to Redis.",
              "type": "boolean"
            },
            "ssl_verify": {
              "default": false,
              "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.",
              "type": "boolean"
            },
            "timeout": {
              "default": 2000,
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "username": {
              "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. The username **cannot** be set to `default`.\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
              "type": "string"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "score_factor": {
          "default": 1,
          "description": "A scoring factor to multiply (or divide) the cost. The `score_factor` must always be greater than 0.",
          "minimum": 0,
          "type": "number"
        },
        "strategy": {
          "default": "cluster",
          "description": "The rate-limiting strategy to use for retrieving and incrementing the limits.",
          "enum": [
            "cluster",
            "redis"
          ],
          "type": "string"
        },
        "sync_rate": {
          "description": "How often to sync counter data to the central data store. A value of 0 results in synchronous behavior; a value of -1 ignores sync behavior entirely and only stores counters in node memory. A value greater than 0 syncs the counters in that many number of seconds.",
          "type": "number"
        },
        "window_size": {
          "description": "One or more window sizes to apply a limit to (defined in seconds).",
          "items": {
            "required": [

            ],
            "type": "number"
          },
          "type": "array"
        },
        "window_type": {
          "default": "sliding",
          "description": "Sets the time window to either `sliding` or `fixed`.",
          "enum": [
            "fixed",
            "sliding"
          ],
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A set of strings representing HTTP protocols.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": [

        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
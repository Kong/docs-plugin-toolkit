{
  "properties": {
    "config": {
      "properties": {
        "cost_strategy": {
          "default": "default",
          "description": "Strategy to use to evaluate query costs. Either `default` or\n`node_quantifier`. See [default](/hub/kong-inc/graphql-rate-limiting-advanced/#default) and\n[node_quantifier](/hub/kong-inc/graphql-rate-limiting-advanced/#node_quantifier) respectively.",
          "enum": [
            "default",
            "node_quantifier"
          ],
          "type": "string"
        },
        "dictionary_name": {
          "default": "kong_rate_limiting_counters",
          "description": "The shared dictionary where counters will be stored until the next sync cycle.",
          "type": "string"
        },
        "hide_client_headers": {
          "default": false,
          "description": "Optionally hide informative response headers. Available options: `true` or `false`.",
          "type": "boolean"
        },
        "identifier": {
          "default": "consumer",
          "description": "How to define the rate limit key. Can be `ip`, `credential`, `consumer`.",
          "enum": [
            "consumer",
            "credential",
            "ip"
          ],
          "type": "string"
        },
        "limit": {
          "description": "One or more requests-per-window limits to apply.",
          "examples": [
            [
              5
            ]
          ],
          "items": {
            "required": [

            ],
            "type": "number"
          },
          "type": "array"
        },
        "max_cost": {
          "default": 0,
          "description": "A defined maximum cost per query. 0 means unlimited.",
          "type": "number"
        },
        "namespace": {
          "description": "The rate limiting library namespace to use for this plugin instance. Counter\ndata and sync configuration is shared in a namespace.\n\n{:.important}\n> **Important**: If managing Kong Gateway with **declarative configuration** or running\nKong Gateway in **DB-less mode**, set the `namespace` explicitly in your declarative configuration.\n> <br><br>\n> If not set, you will run into the following issues:\n* In DB-less mode, this field will be regenerated automatically on every configuration change.\n* If applying declarative configuration with decK, decK will automatically fail the update and require a\n`namespace` value.",
          "examples": [
            "example_namespace"
          ],
          "type": "string"
        },
        "redis": {
          "properties": {
            "cluster_addresses": {
              "description": "Cluster addresses to use for Redis connection when the `redis` strategy is defined. Defining this value implies using Redis cluster.",
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "minLength": 1,
              "type": "array"
            },
            "connect_timeout": {
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "database": {
              "default": 0,
              "description": "Database to use for Redis connection when the `redis` strategy is defined.",
              "type": "integer"
            },
            "host": {
              "description": "Host to use for Redis connection when the `redis` strategy is defined.",
              "type": "string"
            },
            "keepalive_backlog": {
              "description": "If specified, limits the total number of opened connections for a pool. If the\nconnection pool is full, all connection queues beyond the maximum limit go into\nthe backlog queue. Once the backlog queue is full, subsequent connect operations\nwill fail and return `nil`. Queued connect operations resume once the number of\nconnections in the pool is less than `keepalive_pool_size`. Note that queued\nconnect operations are subject to set timeouts.",
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "keepalive_pool_size": {
              "default": 30,
              "description": "The size limit for every cosocket connection pool associated with every remote\nserver, per worker process. If no `keepalive_pool_size` is specified and no `keepalive_backlog`\nis specified, no pool is created. If no `keepalive_pool_size` is specified and `keepalive_backlog`\nis specified, then the pool uses the default value `30`.",
              "maximum": 2147483646,
              "minimum": 1,
              "type": "integer"
            },
            "password": {
              "description": "Password to use for Redis connection when the `redis` strategy is defined.\nIf undefined, no AUTH commands are sent to Redis.",
              "type": "string"
            },
            "port": {
              "description": "Port to use for Redis connection when the `redis` strategy is defined.",
              "maximum": 65535,
              "minimum": 0,
              "type": "integer"
            },
            "read_timeout": {
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "send_timeout": {
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "sentinel_addresses": {
              "description": "Sentinel addresses to use for Redis connection when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.",
              "items": {
                "required": [

                ],
                "type": "string"
              },
              "minLength": 1,
              "type": "array"
            },
            "sentinel_master": {
              "description": "Sentinel master to use for Redis connection when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.",
              "type": "string"
            },
            "sentinel_password": {
              "type": "string"
            },
            "sentinel_role": {
              "description": "Sentinel role to use for Redis connection when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.",
              "enum": [
                "any",
                "master",
                "slave"
              ],
              "type": "string"
            },
            "sentinel_username": {
              "description": "Sentinel username to authenticate with a Redis Sentinel instance.\nIf undefined, ACL authentication will not be performed. This requires Redis v6.2.0+.",
              "type": "string"
            },
            "server_name": {
              "description": "Specifies the server name for the new TLS extension Server Name Indication (SNI) when connecting over SSL.",
              "type": "string"
            },
            "ssl": {
              "default": false,
              "description": "If set to true, then uses SSL to connect to Redis.",
              "type": "boolean"
            },
            "ssl_verify": {
              "default": false,
              "description": "If set to true, then verifies the validity of the server SSL certificate. Note that you need to configure the\n[lua_ssl_trusted_certificate](/gateway/latest/reference/configuration/#lua_ssl_trusted_certificate)\nto specify the CA (or server) certificate used by your redis server. You may also need to configure\n[lua_ssl_verify_depth](/gateway/latest/reference/configuration/#lua_ssl_verify_depth) accordingly.",
              "type": "boolean"
            },
            "timeout": {
              "default": 2000,
              "description": "Connection timeout (in milliseconds) to use for Redis connection when the `redis` strategy is defined.",
              "maximum": 2147483646,
              "minimum": 0,
              "type": "integer"
            },
            "username": {
              "description": "Username to use for Redis connection when the `redis` strategy is defined and ACL authentication is desired.\nIf undefined, ACL authentication will not be performed.\n\nThis requires Redis v6.0.0+. The username **cannot** be set to `default`.",
              "type": "string"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "score_factor": {
          "default": 1,
          "description": "A scoring factor to multiply (or divide) the cost. The `score_factor` must always be greater than 0.",
          "minimum": 0,
          "type": "number"
        },
        "strategy": {
          "default": "cluster",
          "description": "The rate-limiting strategy to use for retrieving and incrementing the\nlimits. Available values are:\n- `cluster`: Counters are stored in the Kong datastore and shared across\nthe nodes.\n- `redis`: Counters are stored on a Redis server and shared\nacross the nodes.\n\nIn DB-less and hybrid modes, the `cluster` config strategy is not\nsupported.\n\n{:.important}\n> There is no local storage strategy. However, you can achieve local\nrate limiting by using a placeholder `strategy` value (either `cluster` or `redis`)\nand a `sync_rate` of `-1`. This setting stores counters in-memory on the\nnode.\n<br><br>If using `redis` as the placeholder value, you must fill in all\nadditional `redis` configuration parameters with placeholder values.\n\nFor details on which strategy should be used, refer to the\n[implementation considerations](/hub/kong-inc/rate-limiting/#implementation-considerations).",
          "enum": [
            "cluster",
            "redis"
          ],
          "examples": [
            "cluster"
          ],
          "type": "string"
        },
        "sync_rate": {
          "description": "How often to sync counter data to the central data store. A value of 0\nresults in synchronous behavior; a value of -1 ignores sync behavior\nentirely and only stores counters in node memory. A value greater than\n0 syncs the counters in that many number of seconds.",
          "examples": [
            -1
          ],
          "type": "number"
        },
        "window_size": {
          "description": "One or more window sizes to apply a limit to (defined in seconds).",
          "examples": [
            [
              30
            ]
          ],
          "items": {
            "required": [

            ],
            "type": "number"
          },
          "type": "array"
        },
        "window_type": {
          "default": "sliding",
          "description": "Sets the time window to either `sliding` or `fixed`.",
          "enum": [
            "fixed",
            "sliding"
          ],
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
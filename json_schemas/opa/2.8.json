{
  "properties": {
    "config": {
      "properties": {
        "include_consumer_in_opa_input": {
          "default": false,
          "description": "If set to true, the Kong Gateway Consumer object in use for the current request (if any) is included as input to OPA.",
          "type": "boolean"
        },
        "include_route_in_opa_input": {
          "default": false,
          "description": "If set to true, the Kong Gateway Route object in use for the current request is included as input to OPA.",
          "type": "boolean"
        },
        "include_service_in_opa_input": {
          "default": false,
          "description": "If set to true, the Kong Gateway Service object in use for the current request is included as input to OPA.",
          "type": "boolean"
        },
        "opa_host": {
          "default": "localhost",
          "description": "The DNS name or IP address of the OPA server.",
          "examples": [
            "localhost"
          ],
          "type": "string"
        },
        "opa_path": {
          "description": "The HTTP path to use when making a request to the OPA server. This is usually the path to the policy and rule to evaluate, prefixed with `/v1/data/`. For example,\nif you want to evaluate the `allow` rule inside `example.kong` package, then the path would be `/v1/data/example/kong/allowBoolean`.",
          "examples": [
            "/v1/data/example/kong/allowBoolean"
          ],
          "type": "string"
        },
        "opa_port": {
          "default": 8181,
          "description": "The port of the OPA server.",
          "examples": [
            8181
          ],
          "maximum": 65535,
          "minimum": 0,
          "type": "integer"
        },
        "opa_protocol": {
          "default": "http",
          "description": "The protocol to use when talking to Open Policy Agent (OPA) server. Allowed protocols are `http` and `https`.",
          "enum": [
            "http",
            "https"
          ],
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": [

        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
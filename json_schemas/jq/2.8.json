{
  "properties": {
    "config": {
      "properties": {
        "request_if_media_type": {
          "default": [
            "application/json"
          ],
          "description": "A list of media type strings. The media type included in the `Content-Type` request header **must**\nmatch one of the media types on this list for the program to run.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "request_jq_program": {
          "description": "The jq program to run on the request body. For example, `.[0] | { \"X-Foo\": .foo }`.\nEither `request_jq_program` or `response_jq_plugin` **must** be included in the configuration.",
          "examples": [
            ".[0]"
          ],
          "type": "string"
        },
        "request_jq_program_options": {
          "description": "Boolean option flags to modify the run behavior of the jq program run on the request body.\n- `compact_output`: Returns output in a compact form without additional spacing,\n  and with each JSON object on a single line. Defaults to `true`. Set to `false` for 'pretty' output.\n- `raw_output`: Outputs as raw strings, not JSON quoted. Default is `false`.\n- `join_output`: Similar to `raw_output` but does not output newline separators. Default is `false`.\n- `ascii_output`: jq usually outputs non-ASCII Unicode codepoints as UTF-8, even if the input specified\n   them as escape sequences (like `μ`). Using this option, you can force jq to produce pure ASCII\n   output, replacing every non-ASCII character with the equivalent escape sequence. Default is `false`.\n- `sort_keys`: Outputs the fields of each object with the keys in sorted order. Default is `false`.",
          "properties": {
            "ascii_output": {
              "default": false,
              "type": "boolean"
            },
            "compact_output": {
              "default": true,
              "type": "boolean"
            },
            "join_output": {
              "default": false,
              "type": "boolean"
            },
            "raw_output": {
              "default": false,
              "type": "boolean"
            },
            "sort_keys": {
              "default": false,
              "type": "boolean"
            }
          },
          "required": [

          ],
          "type": "object"
        },
        "response_if_media_type": {
          "default": [
            "application/json"
          ],
          "description": "A list of media type strings. The media type included in the `Content-Type` response header **must**\nmatch one of the media types on this list for the program to run.",
          "items": {
            "required": [

            ],
            "type": "string"
          },
          "type": "array"
        },
        "response_if_status_code": {
          "default": [
            200
          ],
          "description": "A list of HTTP response status codes. The response status code **must**\nmatch one of the response status codes on this list for the program to run.",
          "items": {
            "maximum": 599,
            "minimum": 100,
            "required": [

            ],
            "type": "integer"
          },
          "type": "array"
        },
        "response_jq_program": {
          "description": "The jq program to run on the response body. For example, `.[0] | { \"X-Foo\": .foo }`.\nEither `request_jq_program` or `response_jq_plugin` **must** be included in configuration.",
          "type": "string"
        },
        "response_jq_program_options": {
          "description": "Boolean option flags to modify the run behavior of the jq program run on the response body.\n- `compact_output`: Returns output in a compact form without additional spacing,\n  and with each JSON object on a single line. Defaults to `true`. Set to `false` for 'pretty' output.\n- `raw_output`: Outputs as raw strings, not JSON quoted. Default is `false`.\n- `join_output`: Similar to `raw_output` but does not output newline separators. Default is `false`.\n- `ascii_output`: jq usually outputs non-ASCII Unicode codepoints as UTF-8, even if the input specified\n   them as escape sequences (like `μ`). Using this option, you can force jq to produce pure ASCII\n   output, replacing every non-ASCII character with the equivalent escape sequence. Default is `false`.\n- `sort_keys`: Outputs the fields of each object with the keys in sorted order. Default is `false`.",
          "properties": {
            "ascii_output": {
              "default": false,
              "type": "boolean"
            },
            "compact_output": {
              "default": true,
              "type": "boolean"
            },
            "join_output": {
              "default": false,
              "type": "boolean"
            },
            "raw_output": {
              "default": false,
              "type": "boolean"
            },
            "sort_keys": {
              "default": false,
              "type": "boolean"
            }
          },
          "required": [

          ],
          "type": "object"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "consumer_group": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified consumer group has been authenticated. (Note that some plugins can not be restricted to consumers groups this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer Groups",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A list of the request protocols that will trigger this plugin. The default value, as well as the possible values allowed on this field, may change depending on the plugin type. For example, plugins that only work in stream mode will only support tcp and tls.",
      "items": {
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": [

        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "required": [

      ],
      "type": "object"
    }
  },
  "required": [

  ]
}
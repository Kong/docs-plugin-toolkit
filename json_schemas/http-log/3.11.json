{
  "properties": {
    "config": {
      "properties": {
        "content_type": {
          "default": "application/json",
          "description": "Indicates the type of data sent. The only available option is `application/json`.",
          "enum": [
            "application/json",
            "application/json; charset=utf-8"
          ],
          "type": "string"
        },
        "custom_fields_by_lua": {
          "additionalProperties": true,
          "description": "Lua code as a key-value map",
          "type": "object"
        },
        "flush_timeout": {
          "description": "Optional time in seconds. If `queue_size` > 1, this is the max idle time before sending a log with less than `queue_size` records.",
          "type": "number"
        },
        "headers": {
          "additionalProperties": true,
          "description": "An optional table of headers included in the HTTP message to the upstream server. Values are indexed by header name, and each header name accepts a single string. The values are [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "object"
        },
        "http_endpoint": {
          "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search.\nThis field is [encrypted](/gateway/keyring/).\nThis field is [referenceable](/gateway/entities/vault/#how-do-i-reference-secrets-stored-in-a-vault).",
          "type": "string"
        },
        "keepalive": {
          "default": 60000,
          "description": "An optional value in milliseconds that defines how long an idle connection will live before being closed.",
          "type": "number"
        },
        "method": {
          "default": "POST",
          "description": "An optional method used to send data to the HTTP server. Supported values are `POST` (default), `PUT`, and `PATCH`.",
          "enum": [
            "PATCH",
            "POST",
            "PUT"
          ],
          "type": "string"
        },
        "queue": {
          "properties": {
            "concurrency_limit": {
              "default": 1,
              "description": "The number of of queue delivery timers. -1 indicates unlimited.",
              "enum": [
                -1,
                1
              ],
              "type": "integer"
            },
            "initial_retry_delay": {
              "default": 0.01,
              "description": "Time in seconds before the initial retry is made for a failing batch.",
              "maximum": 1000000,
              "minimum": 0.001,
              "type": "number"
            },
            "max_batch_size": {
              "default": 1,
              "description": "Maximum number of entries that can be processed at a time.",
              "maximum": 1000000,
              "minimum": 1,
              "type": "integer"
            },
            "max_bytes": {
              "description": "Maximum number of bytes that can be waiting on a queue, requires string content.",
              "type": "integer"
            },
            "max_coalescing_delay": {
              "default": 1,
              "description": "Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.",
              "maximum": 3600,
              "minimum": 0,
              "type": "number"
            },
            "max_entries": {
              "default": 10000,
              "description": "Maximum number of entries that can be waiting on the queue.",
              "maximum": 1000000,
              "minimum": 1,
              "type": "integer"
            },
            "max_retry_delay": {
              "default": 60,
              "description": "Maximum time in seconds between retries, caps exponential backoff.",
              "maximum": 1000000,
              "minimum": 0.001,
              "type": "number"
            },
            "max_retry_time": {
              "default": 60,
              "description": "Time in seconds before the queue gives up calling a failed handler for a batch.",
              "type": "number"
            }
          },
          "type": "object"
        },
        "queue_size": {
          "description": "Maximum number of log entries to be sent on each message to the upstream server.",
          "type": "integer"
        },
        "retry_count": {
          "description": "Number of times to retry when sending data to the upstream server.",
          "type": "integer"
        },
        "timeout": {
          "default": 10000,
          "description": "An optional timeout in milliseconds when sending data to the upstream server.",
          "type": "number"
        }
      },
      "required": [
        "http_endpoint"
      ],
      "type": "object"
    },
    "consumer": {
      "additionalProperties": false,
      "description": "If set, the plugin will activate only for requests where the specified has been authenticated. (Note that some plugins can not be restricted to consumers this way.). Leave unset for the plugin to activate regardless of the authenticated Consumer.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "protocols": {
      "default": [
        "grpc",
        "grpcs",
        "http",
        "https"
      ],
      "description": "A set of strings representing protocols.",
      "items": {
        "description": "A string representing a protocol, such as HTTP or HTTPS.",
        "enum": [
          "grpc",
          "grpcs",
          "http",
          "https",
          "tcp",
          "tls",
          "tls_passthrough",
          "udp",
          "ws",
          "wss"
        ],
        "type": "string"
      },
      "type": "array"
    },
    "route": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via the specified route. Leave unset for the plugin to activate regardless of the route being used.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "service": {
      "additionalProperties": false,
      "description": "If set, the plugin will only activate when receiving requests via one of the routes belonging to the specified Service. Leave unset for the plugin to activate regardless of the Service being matched.",
      "properties": {
        "id": {
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "required": [
    "config"
  ]
}
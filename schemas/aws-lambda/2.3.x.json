{
  "fields": [
    {
      "protocols": {
        "type": "set",
        "required": true,
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ]
      }
    },
    {
      "config": {
        "type": "record",
        "required": true,
        "fields": [
          {
            "timeout": {
              "type": "number",
              "required": true,
              "default": 60000,
              "description": "An optional timeout in milliseconds when invoking the function."
            }
          },
          {
            "keepalive": {
              "type": "number",
              "required": true,
              "default": 60000,
              "description": "An optional value in milliseconds that defines how long an idle connection lives before being closed."
            }
          },
          {
            "aws_key": {
              "type": "string",
              "description": "The AWS key credential to be used when invoking the function. The `aws_key` value is required\nif `aws_secret` is defined. If `aws_key` and `aws_secret` are not set, the plugin uses an\nIAM role inherited from the instance running Kong to authenticate. Can be symmetrically encrypted\nif using Kong Gateway and [data encryption](/gateway/latest/kong-production/db-encryption/)\nis configured."
            }
          },
          {
            "aws_secret": {
              "type": "string",
              "description": "The AWS secret credential to be used when invoking the function. The `aws_secret` value is required\nif `aws_key` is defined. If `aws_key` and `aws_secret` are not set, the plugin uses an\nIAM role inherited from the instance running Kong to authenticate. Can be symmetrically encrypted\nif using Kong Gateway and [data encryption](/gateway/latest/kong-production/db-encryption/)\nis configured."
            }
          },
          {
            "aws_region": {
              "type": "string",
              "description": "The AWS region where the Lambda function is located. The plugin does not\nattempt to validate the supplied region name. If an invalid region name\nis provided, the plugin responds with an HTTP `500 Internal Server Error`\nat runtime and logs a DNS resolution failure. Either `aws_region` or `host`\nmust be provided."
            }
          },
          {
            "function_name": {
              "type": "string",
              "required": true,
              "description": "The AWS Lambda function name to invoke. This may contain\nthe function name only (`my-function`), the full ARN\n(arn:aws:lambda:us-west-2:123456789012:function:my-function) or a\npartial ARN (123456789012:function:my-function). You can also append a version\nnumber or alias to any of the formats."
            }
          },
          {
            "qualifier": {
              "type": "string",
              "description": "The [`Qualifier`](http://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) to use when invoking the function."
            }
          },
          {
            "invocation_type": {
              "type": "string",
              "required": true,
              "one_of": [
                "RequestResponse",
                "Event",
                "DryRun"
              ],
              "default": "RequestResponse",
              "description": "The [`InvocationType`](http://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_RequestSyntax) to use when invoking the function. Available types are `RequestResponse`, `Event`, `DryRun`."
            }
          },
          {
            "log_type": {
              "type": "string",
              "required": true,
              "one_of": [
                "Tail",
                "None"
              ],
              "default": "Tail"
            }
          },
          {
            "host": {
              "type": "string",
              "description": "The host where the Lambda function is located. This value can point to a\nlocal Lambda server, allowing for easier debugging.\n\nEither `aws_region` or `host` must be provided."
            }
          },
          {
            "port": {
              "type": "integer",
              "between": [
                0,
                65535
              ],
              "default": 443,
              "description": "The TCP port that the plugin uses to connect to the server."
            }
          },
          {
            "unhandled_status": {
              "type": "integer",
              "between": [
                100,
                999
              ],
              "description": "The response status code to use (instead of the default `200`, `202`, or `204`) in the case of an\n[`Unhandled` Function Error](https://docs.aws.amazon.com/lambda/latest/dg/API_Invoke.html#API_Invoke_ResponseSyntax)."
            }
          },
          {
            "forward_request_method": {
              "type": "boolean",
              "default": false,
              "description": "An optional value that defines whether the original HTTP request method verb is\nsent in the `request_method` field of the JSON-encoded request."
            }
          },
          {
            "forward_request_uri": {
              "type": "boolean",
              "default": false,
              "description": "An optional value that defines whether the original HTTP request URI is sent in\nthe `request_uri` field of the JSON-encoded request. Request URI arguments (if any) are sent in\nthe separate `request_uri_args` field of the JSON body."
            }
          },
          {
            "forward_request_headers": {
              "type": "boolean",
              "default": false,
              "description": "An optional value that defines whether the original HTTP request headers are\nsent as a map in the `request_headers` field of the JSON-encoded request."
            }
          },
          {
            "forward_request_body": {
              "type": "boolean",
              "default": false,
              "description": "An optional value that defines whether the request body is sent in the `request_body` field of the JSON-encoded request.\nIf the body arguments can be parsed, they are sent in the separate `request_body_args` field of the request.\nThe body arguments can be parsed for `application/json`, `application/x-www-form-urlencoded`, and `multipart/form-data` content types."
            }
          },
          {
            "is_proxy_integration": {
              "type": "boolean",
              "default": false,
              "description": "An optional value that defines whether the response format to receive from the Lambda to\n[this format](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-output-format)."
            }
          },
          {
            "awsgateway_compatible": {
              "type": "boolean",
              "default": false,
              "description": "An optional value that defines whether the plugin should wrap requests into the Amazon API gateway."
            }
          },
          {
            "proxy_scheme": {
              "type": "string",
              "one_of": [
                "http",
                "https"
              ],
              "description": "{:.important}\n> As of Kong Gateway 2.8.0.0, this parameter is deprecated.\n> <br><br>\n> If running Kong Gateway 2.7.x or earlier, the\n`proxy_scheme` value is required if `proxy_url` is defined. In 2.8.x or\nlater versions, `proxy_scheme` is not required.\n\nAn optional value that defines which HTTP scheme to use for connecting through the proxy server. The\nsupported schemes are `http` and `https`."
            }
          },
          {
            "proxy_url": {
              "type": "string",
              "description": "An optional value that defines whether the plugin should connect through\nthe given proxy server URL. Include the request scheme in the URL, which\nmust be `http`. For example: `http://my-proxy-server:3128`.\n\nKong Gateway uses HTTP tunneling via the [CONNECT HTTP](https://httpwg.org/specs/rfc7231.html#CONNECT)\nmethod so that no details of the AWS Lambda request are leaked to the proxy server."
            }
          },
          {
            "skip_large_bodies": {
              "type": "boolean",
              "default": true,
              "description": "An optional value that defines whether Kong should send large\nbodies that are buffered to disk. Note that enabling this option will have an impact\non system memory depending on the number of requests simultaneously in flight at any given point in time\nand on the maximum size of each request. Also this option blocks all requests being handled by the\nnginx workers. That could be tens of thousands of other transactions that are not being processed. For small I/O\noperations, such a delay would generally not be problematic. In cases where the body size is in the order of MB,\nsuch a delay would cause notable interruptions in request processing. Given all of the potential\ndownsides resulting from enabling this option, consider increasing the\n[client_body_buffer_size](http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size)\nvalue instead."
            }
          }
        ]
      }
    }
  ]
}
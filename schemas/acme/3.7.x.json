{
  "entity_checks": [
    {
      "conditional": {
        "if_match": {
          "one_of": [
            "https://acme-v02.api.letsencrypt.org",
            "https://acme-staging-v02.api.letsencrypt.org"
          ]
        },
        "then_field": "config.tos_accepted",
        "if_field": "config.api_uri",
        "then_err": "terms of service must be accepted, see https://letsencrypt.org/repository/",
        "then_match": {
          "eq": true
        }
      }
    },
    {
      "conditional": {
        "then_field": "config.storage_config.redis.host",
        "if_field": "config.storage",
        "then_match": {
          "required": true
        },
        "if_match": {
          "eq": "redis"
        }
      }
    },
    {
      "conditional": {
        "then_field": "config.storage_config.redis.port",
        "if_field": "config.storage",
        "then_match": {
          "required": true
        },
        "if_match": {
          "eq": "redis"
        }
      }
    },
    {
      "custom_entity_check": {
        "field_sources": [
          "config.storage"
        ]
      }
    }
  ],
  "fields": [
    {
      "consumer": {
        "type": "foreign",
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "reference": "consumers",
        "eq": null
      }
    },
    {
      "service": {
        "type": "foreign",
        "description": "A reference to the 'services' table with a null value allowed.",
        "reference": "services",
        "eq": null
      }
    },
    {
      "route": {
        "type": "foreign",
        "description": "A reference to the 'routes' table with a null value allowed.",
        "reference": "routes",
        "eq": null
      }
    },
    {
      "consumer_group": {
        "type": "foreign",
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "reference": "consumer_groups",
        "eq": null
      }
    },
    {
      "protocols": {
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "type": "set",
        "required": true,
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "description": "A set of strings representing HTTP protocols."
      }
    },
    {
      "config": {
        "required": true,
        "fields": [
          {
            "account_email": {
              "match": "%w*%p*@+%w*%.?%w*",
              "encrypted": true,
              "required": true,
              "description": "The account identifier. Can be reused in a different plugin instance.",
              "type": "string",
              "referenceable": true
            }
          },
          {
            "account_key": {
              "description": "The private key associated with the account.",
              "fields": [
                {
                  "key_id": {
                    "description": "The Key ID.",
                    "type": "string",
                    "required": true
                  }
                },
                {
                  "key_set": {
                    "type": "string",
                    "description": "The ID of the key set to associate the Key ID with."
                  }
                }
              ],
              "type": "record",
              "required": false
            }
          },
          {
            "api_uri": {
              "default": "https://acme-v02.api.letsencrypt.org/directory",
              "type": "string",
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
            }
          },
          {
            "tos_accepted": {
              "default": false,
              "type": "boolean",
              "description": "If you are using Let's Encrypt, you must set this to `true` to agree the terms of service."
            }
          },
          {
            "eab_kid": {
              "description": "External account binding (EAB) key id. You usually don't need to set this unless it is explicitly required by the CA.",
              "encrypted": true,
              "type": "string",
              "referenceable": true
            }
          },
          {
            "eab_hmac_key": {
              "description": "External account binding (EAB) base64-encoded URL string of the HMAC key. You usually don't need to set this unless it is explicitly required by the CA.",
              "encrypted": true,
              "type": "string",
              "referenceable": true
            }
          },
          {
            "cert_type": {
              "default": "rsa",
              "description": "The certificate type to create. The possible values are `'rsa'` for RSA certificate or `'ecc'` for EC certificate.",
              "type": "string",
              "one_of": [
                "rsa",
                "ecc"
              ]
            }
          },
          {
            "rsa_key_size": {
              "default": 4096,
              "description": "RSA private key size for the certificate. The possible values are 2048, 3072, or 4096.",
              "type": "number",
              "one_of": [
                2048,
                3072,
                4096
              ]
            }
          },
          {
            "renew_threshold_days": {
              "default": 14,
              "type": "number",
              "description": "Days remaining to renew the certificate before it expires."
            }
          },
          {
            "domains": {
              "description": "An array of strings representing hosts. A valid host is a string containing one or more labels separated by periods, with at most one wildcard label ('*')",
              "type": "array",
              "elements": {
                "match_all": [
                  {
                    "pattern": "^[^*]*%*?[^*]*$",
                    "err": "invalid wildcard: must have at most one wildcard"
                  }
                ],
                "type": "string",
                "match_any": {
                  "patterns": [
                    "^%*%.",
                    "%.%*$",
                    "^[^*]*$"
                  ],
                  "err": "invalid wildcard: must be placed at leftmost or rightmost label"
                }
              }
            }
          },
          {
            "allow_any_domain": {
              "default": false,
              "type": "boolean",
              "description": "If set to `true`, the plugin allows all domains and ignores any values in the `domains` list."
            }
          },
          {
            "fail_backoff_minutes": {
              "default": 5,
              "type": "number",
              "description": "Minutes to wait for each domain that fails to create a certificate. This applies to both a\nnew certificate and a renewal certificate."
            }
          },
          {
            "storage": {
              "default": "shm",
              "description": "The backend storage type to use. The possible values are `'kong'`, `'shm'`, `'redis'`, `'consul'`, or `'vault'`. In DB-less mode, `'kong'` storage is unavailable. Note that `'shm'` storage does not persist during Kong restarts and does not work for Kong running on different machines, so consider using one of `'kong'`, `'redis'`, `'consul'`, or `'vault'` in production. Please refer to the Hybrid Mode sections below as well.",
              "type": "string",
              "one_of": [
                "kong",
                "shm",
                "redis",
                "consul",
                "vault"
              ]
            }
          },
          {
            "storage_config": {
              "required": true,
              "fields": [
                {
                  "shm": {
                    "required": true,
                    "fields": [
                      {
                        "shm_name": {
                          "default": "kong",
                          "type": "string",
                          "description": "Name of shared memory zone used for Kong API gateway storage"
                        }
                      }
                    ],
                    "type": "record"
                  }
                },
                {
                  "kong": {
                    "required": true,
                    "fields": [

                    ],
                    "type": "record"
                  }
                },
                {
                  "redis": {
                    "required": true,
                    "fields": [
                      {
                        "host": {
                          "description": "A string representing a host name, such as example.com.",
                          "type": "string"
                        }
                      },
                      {
                        "port": {
                          "default": 6379,
                          "between": [
                            0,
                            65535
                          ],
                          "type": "integer",
                          "description": "An integer representing a port number between 0 and 65535, inclusive."
                        }
                      },
                      {
                        "timeout": {
                          "default": 2000,
                          "between": [
                            0,
                            2147483646
                          ],
                          "type": "integer",
                          "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2."
                        }
                      },
                      {
                        "username": {
                          "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "password": {
                          "type": "string",
                          "len_min": 0,
                          "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.",
                          "encrypted": true,
                          "referenceable": true
                        }
                      },
                      {
                        "database": {
                          "description": "Database to use for the Redis connection when using the `redis` strategy",
                          "type": "integer",
                          "default": 0
                        }
                      },
                      {
                        "ssl": {
                          "description": "If set to true, uses SSL to connect to Redis.",
                          "required": false,
                          "type": "boolean",
                          "default": false
                        }
                      },
                      {
                        "ssl_verify": {
                          "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.",
                          "required": false,
                          "type": "boolean",
                          "default": false
                        }
                      },
                      {
                        "server_name": {
                          "required": false,
                          "type": "string",
                          "description": "A string representing an SNI (server name indication) value for TLS."
                        }
                      },
                      {
                        "extra_options": {
                          "description": "Custom ACME Redis options",
                          "fields": [
                            {
                              "namespace": {
                                "default": "",
                                "type": "string",
                                "len_min": 0,
                                "required": true,
                                "description": "A namespace to prepend to all keys stored in Redis."
                              }
                            },
                            {
                              "scan_count": {
                                "default": 10,
                                "required": false,
                                "type": "number",
                                "description": "The number of keys to return in Redis SCAN calls."
                              }
                            }
                          ],
                          "type": "record",
                          "required": true
                        }
                      }
                    ],
                    "type": "record",
                    "shorthand_fields": [
                      {
                        "auth": {
                          "translate_backwards": [
                            "password"
                          ],
                          "type": "string",
                          "deprecation": {
                            "message": "acme: config.storage_config.redis.auth is deprecated, please use config.storage_config.redis.password instead",
                            "removal_in_version": "4.0"
                          },
                          "len_min": 0
                        }
                      },
                      {
                        "ssl_server_name": {
                          "translate_backwards": [
                            "server_name"
                          ],
                          "deprecation": {
                            "message": "acme: config.storage_config.redis.ssl_server_name is deprecated, please use config.storage_config.redis.server_name instead",
                            "removal_in_version": "4.0"
                          },
                          "type": "string"
                        }
                      },
                      {
                        "namespace": {
                          "translate_backwards": [
                            "extra_options",
                            "namespace"
                          ],
                          "type": "string",
                          "deprecation": {
                            "message": "acme: config.storage_config.redis.namespace is deprecated, please use config.storage_config.redis.extra_options.namespace instead",
                            "removal_in_version": "4.0"
                          },
                          "len_min": 0
                        }
                      },
                      {
                        "scan_count": {
                          "translate_backwards": [
                            "extra_options",
                            "scan_count"
                          ],
                          "deprecation": {
                            "message": "acme: config.storage_config.redis.scan_count is deprecated, please use config.storage_config.redis.extra_options.scan_count instead",
                            "removal_in_version": "4.0"
                          },
                          "type": "integer"
                        }
                      }
                    ]
                  }
                },
                {
                  "consul": {
                    "required": true,
                    "fields": [
                      {
                        "https": {
                          "default": false,
                          "type": "boolean",
                          "description": "Boolean representation of https."
                        }
                      },
                      {
                        "host": {
                          "description": "A string representing a host name, such as example.com.",
                          "type": "string"
                        }
                      },
                      {
                        "port": {
                          "between": [
                            0,
                            65535
                          ],
                          "type": "integer",
                          "description": "An integer representing a port number between 0 and 65535, inclusive."
                        }
                      },
                      {
                        "kv_path": {
                          "type": "string",
                          "description": "KV prefix path."
                        }
                      },
                      {
                        "timeout": {
                          "type": "number",
                          "description": "Timeout in milliseconds."
                        }
                      },
                      {
                        "token": {
                          "description": "Consul ACL token.",
                          "type": "string",
                          "referenceable": true
                        }
                      }
                    ],
                    "type": "record"
                  }
                },
                {
                  "vault": {
                    "required": true,
                    "fields": [
                      {
                        "https": {
                          "default": false,
                          "type": "boolean",
                          "description": "Boolean representation of https."
                        }
                      },
                      {
                        "host": {
                          "description": "A string representing a host name, such as example.com.",
                          "type": "string"
                        }
                      },
                      {
                        "port": {
                          "between": [
                            0,
                            65535
                          ],
                          "type": "integer",
                          "description": "An integer representing a port number between 0 and 65535, inclusive."
                        }
                      },
                      {
                        "kv_path": {
                          "type": "string",
                          "description": "KV prefix path."
                        }
                      },
                      {
                        "timeout": {
                          "type": "number",
                          "description": "Timeout in milliseconds."
                        }
                      },
                      {
                        "token": {
                          "description": "Consul ACL token.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "tls_verify": {
                          "default": true,
                          "type": "boolean",
                          "description": "Turn on TLS verification."
                        }
                      },
                      {
                        "tls_server_name": {
                          "type": "string",
                          "description": "SNI used in request, default to host if omitted."
                        }
                      },
                      {
                        "auth_method": {
                          "default": "token",
                          "description": "Auth Method, default to token, can be 'token' or 'kubernetes'.",
                          "type": "string",
                          "one_of": [
                            "token",
                            "kubernetes"
                          ]
                        }
                      },
                      {
                        "auth_path": {
                          "type": "string",
                          "description": "Vault's authentication path to use."
                        }
                      },
                      {
                        "auth_role": {
                          "type": "string",
                          "description": "The role to try and assign."
                        }
                      },
                      {
                        "jwt_path": {
                          "type": "string",
                          "description": "The path to the JWT."
                        }
                      }
                    ],
                    "type": "record"
                  }
                }
              ],
              "type": "record"
            }
          },
          {
            "preferred_chain": {
              "description": "A string value that specifies the preferred certificate chain to use when generating certificates.",
              "type": "string"
            }
          },
          {
            "enable_ipv4_common_name": {
              "default": true,
              "type": "boolean",
              "description": "A boolean value that controls whether to include the IPv4 address in the common name field of generated certificates."
            }
          }
        ],
        "type": "record"
      }
    }
  ]
}
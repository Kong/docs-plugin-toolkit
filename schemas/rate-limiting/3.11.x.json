{
  "entity_checks": [
    {
      "at_least_one_of": [
        "config.second",
        "config.minute",
        "config.hour",
        "config.day",
        "config.month",
        "config.year"
      ]
    },
    {
      "conditional": {
        "if_field": "config.policy",
        "then_match": {
          "required": true
        },
        "if_match": {
          "eq": "redis"
        },
        "then_field": "config.redis.host"
      }
    },
    {
      "conditional": {
        "if_field": "config.policy",
        "then_match": {
          "required": true
        },
        "if_match": {
          "eq": "redis"
        },
        "then_field": "config.redis.port"
      }
    },
    {
      "conditional": {
        "if_field": "config.policy",
        "then_match": {
          "required": true
        },
        "if_match": {
          "eq": "redis"
        },
        "then_field": "config.redis.timeout"
      }
    },
    {
      "conditional": {
        "if_field": "config.limit_by",
        "then_match": {
          "required": true
        },
        "if_match": {
          "eq": "header"
        },
        "then_field": "config.header_name"
      }
    },
    {
      "conditional": {
        "if_field": "config.limit_by",
        "then_match": {
          "required": true
        },
        "if_match": {
          "eq": "path"
        },
        "then_field": "config.path"
      }
    }
  ],
  "fields": [
    {
      "protocols": {
        "type": "set",
        "required": true,
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "description": "A set of strings representing HTTP protocols."
      }
    },
    {
      "config": {
        "required": true,
        "shorthand_fields": [
          {
            "redis_host": {
              "type": "string",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "host"
                    ]
                  }
                ],
                "removal_in_version": "4.0",
                "message": "rate-limiting: config.redis_host is deprecated, please use config.redis.host instead"
              }
            }
          },
          {
            "redis_port": {
              "type": "integer",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "port"
                    ]
                  }
                ],
                "removal_in_version": "4.0",
                "message": "rate-limiting: config.redis_port is deprecated, please use config.redis.port instead"
              }
            }
          },
          {
            "redis_password": {
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "password"
                    ]
                  }
                ],
                "removal_in_version": "4.0",
                "message": "rate-limiting: config.redis_password is deprecated, please use config.redis.password instead"
              },
              "len_min": 0,
              "type": "string"
            }
          },
          {
            "redis_username": {
              "type": "string",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "username"
                    ]
                  }
                ],
                "removal_in_version": "4.0",
                "message": "rate-limiting: config.redis_username is deprecated, please use config.redis.username instead"
              }
            }
          },
          {
            "redis_ssl": {
              "type": "boolean",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "ssl"
                    ]
                  }
                ],
                "removal_in_version": "4.0",
                "message": "rate-limiting: config.redis_ssl is deprecated, please use config.redis.ssl instead"
              }
            }
          },
          {
            "redis_ssl_verify": {
              "type": "boolean",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "ssl_verify"
                    ]
                  }
                ],
                "removal_in_version": "4.0",
                "message": "rate-limiting: config.redis_ssl_verify is deprecated, please use config.redis.ssl_verify instead"
              }
            }
          },
          {
            "redis_server_name": {
              "type": "string",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "server_name"
                    ]
                  }
                ],
                "removal_in_version": "4.0",
                "message": "rate-limiting: config.redis_server_name is deprecated, please use config.redis.server_name instead"
              }
            }
          },
          {
            "redis_timeout": {
              "type": "integer",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "timeout"
                    ]
                  }
                ],
                "removal_in_version": "4.0",
                "message": "rate-limiting: config.redis_timeout is deprecated, please use config.redis.timeout instead"
              }
            }
          },
          {
            "redis_database": {
              "type": "integer",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "database"
                    ]
                  }
                ],
                "removal_in_version": "4.0",
                "message": "rate-limiting: config.redis_database is deprecated, please use config.redis.database instead"
              }
            }
          }
        ],
        "fields": [
          {
            "second": {
              "description": "The number of HTTP requests that can be made per second.",
              "gt": 0,
              "type": "number"
            }
          },
          {
            "minute": {
              "description": "The number of HTTP requests that can be made per minute.",
              "gt": 0,
              "type": "number"
            }
          },
          {
            "hour": {
              "description": "The number of HTTP requests that can be made per hour.",
              "gt": 0,
              "type": "number"
            }
          },
          {
            "day": {
              "description": "The number of HTTP requests that can be made per day.",
              "gt": 0,
              "type": "number"
            }
          },
          {
            "month": {
              "description": "The number of HTTP requests that can be made per month.",
              "gt": 0,
              "type": "number"
            }
          },
          {
            "year": {
              "description": "The number of HTTP requests that can be made per year.",
              "gt": 0,
              "type": "number"
            }
          },
          {
            "limit_by": {
              "type": "string",
              "default": "consumer",
              "description": "The entity that is used when aggregating the limits.",
              "one_of": [
                "consumer",
                "credential",
                "ip",
                "service",
                "header",
                "path",
                "consumer-group"
              ]
            }
          },
          {
            "header_name": {
              "type": "string",
              "description": "A string representing an HTTP header name."
            }
          },
          {
            "path": {
              "match_none": [
                {
                  "err": "must not have empty segments",
                  "pattern": "//"
                }
              ],
              "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).",
              "starts_with": "/",
              "type": "string"
            }
          },
          {
            "policy": {
              "type": "string",
              "description": "The rate-limiting policies to use for retrieving and incrementing the limits.",
              "default": "local",
              "len_min": 0,
              "one_of": [
                "local",
                "cluster",
                "redis"
              ]
            }
          },
          {
            "fault_tolerant": {
              "required": true,
              "default": true,
              "description": "A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party data store. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the data store is working again. If `false`, then the clients will see `500` errors.",
              "type": "boolean"
            }
          },
          {
            "redis": {
              "required": true,
              "description": "Redis configuration",
              "fields": [
                {
                  "host": {
                    "type": "string",
                    "description": "A string representing a host name, such as example.com."
                  }
                },
                {
                  "port": {
                    "default": 6379,
                    "description": "An integer representing a port number between 0 and 65535, inclusive.",
                    "between": [
                      0,
                      65535
                    ],
                    "type": "integer"
                  }
                },
                {
                  "timeout": {
                    "default": 2000,
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                    "between": [
                      0,
                      2147483646
                    ],
                    "type": "integer"
                  }
                },
                {
                  "username": {
                    "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.",
                    "type": "string",
                    "referenceable": true
                  }
                },
                {
                  "password": {
                    "encrypted": true,
                    "type": "string",
                    "len_min": 0,
                    "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.",
                    "referenceable": true
                  }
                },
                {
                  "database": {
                    "default": 0,
                    "description": "Database to use for the Redis connection when using the `redis` strategy",
                    "type": "integer"
                  }
                },
                {
                  "ssl": {
                    "required": false,
                    "description": "If set to true, uses SSL to connect to Redis.",
                    "default": false,
                    "type": "boolean"
                  }
                },
                {
                  "ssl_verify": {
                    "required": false,
                    "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.",
                    "default": false,
                    "type": "boolean"
                  }
                },
                {
                  "server_name": {
                    "required": false,
                    "description": "A string representing an SNI (server name indication) value for TLS.",
                    "type": "string"
                  }
                }
              ],
              "type": "record"
            }
          },
          {
            "hide_client_headers": {
              "required": true,
              "default": false,
              "description": "Optionally hide informative response headers.",
              "type": "boolean"
            }
          },
          {
            "error_code": {
              "description": "Set a custom error code to return when the rate limit is exceeded.",
              "default": 429,
              "gt": 0,
              "type": "number"
            }
          },
          {
            "error_message": {
              "description": "Set a custom error message to return when the rate limit is exceeded.",
              "default": "API rate limit exceeded",
              "type": "string"
            }
          },
          {
            "sync_rate": {
              "required": true,
              "default": -1,
              "description": "How often to sync counter data to the central data store. A value of -1 results in synchronous behavior.",
              "type": "number"
            }
          }
        ],
        "type": "record"
      }
    }
  ],
  "supported_partials": {
    "redis-ce": [
      "config.redis"
    ]
  }
}
{
  "entity_checks": [
    {
      "custom_entity_check": {
        "field_sources": [
          "config.targets",
          "config.balancer"
        ]
      }
    },
    {
      "custom_entity_check": {
        "field_sources": [
          "config.targets",
          "config.balancer"
        ]
      }
    },
    {
      "custom_entity_check": {
        "field_sources": [
          "config.targets",
          "config.llm_format"
        ]
      }
    },
    {
      "custom_entity_check": {
        "field_sources": [
          "config.genai_category",
          "config.targets"
        ]
      }
    },
    {
      "custom_entity_check": {
        "field_sources": [
          "config.model_name_header",
          "config.targets"
        ]
      }
    }
  ],
  "fields": [
    {
      "protocols": {
        "required": true,
        "type": "set",
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https",
          "ws",
          "wss"
        ],
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https",
            "ws",
            "wss"
          ]
        }
      }
    },
    {
      "config": {
        "required": true,
        "type": "record",
        "fields": [
          {
            "balancer": {
              "required": true,
              "type": "record",
              "fields": [
                {
                  "algorithm": {
                    "type": "string",
                    "description": "Which load balancing algorithm to use.",
                    "default": "round-robin",
                    "one_of": [
                      "round-robin",
                      "lowest-latency",
                      "lowest-usage",
                      "consistent-hashing",
                      "semantic",
                      "priority"
                    ]
                  }
                },
                {
                  "tokens_count_strategy": {
                    "type": "string",
                    "description": "What tokens to use for usage calculation. Available values are: `total_tokens` `prompt_tokens`, `completion_tokens` and `cost`.",
                    "default": "total-tokens",
                    "one_of": [
                      "total-tokens",
                      "prompt-tokens",
                      "completion-tokens",
                      "cost"
                    ]
                  }
                },
                {
                  "latency_strategy": {
                    "type": "string",
                    "description": "What metrics to use for latency. Available values are: `tpot` (time-per-output-token) and `e2e`.",
                    "default": "tpot",
                    "one_of": [
                      "tpot",
                      "e2e"
                    ]
                  }
                },
                {
                  "hash_on_header": {
                    "description": "The header to use for consistent-hashing.",
                    "type": "string",
                    "default": "X-Kong-LLM-Request-ID"
                  }
                },
                {
                  "slots": {
                    "between": [
                      10,
                      65536
                    ],
                    "description": "The number of slots in the load balancer algorithm.",
                    "default": 10000,
                    "type": "integer"
                  }
                },
                {
                  "retries": {
                    "between": [
                      0,
                      32767
                    ],
                    "description": "The number of retries to execute upon failure to proxy.",
                    "default": 5,
                    "type": "integer"
                  }
                },
                {
                  "connect_timeout": {
                    "type": "integer",
                    "between": [
                      1,
                      2147483646
                    ],
                    "default": 60000
                  }
                },
                {
                  "write_timeout": {
                    "type": "integer",
                    "between": [
                      1,
                      2147483646
                    ],
                    "default": 60000
                  }
                },
                {
                  "read_timeout": {
                    "type": "integer",
                    "between": [
                      1,
                      2147483646
                    ],
                    "default": 60000
                  }
                },
                {
                  "failover_criteria": {
                    "type": "array",
                    "description": "Specifies in which cases an upstream response should be failover to the next target. Each option in the array is equivalent to the function of http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_next_upstream",
                    "default": [
                      "error",
                      "timeout"
                    ],
                    "elements": {
                      "type": "string",
                      "one_of": [
                        "error",
                        "timeout",
                        "invalid_header",
                        "http_500",
                        "http_502",
                        "http_503",
                        "http_504",
                        "http_403",
                        "http_404",
                        "http_429",
                        "non_idempotent"
                      ]
                    }
                  }
                }
              ]
            }
          },
          {
            "embeddings": {
              "required": false,
              "entity_checks": [
                {
                  "conditional_at_least_one_of": {
                    "then_at_least_one_of": [
                      "model.options.azure.instance"
                    ],
                    "if_match": {
                      "one_of": [
                        "azure"
                      ]
                    },
                    "then_err": "must set %s for azure provider",
                    "if_field": "model.provider"
                  }
                },
                {
                  "conditional_at_least_one_of": {
                    "then_at_least_one_of": [
                      "model.options.azure.api_version"
                    ],
                    "if_match": {
                      "one_of": [
                        "azure"
                      ]
                    },
                    "then_err": "must set %s for azure provider",
                    "if_field": "model.provider"
                  }
                },
                {
                  "conditional_at_least_one_of": {
                    "then_at_least_one_of": [
                      "model.options.azure.deployment_id"
                    ],
                    "if_match": {
                      "one_of": [
                        "azure"
                      ]
                    },
                    "then_err": "must set %s for azure provider",
                    "if_field": "model.provider"
                  }
                }
              ],
              "type": "record",
              "fields": [
                {
                  "auth": {
                    "required": false,
                    "type": "record",
                    "fields": [
                      {
                        "header_name": {
                          "required": false,
                          "description": "If AI model requires authentication via Authorization or API key header, specify its name here.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "header_value": {
                          "type": "string",
                          "referenceable": true,
                          "required": false,
                          "description": "Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.",
                          "encrypted": true
                        }
                      },
                      {
                        "param_name": {
                          "required": false,
                          "description": "If AI model requires authentication via query parameter, specify its name here.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "param_value": {
                          "type": "string",
                          "referenceable": true,
                          "required": false,
                          "description": "Specify the full parameter value for 'param_name'.",
                          "encrypted": true
                        }
                      },
                      {
                        "param_location": {
                          "required": false,
                          "description": "Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.",
                          "type": "string",
                          "one_of": [
                            "query",
                            "body"
                          ]
                        }
                      },
                      {
                        "azure_use_managed_identity": {
                          "required": false,
                          "description": "Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.",
                          "type": "boolean",
                          "default": false
                        }
                      },
                      {
                        "azure_client_id": {
                          "required": false,
                          "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "azure_client_secret": {
                          "type": "string",
                          "referenceable": true,
                          "required": false,
                          "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.",
                          "encrypted": true
                        }
                      },
                      {
                        "azure_tenant_id": {
                          "required": false,
                          "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "gcp_use_service_account": {
                          "required": false,
                          "description": "Use service account auth for GCP-based providers and models.",
                          "type": "boolean",
                          "default": false
                        }
                      },
                      {
                        "gcp_service_account_json": {
                          "type": "string",
                          "referenceable": true,
                          "required": false,
                          "description": "Set this field to the full JSON of the GCP service account to authenticate, if required. If null (and gcp_use_service_account is true), Kong will attempt to read from environment variable `GCP_SERVICE_ACCOUNT`.",
                          "encrypted": true
                        }
                      },
                      {
                        "aws_access_key_id": {
                          "type": "string",
                          "referenceable": true,
                          "required": false,
                          "description": "Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_ACCESS_KEY_ID environment variable for this plugin instance.",
                          "encrypted": true
                        }
                      },
                      {
                        "aws_secret_access_key": {
                          "type": "string",
                          "referenceable": true,
                          "required": false,
                          "description": "Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_SECRET_ACCESS_KEY environment variable for this plugin instance.",
                          "encrypted": true
                        }
                      },
                      {
                        "allow_override": {
                          "required": false,
                          "description": "If enabled, the authorization header or parameter can be overridden in the request by the value configured in the plugin.",
                          "type": "boolean",
                          "default": false
                        }
                      }
                    ]
                  }
                },
                {
                  "model": {
                    "required": true,
                    "type": "record",
                    "fields": [
                      {
                        "provider": {
                          "required": true,
                          "description": "AI provider format to use for embeddings API",
                          "type": "string",
                          "one_of": [
                            "openai",
                            "mistral",
                            "huggingface",
                            "azure",
                            "bedrock",
                            "gemini"
                          ]
                        }
                      },
                      {
                        "name": {
                          "required": true,
                          "description": "Model name to execute.",
                          "type": "string"
                        }
                      },
                      {
                        "options": {
                          "required": false,
                          "description": "Key/value settings for the model",
                          "type": "record",
                          "fields": [
                            {
                              "upstream_url": {
                                "required": false,
                                "description": "upstream url for the embeddings",
                                "type": "string"
                              }
                            },
                            {
                              "azure": {
                                "required": true,
                                "type": "record",
                                "fields": [
                                  {
                                    "instance": {
                                      "required": false,
                                      "description": "Instance name for Azure OpenAI hosted models.",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "api_version": {
                                      "required": false,
                                      "description": "'api-version' for Azure OpenAI instances.",
                                      "type": "string",
                                      "default": "2023-05-15"
                                    }
                                  },
                                  {
                                    "deployment_id": {
                                      "required": false,
                                      "description": "Deployment ID for Azure OpenAI instances.",
                                      "type": "string"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "bedrock": {
                                "required": false,
                                "entity_checks": [
                                  {
                                    "mutually_required": [
                                      "aws_assume_role_arn",
                                      "aws_role_session_name"
                                    ]
                                  }
                                ],
                                "type": "record",
                                "fields": [
                                  {
                                    "aws_region": {
                                      "required": false,
                                      "description": "If using AWS providers (Bedrock) you can override the `AWS_REGION` environment variable by setting this option.",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "aws_assume_role_arn": {
                                      "required": false,
                                      "description": "If using AWS providers (Bedrock) you can assume a different role after authentication with the current IAM context is successful.",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "aws_role_session_name": {
                                      "type": "string",
                                      "description": "If using AWS providers (Bedrock), set the identifier of the assumed role session."
                                    }
                                  },
                                  {
                                    "aws_sts_endpoint_url": {
                                      "type": "string",
                                      "description": "If using AWS providers (Bedrock), override the STS endpoint URL when assuming a different role."
                                    }
                                  },
                                  {
                                    "embeddings_normalize": {
                                      "description": "If using AWS providers (Bedrock), set to true to normalize the embeddings.",
                                      "type": "boolean",
                                      "default": false
                                    }
                                  },
                                  {
                                    "performance_config_latency": {
                                      "required": false,
                                      "description": "Force the client's performance configuration 'latency' for all requests. Leave empty to let the consumer select the performance configuration.",
                                      "type": "string"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "gemini": {
                                "required": false,
                                "entity_checks": [
                                  {
                                    "mutually_required": [
                                      "api_endpoint",
                                      "project_id",
                                      "location_id"
                                    ]
                                  }
                                ],
                                "type": "record",
                                "fields": [
                                  {
                                    "api_endpoint": {
                                      "required": false,
                                      "description": "If running Gemini on Vertex, specify the regional API endpoint (hostname only).",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "project_id": {
                                      "required": false,
                                      "description": "If running Gemini on Vertex, specify the project ID.",
                                      "type": "string"
                                    }
                                  },
                                  {
                                    "location_id": {
                                      "required": false,
                                      "description": "If running Gemini on Vertex, specify the location ID.",
                                      "type": "string"
                                    }
                                  }
                                ]
                              }
                            },
                            {
                              "huggingface": {
                                "required": false,
                                "type": "record",
                                "fields": [
                                  {
                                    "use_cache": {
                                      "required": false,
                                      "description": "Use the cache layer on the inference API",
                                      "type": "boolean"
                                    }
                                  },
                                  {
                                    "wait_for_model": {
                                      "required": false,
                                      "description": "Wait for the model if it is not ready",
                                      "type": "boolean"
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "vectordb": {
              "required": false,
              "type": "record",
              "fields": [
                {
                  "strategy": {
                    "required": true,
                    "description": "which vector database driver to use",
                    "type": "string",
                    "one_of": [
                      "redis",
                      "pgvector"
                    ]
                  }
                },
                {
                  "dimensions": {
                    "required": true,
                    "description": "the desired dimensionality for the vectors",
                    "type": "integer"
                  }
                },
                {
                  "threshold": {
                    "required": true,
                    "description": "the default similarity threshold for accepting semantic search results (float)",
                    "type": "number"
                  }
                },
                {
                  "distance_metric": {
                    "required": true,
                    "description": "the distance metric to use for vector searches",
                    "type": "string",
                    "one_of": [
                      "cosine",
                      "euclidean"
                    ]
                  }
                },
                {
                  "redis": {
                    "shorthand_fields": [
                      {
                        "timeout": {
                          "type": "integer",
                          "deprecation": {
                            "removal_in_version": "4.0",
                            "replaced_with": [
                              {
                                "path": [
                                  "connect_timeout"
                                ]
                              },
                              {
                                "path": [
                                  "send_timeout"
                                ]
                              },
                              {
                                "path": [
                                  "read_timeout"
                                ]
                              }
                            ],
                            "message": "redis schema field `timeout` is deprecated, use `connect_timeout`, `send_timeout` and `read_timeout`"
                          }
                        }
                      },
                      {
                        "sentinel_addresses": {
                          "deprecation": {
                            "removal_in_version": "4.0",
                            "replaced_with": [
                              {
                                "path": [
                                  "sentinel_nodes"
                                ]
                              }
                            ],
                            "message": "sentinel_addresses is deprecated, please use sentinel_nodes instead"
                          },
                          "len_min": 1,
                          "type": "array",
                          "elements": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "cluster_addresses": {
                          "deprecation": {
                            "removal_in_version": "4.0",
                            "replaced_with": [
                              {
                                "path": [
                                  "cluster_nodes"
                                ]
                              }
                            ],
                            "message": "cluster_addresses is deprecated, please use cluster_nodes instead"
                          },
                          "len_min": 1,
                          "type": "array",
                          "elements": {
                            "type": "string"
                          }
                        }
                      }
                    ],
                    "entity_checks": [
                      {
                        "mutually_required": [
                          "host",
                          "port"
                        ]
                      },
                      {
                        "mutually_required": [
                          "sentinel_master",
                          "sentinel_role",
                          "sentinel_nodes"
                        ]
                      },
                      {
                        "mutually_required": [
                          "connect_timeout",
                          "send_timeout",
                          "read_timeout"
                        ]
                      },
                      {
                        "conditional": {
                          "then_match": {
                            "required": true
                          },
                          "if_match": {
                            "eq": true
                          },
                          "then_field": "host",
                          "if_field": "connection_is_proxied"
                        }
                      },
                      {
                        "custom_entity_check": {
                          "field_sources": [
                            "database",
                            "connection_is_proxied"
                          ],
                          "run_with_missing_fields": true
                        }
                      },
                      {
                        "custom_entity_check": {
                          "field_sources": [
                            "cluster_nodes",
                            "connection_is_proxied"
                          ],
                          "run_with_missing_fields": true
                        }
                      },
                      {
                        "custom_entity_check": {
                          "field_sources": [
                            "sentinel_role",
                            "connection_is_proxied"
                          ],
                          "run_with_missing_fields": true
                        }
                      }
                    ],
                    "fields": [
                      {
                        "host": {
                          "description": "A string representing a host name, such as example.com.",
                          "default": "127.0.0.1",
                          "type": "string"
                        }
                      },
                      {
                        "port": {
                          "default": 6379,
                          "description": "An integer representing a port number between 0 and 65535, inclusive.",
                          "type": "integer",
                          "between": [
                            0,
                            65535
                          ]
                        }
                      },
                      {
                        "connect_timeout": {
                          "default": 2000,
                          "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                          "type": "integer",
                          "between": [
                            0,
                            2147483646
                          ]
                        }
                      },
                      {
                        "send_timeout": {
                          "default": 2000,
                          "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                          "type": "integer",
                          "between": [
                            0,
                            2147483646
                          ]
                        }
                      },
                      {
                        "read_timeout": {
                          "default": 2000,
                          "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                          "type": "integer",
                          "between": [
                            0,
                            2147483646
                          ]
                        }
                      },
                      {
                        "username": {
                          "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "password": {
                          "referenceable": true,
                          "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.",
                          "type": "string",
                          "encrypted": true
                        }
                      },
                      {
                        "sentinel_username": {
                          "description": "Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "sentinel_password": {
                          "referenceable": true,
                          "description": "Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.",
                          "type": "string",
                          "encrypted": true
                        }
                      },
                      {
                        "database": {
                          "description": "Database to use for the Redis connection when using the `redis` strategy",
                          "default": 0,
                          "type": "integer"
                        }
                      },
                      {
                        "keepalive_pool_size": {
                          "default": 256,
                          "description": "The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.",
                          "type": "integer",
                          "between": [
                            1,
                            2147483646
                          ]
                        }
                      },
                      {
                        "keepalive_backlog": {
                          "description": "Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.",
                          "type": "integer",
                          "between": [
                            0,
                            2147483646
                          ]
                        }
                      },
                      {
                        "sentinel_master": {
                          "type": "string",
                          "description": "Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel."
                        }
                      },
                      {
                        "sentinel_role": {
                          "description": "Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.",
                          "type": "string",
                          "one_of": [
                            "master",
                            "slave",
                            "any"
                          ]
                        }
                      },
                      {
                        "sentinel_nodes": {
                          "len_min": 1,
                          "type": "array",
                          "elements": {
                            "type": "record",
                            "fields": [
                              {
                                "host": {
                                  "required": true,
                                  "description": "A string representing a host name, such as example.com.",
                                  "type": "string",
                                  "default": "127.0.0.1"
                                }
                              },
                              {
                                "port": {
                                  "default": 6379,
                                  "description": "An integer representing a port number between 0 and 65535, inclusive.",
                                  "type": "integer",
                                  "between": [
                                    0,
                                    65535
                                  ]
                                }
                              }
                            ]
                          },
                          "required": false,
                          "description": "Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element."
                        }
                      },
                      {
                        "cluster_nodes": {
                          "len_min": 1,
                          "type": "array",
                          "elements": {
                            "type": "record",
                            "fields": [
                              {
                                "ip": {
                                  "required": true,
                                  "description": "A string representing a host name, such as example.com.",
                                  "type": "string",
                                  "default": "127.0.0.1"
                                }
                              },
                              {
                                "port": {
                                  "default": 6379,
                                  "description": "An integer representing a port number between 0 and 65535, inclusive.",
                                  "type": "integer",
                                  "between": [
                                    0,
                                    65535
                                  ]
                                }
                              }
                            ]
                          },
                          "required": false,
                          "description": "Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element."
                        }
                      },
                      {
                        "ssl": {
                          "required": false,
                          "description": "If set to true, uses SSL to connect to Redis.",
                          "default": false,
                          "type": "boolean"
                        }
                      },
                      {
                        "ssl_verify": {
                          "required": false,
                          "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.",
                          "default": false,
                          "type": "boolean"
                        }
                      },
                      {
                        "server_name": {
                          "required": false,
                          "description": "A string representing an SNI (server name indication) value for TLS.",
                          "type": "string"
                        }
                      },
                      {
                        "cluster_max_redirections": {
                          "required": false,
                          "description": "Maximum retry attempts for redirection.",
                          "default": 5,
                          "type": "integer"
                        }
                      },
                      {
                        "connection_is_proxied": {
                          "required": false,
                          "description": "If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.",
                          "default": false,
                          "type": "boolean"
                        }
                      }
                    ],
                    "required": true,
                    "type": "record"
                  }
                },
                {
                  "pgvector": {
                    "required": true,
                    "type": "record",
                    "fields": [
                      {
                        "host": {
                          "description": "the host of the pgvector database",
                          "type": "string",
                          "default": "127.0.0.1"
                        }
                      },
                      {
                        "port": {
                          "description": "the port of the pgvector database",
                          "type": "integer",
                          "default": 5432
                        }
                      },
                      {
                        "user": {
                          "default": "postgres",
                          "description": "the user of the pgvector database",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "password": {
                          "referenceable": true,
                          "description": "the password of the pgvector database",
                          "type": "string",
                          "encrypted": true
                        }
                      },
                      {
                        "database": {
                          "description": "the database of the pgvector database",
                          "type": "string",
                          "default": "kong-pgvector"
                        }
                      },
                      {
                        "timeout": {
                          "description": "the timeout of the pgvector database",
                          "type": "number",
                          "default": 5000
                        }
                      },
                      {
                        "ssl": {
                          "description": "whether to use ssl for the pgvector database",
                          "type": "boolean",
                          "default": false
                        }
                      },
                      {
                        "ssl_required": {
                          "description": "whether ssl is required for the pgvector database",
                          "type": "boolean",
                          "default": false
                        }
                      },
                      {
                        "ssl_verify": {
                          "description": "whether to verify ssl for the pgvector database",
                          "type": "boolean",
                          "default": false
                        }
                      },
                      {
                        "ssl_version": {
                          "default": "tlsv1_2",
                          "description": "the ssl version to use for the pgvector database",
                          "type": "string",
                          "one_of": [
                            "tlsv1_2",
                            "tlsv1_3",
                            "any"
                          ]
                        }
                      },
                      {
                        "ssl_cert": {
                          "type": "string",
                          "description": "the path of ssl cert to use for the pgvector database"
                        }
                      },
                      {
                        "ssl_cert_key": {
                          "type": "string",
                          "description": "the path of ssl cert key to use for the pgvector database"
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "response_streaming": {
              "type": "string",
              "required": false,
              "description": "Whether to 'optionally allow', 'deny', or 'always' (force) the streaming of answers via server sent events.",
              "default": "allow",
              "one_of": [
                "allow",
                "deny",
                "always"
              ]
            }
          },
          {
            "max_request_body_size": {
              "gt": 0,
              "description": "max allowed body size allowed to be introspected. 0 means unlimited, but the size of this body will still be limited by Nginx's client_max_body_size.",
              "default": 8192,
              "type": "integer"
            }
          },
          {
            "model_name_header": {
              "description": "Display the model name selected in the X-Kong-LLM-Model response header",
              "type": "boolean",
              "default": true
            }
          },
          {
            "targets": {
              "required": true,
              "type": "array",
              "elements": {
                "required": true,
                "entity_checks": [
                  {
                    "conditional": {
                      "if_match": {
                        "one_of": [
                          "bedrock",
                          "gemini"
                        ]
                      },
                      "then_field": "auth.allow_override",
                      "if_field": "model.provider",
                      "then_match": {
                        "eq": false
                      },
                      "then_err": "bedrock and gemini only support auth.allow_override = false"
                    }
                  },
                  {
                    "mutually_required": [
                      "auth.header_name",
                      "auth.header_value"
                    ]
                  },
                  {
                    "mutually_required": [
                      "auth.param_name",
                      "auth.param_value",
                      "auth.param_location"
                    ]
                  },
                  {
                    "conditional_at_least_one_of": {
                      "then_at_least_one_of": [
                        "model.options.llama2_format"
                      ],
                      "if_match": {
                        "one_of": [
                          "llama2"
                        ]
                      },
                      "then_err": "must set %s for llama2 provider",
                      "if_field": "model.provider"
                    }
                  },
                  {
                    "conditional_at_least_one_of": {
                      "then_at_least_one_of": [
                        "model.options.mistral_format"
                      ],
                      "if_match": {
                        "one_of": [
                          "mistral"
                        ]
                      },
                      "then_err": "must set %s for mistral provider",
                      "if_field": "model.provider"
                    }
                  },
                  {
                    "conditional_at_least_one_of": {
                      "then_at_least_one_of": [
                        "model.options.anthropic_version"
                      ],
                      "if_match": {
                        "one_of": [
                          "anthropic"
                        ]
                      },
                      "then_err": "must set %s for anthropic provider",
                      "if_field": "model.provider"
                    }
                  },
                  {
                    "conditional_at_least_one_of": {
                      "then_at_least_one_of": [
                        "model.options.azure_instance"
                      ],
                      "if_match": {
                        "one_of": [
                          "azure"
                        ]
                      },
                      "then_err": "must set %s for azure provider",
                      "if_field": "model.provider"
                    }
                  },
                  {
                    "conditional_at_least_one_of": {
                      "then_at_least_one_of": [
                        "model.options.azure_api_version"
                      ],
                      "if_match": {
                        "one_of": [
                          "azure"
                        ]
                      },
                      "then_err": "must set %s for azure provider",
                      "if_field": "model.provider"
                    }
                  },
                  {
                    "conditional_at_least_one_of": {
                      "then_at_least_one_of": [
                        "model.options.azure_deployment_id"
                      ],
                      "if_match": {
                        "one_of": [
                          "azure"
                        ]
                      },
                      "then_err": "must set %s for azure provider",
                      "if_field": "model.provider"
                    }
                  },
                  {
                    "conditional_at_least_one_of": {
                      "then_at_least_one_of": [
                        "model.options.upstream_url"
                      ],
                      "if_match": {
                        "one_of": [
                          "llama2"
                        ]
                      },
                      "then_err": "must set %s for self-hosted providers/models",
                      "if_field": "model.provider"
                    }
                  },
                  {
                    "custom_entity_check": {
                      "field_sources": [
                        "route_type",
                        "model",
                        "logging"
                      ]
                    }
                  },
                  {
                    "custom_entity_check": {
                      "field_sources": [
                        "route_type"
                      ]
                    }
                  },
                  {
                    "custom_entity_check": {
                      "field_sources": [
                        "route_type",
                        "model"
                      ]
                    }
                  },
                  {
                    "custom_entity_check": {
                      "field_sources": [
                        "route_type",
                        "model"
                      ]
                    }
                  }
                ],
                "type": "record",
                "fields": [
                  {
                    "route_type": {
                      "required": true,
                      "description": "The model's operation implementation, for this provider. ",
                      "type": "string",
                      "one_of": [
                        "llm/v1/chat",
                        "llm/v1/completions",
                        "llm/v1/embeddings",
                        "llm/v1/responses",
                        "llm/v1/assistants",
                        "llm/v1/batches",
                        "llm/v1/files",
                        "image/v1/images/generations",
                        "image/v1/images/edits",
                        "audio/v1/audio/transcriptions",
                        "audio/v1/audio/speech",
                        "audio/v1/audio/translations",
                        "realtime/v1/realtime",
                        "preserve"
                      ]
                    }
                  },
                  {
                    "auth": {
                      "required": false,
                      "type": "record",
                      "fields": [
                        {
                          "header_name": {
                            "required": false,
                            "description": "If AI model requires authentication via Authorization or API key header, specify its name here.",
                            "type": "string",
                            "referenceable": true
                          }
                        },
                        {
                          "header_value": {
                            "type": "string",
                            "referenceable": true,
                            "required": false,
                            "description": "Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.",
                            "encrypted": true
                          }
                        },
                        {
                          "param_name": {
                            "required": false,
                            "description": "If AI model requires authentication via query parameter, specify its name here.",
                            "type": "string",
                            "referenceable": true
                          }
                        },
                        {
                          "param_value": {
                            "type": "string",
                            "referenceable": true,
                            "required": false,
                            "description": "Specify the full parameter value for 'param_name'.",
                            "encrypted": true
                          }
                        },
                        {
                          "param_location": {
                            "required": false,
                            "description": "Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.",
                            "type": "string",
                            "one_of": [
                              "query",
                              "body"
                            ]
                          }
                        },
                        {
                          "azure_use_managed_identity": {
                            "required": false,
                            "description": "Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.",
                            "type": "boolean",
                            "default": false
                          }
                        },
                        {
                          "azure_client_id": {
                            "required": false,
                            "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.",
                            "type": "string",
                            "referenceable": true
                          }
                        },
                        {
                          "azure_client_secret": {
                            "type": "string",
                            "referenceable": true,
                            "required": false,
                            "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.",
                            "encrypted": true
                          }
                        },
                        {
                          "azure_tenant_id": {
                            "required": false,
                            "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.",
                            "type": "string",
                            "referenceable": true
                          }
                        },
                        {
                          "gcp_use_service_account": {
                            "required": false,
                            "description": "Use service account auth for GCP-based providers and models.",
                            "type": "boolean",
                            "default": false
                          }
                        },
                        {
                          "gcp_service_account_json": {
                            "type": "string",
                            "referenceable": true,
                            "required": false,
                            "description": "Set this field to the full JSON of the GCP service account to authenticate, if required. If null (and gcp_use_service_account is true), Kong will attempt to read from environment variable `GCP_SERVICE_ACCOUNT`.",
                            "encrypted": true
                          }
                        },
                        {
                          "aws_access_key_id": {
                            "type": "string",
                            "referenceable": true,
                            "required": false,
                            "description": "Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_ACCESS_KEY_ID environment variable for this plugin instance.",
                            "encrypted": true
                          }
                        },
                        {
                          "aws_secret_access_key": {
                            "type": "string",
                            "referenceable": true,
                            "required": false,
                            "description": "Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_SECRET_ACCESS_KEY environment variable for this plugin instance.",
                            "encrypted": true
                          }
                        },
                        {
                          "allow_override": {
                            "required": false,
                            "description": "If enabled, the authorization header or parameter can be overridden in the request by the value configured in the plugin.",
                            "type": "boolean",
                            "default": false
                          }
                        }
                      ]
                    }
                  },
                  {
                    "model": {
                      "required": true,
                      "type": "record",
                      "fields": [
                        {
                          "provider": {
                            "required": true,
                            "description": "AI provider request format - Kong translates requests to and from the specified backend compatible formats.",
                            "type": "string",
                            "one_of": [
                              "openai",
                              "azure",
                              "anthropic",
                              "cohere",
                              "mistral",
                              "llama2",
                              "gemini",
                              "bedrock",
                              "huggingface"
                            ]
                          }
                        },
                        {
                          "name": {
                            "required": false,
                            "description": "Model name to execute.",
                            "type": "string"
                          }
                        },
                        {
                          "options": {
                            "required": false,
                            "description": "Key/value settings for the model",
                            "type": "record",
                            "fields": [
                              {
                                "max_tokens": {
                                  "required": false,
                                  "description": "Defines the max_tokens, if using chat or completion models.",
                                  "type": "integer"
                                }
                              },
                              {
                                "input_cost": {
                                  "required": false,
                                  "description": "Defines the cost per 1M tokens in your prompt.",
                                  "type": "number",
                                  "gt": 0
                                }
                              },
                              {
                                "output_cost": {
                                  "required": false,
                                  "description": "Defines the cost per 1M tokens in the output of the AI.",
                                  "type": "number",
                                  "gt": 0
                                }
                              },
                              {
                                "temperature": {
                                  "required": false,
                                  "description": "Defines the matching temperature, if using chat or completion models.",
                                  "type": "number",
                                  "between": [
                                    0,
                                    5
                                  ]
                                }
                              },
                              {
                                "top_p": {
                                  "required": false,
                                  "description": "Defines the top-p probability mass, if supported.",
                                  "type": "number",
                                  "between": [
                                    0,
                                    1
                                  ]
                                }
                              },
                              {
                                "top_k": {
                                  "required": false,
                                  "description": "Defines the top-k most likely tokens, if supported.",
                                  "type": "integer",
                                  "between": [
                                    0,
                                    500
                                  ]
                                }
                              },
                              {
                                "anthropic_version": {
                                  "required": false,
                                  "description": "Defines the schema/API version, if using Anthropic provider.",
                                  "type": "string"
                                }
                              },
                              {
                                "azure_instance": {
                                  "required": false,
                                  "description": "Instance name for Azure OpenAI hosted models.",
                                  "type": "string"
                                }
                              },
                              {
                                "azure_api_version": {
                                  "required": false,
                                  "description": "'api-version' for Azure OpenAI instances.",
                                  "type": "string",
                                  "default": "2023-05-15"
                                }
                              },
                              {
                                "azure_deployment_id": {
                                  "required": false,
                                  "description": "Deployment ID for Azure OpenAI instances.",
                                  "type": "string"
                                }
                              },
                              {
                                "llama2_format": {
                                  "required": false,
                                  "description": "If using llama2 provider, select the upstream message format.",
                                  "type": "string",
                                  "one_of": [
                                    "raw",
                                    "openai",
                                    "ollama"
                                  ]
                                }
                              },
                              {
                                "mistral_format": {
                                  "required": false,
                                  "description": "If using mistral provider, select the upstream message format.",
                                  "type": "string",
                                  "one_of": [
                                    "openai",
                                    "ollama"
                                  ]
                                }
                              },
                              {
                                "upstream_url": {
                                  "required": false,
                                  "description": "Manually specify or override the full URL to the AI operation endpoints, when calling (self-)hosted models, or for running via a private endpoint.",
                                  "type": "string"
                                }
                              },
                              {
                                "upstream_path": {
                                  "required": false,
                                  "description": "Manually specify or override the AI operation path, used when e.g. using the 'preserve' route_type.",
                                  "type": "string",
                                  "deprecation": {
                                    "removal_in_version": "4.0",
                                    "message": "llm: config.model.options.upstream_path is deprecated, please use config.model.options.upstream_url instead"
                                  }
                                }
                              },
                              {
                                "embeddings_dimensions": {
                                  "required": false,
                                  "description": "If using embeddings models, set the number of dimensions to generate.",
                                  "type": "integer",
                                  "gt": 0
                                }
                              },
                              {
                                "gemini": {
                                  "required": false,
                                  "entity_checks": [
                                    {
                                      "mutually_required": [
                                        "api_endpoint",
                                        "project_id",
                                        "location_id"
                                      ]
                                    }
                                  ],
                                  "type": "record",
                                  "fields": [
                                    {
                                      "api_endpoint": {
                                        "required": false,
                                        "description": "If running Gemini on Vertex, specify the regional API endpoint (hostname only).",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "project_id": {
                                        "required": false,
                                        "description": "If running Gemini on Vertex, specify the project ID.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "location_id": {
                                        "required": false,
                                        "description": "If running Gemini on Vertex, specify the location ID.",
                                        "type": "string"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "bedrock": {
                                  "required": false,
                                  "entity_checks": [
                                    {
                                      "mutually_required": [
                                        "aws_assume_role_arn",
                                        "aws_role_session_name"
                                      ]
                                    }
                                  ],
                                  "type": "record",
                                  "fields": [
                                    {
                                      "aws_region": {
                                        "required": false,
                                        "description": "If using AWS providers (Bedrock) you can override the `AWS_REGION` environment variable by setting this option.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "aws_assume_role_arn": {
                                        "required": false,
                                        "description": "If using AWS providers (Bedrock) you can assume a different role after authentication with the current IAM context is successful.",
                                        "type": "string"
                                      }
                                    },
                                    {
                                      "aws_role_session_name": {
                                        "type": "string",
                                        "description": "If using AWS providers (Bedrock), set the identifier of the assumed role session."
                                      }
                                    },
                                    {
                                      "aws_sts_endpoint_url": {
                                        "type": "string",
                                        "description": "If using AWS providers (Bedrock), override the STS endpoint URL when assuming a different role."
                                      }
                                    },
                                    {
                                      "embeddings_normalize": {
                                        "description": "If using AWS providers (Bedrock), set to true to normalize the embeddings.",
                                        "type": "boolean",
                                        "default": false
                                      }
                                    },
                                    {
                                      "performance_config_latency": {
                                        "required": false,
                                        "description": "Force the client's performance configuration 'latency' for all requests. Leave empty to let the consumer select the performance configuration.",
                                        "type": "string"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "huggingface": {
                                  "required": false,
                                  "type": "record",
                                  "fields": [
                                    {
                                      "use_cache": {
                                        "required": false,
                                        "description": "Use the cache layer on the inference API",
                                        "type": "boolean"
                                      }
                                    },
                                    {
                                      "wait_for_model": {
                                        "required": false,
                                        "description": "Wait for the model if it is not ready",
                                        "type": "boolean"
                                      }
                                    }
                                  ]
                                }
                              },
                              {
                                "cohere": {
                                  "required": false,
                                  "type": "record",
                                  "fields": [
                                    {
                                      "embedding_input_type": {
                                        "type": "string",
                                        "required": false,
                                        "description": "The purpose of the input text to calculate embedding vectors.",
                                        "default": "classification",
                                        "one_of": [
                                          "search_document",
                                          "search_query",
                                          "classification",
                                          "clustering",
                                          "image"
                                        ]
                                      }
                                    },
                                    {
                                      "wait_for_model": {
                                        "required": false,
                                        "description": "Wait for the model if it is not ready",
                                        "type": "boolean"
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          }
                        }
                      ]
                    }
                  },
                  {
                    "weight": {
                      "between": [
                        1,
                        65535
                      ],
                      "description": "The weight this target gets within the upstream loadbalancer (1-65535).",
                      "default": 100,
                      "type": "integer"
                    }
                  },
                  {
                    "description": {
                      "required": false,
                      "description": "The semantic description of the target, required if using semantic load balancing. Specially, setting this to 'CATCHALL' will indicate such target to be used when no other targets match the semantic threshold.",
                      "type": "string"
                    }
                  },
                  {
                    "logging": {
                      "required": true,
                      "type": "record",
                      "fields": [
                        {
                          "log_statistics": {
                            "required": true,
                            "description": "If enabled and supported by the driver, will add model usage and token metrics into the Kong log plugin(s) output.",
                            "type": "boolean",
                            "default": false
                          }
                        },
                        {
                          "log_payloads": {
                            "required": true,
                            "description": "If enabled, will log the request and response body into the Kong log plugin(s) output.",
                            "type": "boolean",
                            "default": false
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            }
          },
          {
            "llm_format": {
              "type": "string",
              "required": false,
              "description": "LLM input and output format and schema to use",
              "default": "openai",
              "one_of": [
                "openai",
                "bedrock",
                "gemini",
                "cohere",
                "huggingface"
              ]
            }
          },
          {
            "genai_category": {
              "type": "string",
              "required": false,
              "description": "Generative AI category of the request",
              "default": "text/generation",
              "one_of": [
                "text/generation",
                "text/embeddings",
                "audio/transcription",
                "audio/speech",
                "image/generation",
                "video/generation",
                "realtime/generation"
              ]
            }
          }
        ]
      }
    }
  ]
}
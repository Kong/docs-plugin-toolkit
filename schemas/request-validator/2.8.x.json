{
  "fields": [
    {
      "config": {
        "required": true,
        "fields": [
          {
            "body_schema": {
              "required": false,
              "type": "string",
              "examples": [
                "[{\"name\":{\"type\": \"string\", \"required\": true}}]"
              ],
              "description": "The request body schema specification. One of `body_schema` or `parameter_schema`\nmust be specified."
            }
          },
          {
            "allowed_content_types": {
              "elements": {
                "required": true,
                "type": "string"
              },
              "default": [
                "application/json"
              ],
              "type": "set",
              "description": "List of allowed content types. The value can be configured with the `charset` parameter. For example, `application/json; charset=UTF-8`.\n\n{:.note}\n> **Notes:** \n* Body validation is only done for `application/json` and skipped for any other allowed content types.\n* Only one parameter is supported. If a request sends more than one parameter with the Content-Type header, only the first parameter is evaluated and the rest are truncated.\nThe type, subtype, parameter names, and the value of the charset parameter are not case sensitive based on the RFC explanation.\n* Parameter does not need to be explicitly configured to allow a request passed with a parameter content-type. The parameter is checked only if the request carries the parameter and it's explicitly configured. For example, a request with `application/json; charset=UTF-8` is to be considered valid for `application/json`."
            }
          },
          {
            "version": {
              "one_of": [
                "kong",
                "draft4"
              ],
              "required": true,
              "default": "kong",
              "type": "string",
              "description": "Which validator to use. Supported values are `kong` (default) for using Kong's own schema\nvalidator, or `draft4` for using a JSON Schema Draft 4-compliant validator."
            }
          },
          {
            "parameter_schema": {
              "required": false,
              "elements": {
                "fields": [
                  {
                    "in": {
                      "one_of": [
                        "query",
                        "header",
                        "path"
                      ],
                      "required": true,
                      "type": "string"
                    }
                  },
                  {
                    "name": {
                      "required": true,
                      "type": "string"
                    }
                  },
                  {
                    "required": {
                      "required": true,
                      "type": "boolean"
                    }
                  },
                  {
                    "style": {
                      "one_of": [
                        "label",
                        "form",
                        "matrix",
                        "simple",
                        "spaceDelimited",
                        "pipeDelimited",
                        "deepObject"
                      ],
                      "type": "string"
                    }
                  },
                  {
                    "explode": {
                      "type": "boolean"
                    }
                  },
                  {
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "entity_checks": [
                  {
                    "mutually_required": [
                      "style",
                      "explode",
                      "schema"
                    ]
                  },
                  {
                    "custom_entity_check": {
                      "field_sources": [
                        "style",
                        "in"
                      ]
                    }
                  }
                ],
                "type": "record"
              },
              "type": "array",
              "description": "Array of parameter validator specifications. For details and examples, see\n[Parameter Schema Definition](#parameter-schema-definition). One of `body_schema` or `parameter_schema`\nmust be specified."
            }
          },
          {
            "verbose_response": {
              "required": true,
              "default": false,
              "type": "boolean",
              "description": "If enabled, the plugin returns more verbose and detailed validation errors\n(for example, the name of the required field that is missing)."
            }
          }
        ],
        "entity_checks": [
          {
            "at_least_one_of": [
              "body_schema",
              "parameter_schema"
            ]
          }
        ],
        "type": "record"
      }
    }
  ]
}

{
  "fields": [
    {
      "protocols": {
        "description": "A set of strings representing HTTP protocols.",
        "type": "set",
        "required": true,
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ]
      }
    },
    {
      "config": {
        "type": "record",
        "fields": [
          {
            "embeddings": {
              "required": true,
              "type": "record",
              "fields": [
                {
                  "auth": {
                    "type": "record",
                    "fields": [
                      {
                        "header_name": {
                          "required": false,
                          "description": "If AI model requires authentication via Authorization or API key header, specify its name here.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "header_value": {
                          "description": "Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.",
                          "type": "string",
                          "required": false,
                          "encrypted": true,
                          "referenceable": true
                        }
                      },
                      {
                        "param_name": {
                          "required": false,
                          "description": "If AI model requires authentication via query parameter, specify its name here.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "param_value": {
                          "description": "Specify the full parameter value for 'param_name'.",
                          "type": "string",
                          "required": false,
                          "encrypted": true,
                          "referenceable": true
                        }
                      },
                      {
                        "param_location": {
                          "required": false,
                          "description": "Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.",
                          "type": "string",
                          "one_of": [
                            "query",
                            "body"
                          ]
                        }
                      },
                      {
                        "azure_use_managed_identity": {
                          "type": "boolean",
                          "description": "Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.",
                          "default": false,
                          "required": false
                        }
                      },
                      {
                        "azure_client_id": {
                          "required": false,
                          "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "azure_client_secret": {
                          "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.",
                          "type": "string",
                          "required": false,
                          "encrypted": true,
                          "referenceable": true
                        }
                      },
                      {
                        "azure_tenant_id": {
                          "required": false,
                          "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "gcp_use_service_account": {
                          "type": "boolean",
                          "description": "Use service account auth for GCP-based providers and models.",
                          "default": false,
                          "required": false
                        }
                      },
                      {
                        "gcp_service_account_json": {
                          "description": "Set this field to the full JSON of the GCP service account to authenticate, if required. If null (and gcp_use_service_account is true), Kong will attempt to read from environment variable `GCP_SERVICE_ACCOUNT`.",
                          "type": "string",
                          "required": false,
                          "encrypted": true,
                          "referenceable": true
                        }
                      },
                      {
                        "aws_access_key_id": {
                          "description": "Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_ACCESS_KEY_ID environment variable for this plugin instance.",
                          "type": "string",
                          "required": false,
                          "encrypted": true,
                          "referenceable": true
                        }
                      },
                      {
                        "aws_secret_access_key": {
                          "description": "Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_SECRET_ACCESS_KEY environment variable for this plugin instance.",
                          "type": "string",
                          "required": false,
                          "encrypted": true,
                          "referenceable": true
                        }
                      },
                      {
                        "allow_override": {
                          "type": "boolean",
                          "description": "If enabled, the authorization header or parameter can be overridden in the request by the value configured in the plugin.",
                          "default": false,
                          "required": false
                        }
                      }
                    ],
                    "required": false
                  }
                },
                {
                  "model": {
                    "type": "record",
                    "fields": [
                      {
                        "provider": {
                          "required": true,
                          "description": "AI provider format to use for embeddings API",
                          "type": "string",
                          "one_of": [
                            "openai",
                            "mistral",
                            "huggingface",
                            "azure",
                            "bedrock",
                            "gemini"
                          ]
                        }
                      },
                      {
                        "name": {
                          "description": "Model name to execute.",
                          "type": "string",
                          "required": true
                        }
                      },
                      {
                        "options": {
                          "type": "record",
                          "description": "Key/value settings for the model",
                          "fields": [
                            {
                              "upstream_url": {
                                "description": "upstream url for the embeddings",
                                "type": "string",
                                "required": false
                              }
                            },
                            {
                              "azure": {
                                "type": "record",
                                "fields": [
                                  {
                                    "instance": {
                                      "description": "Instance name for Azure OpenAI hosted models.",
                                      "type": "string",
                                      "required": false
                                    }
                                  },
                                  {
                                    "api_version": {
                                      "type": "string",
                                      "description": "'api-version' for Azure OpenAI instances.",
                                      "default": "2023-05-15",
                                      "required": false
                                    }
                                  },
                                  {
                                    "deployment_id": {
                                      "description": "Deployment ID for Azure OpenAI instances.",
                                      "type": "string",
                                      "required": false
                                    }
                                  }
                                ],
                                "required": true
                              }
                            },
                            {
                              "bedrock": {
                                "required": false,
                                "type": "record",
                                "fields": [
                                  {
                                    "aws_region": {
                                      "description": "If using AWS providers (Bedrock) you can override the `AWS_REGION` environment variable by setting this option.",
                                      "type": "string",
                                      "required": false
                                    }
                                  },
                                  {
                                    "aws_assume_role_arn": {
                                      "description": "If using AWS providers (Bedrock) you can assume a different role after authentication with the current IAM context is successful.",
                                      "type": "string",
                                      "required": false
                                    }
                                  },
                                  {
                                    "aws_role_session_name": {
                                      "type": "string",
                                      "description": "If using AWS providers (Bedrock), set the identifier of the assumed role session."
                                    }
                                  },
                                  {
                                    "aws_sts_endpoint_url": {
                                      "type": "string",
                                      "description": "If using AWS providers (Bedrock), override the STS endpoint URL when assuming a different role."
                                    }
                                  }
                                ],
                                "entity_checks": [
                                  {
                                    "mutually_required": [
                                      "aws_assume_role_arn",
                                      "aws_role_session_name"
                                    ]
                                  }
                                ]
                              }
                            },
                            {
                              "gemini": {
                                "required": false,
                                "type": "record",
                                "fields": [
                                  {
                                    "api_endpoint": {
                                      "description": "If running Gemini on Vertex, specify the regional API endpoint (hostname only).",
                                      "type": "string",
                                      "required": false
                                    }
                                  },
                                  {
                                    "project_id": {
                                      "description": "If running Gemini on Vertex, specify the project ID.",
                                      "type": "string",
                                      "required": false
                                    }
                                  },
                                  {
                                    "location_id": {
                                      "description": "If running Gemini on Vertex, specify the location ID.",
                                      "type": "string",
                                      "required": false
                                    }
                                  }
                                ],
                                "entity_checks": [
                                  {
                                    "mutually_required": [
                                      "api_endpoint",
                                      "project_id",
                                      "location_id"
                                    ]
                                  }
                                ]
                              }
                            },
                            {
                              "huggingface": {
                                "type": "record",
                                "fields": [
                                  {
                                    "use_cache": {
                                      "description": "Use the cache layer on the inference API",
                                      "type": "boolean",
                                      "required": false
                                    }
                                  },
                                  {
                                    "wait_for_model": {
                                      "description": "Wait for the model if it is not ready",
                                      "type": "boolean",
                                      "required": false
                                    }
                                  }
                                ],
                                "required": false
                              }
                            }
                          ],
                          "required": false
                        }
                      }
                    ],
                    "required": true
                  }
                }
              ],
              "entity_checks": [
                {
                  "conditional_at_least_one_of": {
                    "if_match": {
                      "one_of": [
                        "azure"
                      ]
                    },
                    "then_err": "must set %s for azure provider",
                    "if_field": "model.provider",
                    "then_at_least_one_of": [
                      "model.options.azure.instance"
                    ]
                  }
                },
                {
                  "conditional_at_least_one_of": {
                    "if_match": {
                      "one_of": [
                        "azure"
                      ]
                    },
                    "then_err": "must set %s for azure provider",
                    "if_field": "model.provider",
                    "then_at_least_one_of": [
                      "model.options.azure.api_version"
                    ]
                  }
                },
                {
                  "conditional_at_least_one_of": {
                    "if_match": {
                      "one_of": [
                        "azure"
                      ]
                    },
                    "then_err": "must set %s for azure provider",
                    "if_field": "model.provider",
                    "then_at_least_one_of": [
                      "model.options.azure.deployment_id"
                    ]
                  }
                }
              ]
            }
          },
          {
            "vectordb": {
              "type": "record",
              "fields": [
                {
                  "strategy": {
                    "required": true,
                    "description": "which vector database driver to use",
                    "type": "string",
                    "one_of": [
                      "redis",
                      "pgvector"
                    ]
                  }
                },
                {
                  "dimensions": {
                    "description": "the desired dimensionality for the vectors",
                    "type": "integer",
                    "required": true
                  }
                },
                {
                  "threshold": {
                    "description": "the default similarity threshold for accepting semantic search results (float)",
                    "type": "number",
                    "required": true
                  }
                },
                {
                  "distance_metric": {
                    "required": true,
                    "description": "the distance metric to use for vector searches",
                    "type": "string",
                    "one_of": [
                      "cosine",
                      "euclidean"
                    ]
                  }
                },
                {
                  "redis": {
                    "type": "record",
                    "required": true,
                    "fields": [
                      {
                        "host": {
                          "description": "A string representing a host name, such as example.com.",
                          "default": "127.0.0.1",
                          "type": "string"
                        }
                      },
                      {
                        "port": {
                          "type": "integer",
                          "description": "An integer representing a port number between 0 and 65535, inclusive.",
                          "between": [
                            0,
                            65535
                          ],
                          "default": 6379
                        }
                      },
                      {
                        "connect_timeout": {
                          "type": "integer",
                          "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                          "between": [
                            0,
                            2147483646
                          ],
                          "default": 2000
                        }
                      },
                      {
                        "send_timeout": {
                          "type": "integer",
                          "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                          "between": [
                            0,
                            2147483646
                          ],
                          "default": 2000
                        }
                      },
                      {
                        "read_timeout": {
                          "type": "integer",
                          "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                          "between": [
                            0,
                            2147483646
                          ],
                          "default": 2000
                        }
                      },
                      {
                        "username": {
                          "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "password": {
                          "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.",
                          "encrypted": true,
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "sentinel_username": {
                          "description": "Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "sentinel_password": {
                          "description": "Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.",
                          "encrypted": true,
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "database": {
                          "description": "Database to use for the Redis connection when using the `redis` strategy",
                          "default": 0,
                          "type": "integer"
                        }
                      },
                      {
                        "keepalive_pool_size": {
                          "default": 256,
                          "description": "The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.",
                          "between": [
                            1,
                            2147483646
                          ],
                          "type": "integer"
                        }
                      },
                      {
                        "keepalive_backlog": {
                          "description": "Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.",
                          "type": "integer",
                          "between": [
                            0,
                            2147483646
                          ]
                        }
                      },
                      {
                        "sentinel_master": {
                          "type": "string",
                          "description": "Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel."
                        }
                      },
                      {
                        "sentinel_role": {
                          "description": "Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.",
                          "type": "string",
                          "one_of": [
                            "master",
                            "slave",
                            "any"
                          ]
                        }
                      },
                      {
                        "sentinel_nodes": {
                          "description": "Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.",
                          "type": "array",
                          "required": false,
                          "elements": {
                            "type": "record",
                            "fields": [
                              {
                                "host": {
                                  "default": "127.0.0.1",
                                  "description": "A string representing a host name, such as example.com.",
                                  "type": "string",
                                  "required": true
                                }
                              },
                              {
                                "port": {
                                  "type": "integer",
                                  "description": "An integer representing a port number between 0 and 65535, inclusive.",
                                  "between": [
                                    0,
                                    65535
                                  ],
                                  "default": 6379
                                }
                              }
                            ]
                          },
                          "len_min": 1
                        }
                      },
                      {
                        "cluster_nodes": {
                          "description": "Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.",
                          "type": "array",
                          "required": false,
                          "elements": {
                            "type": "record",
                            "fields": [
                              {
                                "ip": {
                                  "default": "127.0.0.1",
                                  "description": "A string representing a host name, such as example.com.",
                                  "type": "string",
                                  "required": true
                                }
                              },
                              {
                                "port": {
                                  "type": "integer",
                                  "description": "An integer representing a port number between 0 and 65535, inclusive.",
                                  "between": [
                                    0,
                                    65535
                                  ],
                                  "default": 6379
                                }
                              }
                            ]
                          },
                          "len_min": 1
                        }
                      },
                      {
                        "ssl": {
                          "type": "boolean",
                          "description": "If set to true, uses SSL to connect to Redis.",
                          "default": false,
                          "required": false
                        }
                      },
                      {
                        "ssl_verify": {
                          "type": "boolean",
                          "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.",
                          "default": false,
                          "required": false
                        }
                      },
                      {
                        "server_name": {
                          "description": "A string representing an SNI (server name indication) value for TLS.",
                          "type": "string",
                          "required": false
                        }
                      },
                      {
                        "cluster_max_redirections": {
                          "type": "integer",
                          "description": "Maximum retry attempts for redirection.",
                          "default": 5,
                          "required": false
                        }
                      },
                      {
                        "connection_is_proxied": {
                          "type": "boolean",
                          "description": "If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.",
                          "default": false,
                          "required": false
                        }
                      }
                    ],
                    "entity_checks": [
                      {
                        "mutually_required": [
                          "host",
                          "port"
                        ]
                      },
                      {
                        "mutually_required": [
                          "sentinel_master",
                          "sentinel_role",
                          "sentinel_nodes"
                        ]
                      },
                      {
                        "mutually_required": [
                          "connect_timeout",
                          "send_timeout",
                          "read_timeout"
                        ]
                      },
                      {
                        "conditional": {
                          "if_match": {
                            "eq": true
                          },
                          "then_field": "host",
                          "if_field": "connection_is_proxied",
                          "then_match": {
                            "required": true
                          }
                        }
                      },
                      {
                        "custom_entity_check": {
                          "run_with_missing_fields": true,
                          "field_sources": [
                            "database",
                            "connection_is_proxied"
                          ]
                        }
                      },
                      {
                        "custom_entity_check": {
                          "run_with_missing_fields": true,
                          "field_sources": [
                            "cluster_nodes",
                            "connection_is_proxied"
                          ]
                        }
                      },
                      {
                        "custom_entity_check": {
                          "run_with_missing_fields": true,
                          "field_sources": [
                            "sentinel_role",
                            "connection_is_proxied"
                          ]
                        }
                      }
                    ],
                    "shorthand_fields": [
                      {
                        "timeout": {
                          "type": "integer",
                          "deprecation": {
                            "removal_in_version": "4.0",
                            "message": "redis schema field `timeout` is deprecated, use `connect_timeout`, `send_timeout` and `read_timeout`",
                            "replaced_with": [
                              {
                                "path": [
                                  "connect_timeout"
                                ]
                              },
                              {
                                "path": [
                                  "send_timeout"
                                ]
                              },
                              {
                                "path": [
                                  "read_timeout"
                                ]
                              }
                            ]
                          }
                        }
                      },
                      {
                        "sentinel_addresses": {
                          "elements": {
                            "type": "string"
                          },
                          "len_min": 1,
                          "type": "array",
                          "deprecation": {
                            "removal_in_version": "4.0",
                            "message": "sentinel_addresses is deprecated, please use sentinel_nodes instead",
                            "replaced_with": [
                              {
                                "path": [
                                  "sentinel_nodes"
                                ]
                              }
                            ]
                          }
                        }
                      },
                      {
                        "cluster_addresses": {
                          "elements": {
                            "type": "string"
                          },
                          "len_min": 1,
                          "type": "array",
                          "deprecation": {
                            "removal_in_version": "4.0",
                            "message": "cluster_addresses is deprecated, please use cluster_nodes instead",
                            "replaced_with": [
                              {
                                "path": [
                                  "cluster_nodes"
                                ]
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                },
                {
                  "pgvector": {
                    "type": "record",
                    "fields": [
                      {
                        "host": {
                          "description": "the host of the pgvector database",
                          "type": "string",
                          "default": "127.0.0.1"
                        }
                      },
                      {
                        "port": {
                          "description": "the port of the pgvector database",
                          "type": "integer",
                          "default": 5432
                        }
                      },
                      {
                        "user": {
                          "type": "string",
                          "description": "the user of the pgvector database",
                          "default": "postgres",
                          "referenceable": true
                        }
                      },
                      {
                        "password": {
                          "encrypted": true,
                          "description": "the password of the pgvector database",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "database": {
                          "description": "the database of the pgvector database",
                          "type": "string",
                          "default": "kong-pgvector"
                        }
                      },
                      {
                        "timeout": {
                          "description": "the timeout of the pgvector database",
                          "type": "number",
                          "default": 5000
                        }
                      },
                      {
                        "ssl": {
                          "description": "whether to use ssl for the pgvector database",
                          "type": "boolean",
                          "default": false
                        }
                      },
                      {
                        "ssl_required": {
                          "description": "whether ssl is required for the pgvector database",
                          "type": "boolean",
                          "default": false
                        }
                      },
                      {
                        "ssl_verify": {
                          "description": "whether to verify ssl for the pgvector database",
                          "type": "boolean",
                          "default": false
                        }
                      },
                      {
                        "ssl_version": {
                          "type": "string",
                          "description": "the ssl version to use for the pgvector database",
                          "default": "tlsv1_2",
                          "one_of": [
                            "tlsv1_2",
                            "tlsv1_3",
                            "any"
                          ]
                        }
                      },
                      {
                        "ssl_cert": {
                          "type": "string",
                          "description": "the path of ssl cert to use for the pgvector database"
                        }
                      },
                      {
                        "ssl_cert_key": {
                          "type": "string",
                          "description": "the path of ssl cert key to use for the pgvector database"
                        }
                      }
                    ],
                    "required": true
                  }
                }
              ],
              "required": true
            }
          },
          {
            "search": {
              "type": "record",
              "fields": [
                {
                  "threshold": {
                    "default": 0.5,
                    "description": "Threshold for the similarity score to be considered a match.",
                    "type": "number",
                    "required": false
                  }
                }
              ],
              "required": false
            }
          },
          {
            "rules": {
              "type": "record",
              "fields": [
                {
                  "match_all_conversation_history": {
                    "default": false,
                    "description": "If false, will ignore all previous chat prompts from the conversation history.",
                    "type": "boolean",
                    "required": false
                  }
                },
                {
                  "allow_prompts": {
                    "description": "List of prompts to allow.",
                    "type": "array",
                    "required": false,
                    "elements": {
                      "len_min": 1,
                      "type": "string",
                      "len_max": 500
                    },
                    "len_max": 100
                  }
                },
                {
                  "deny_prompts": {
                    "description": "List of prompts to deny.",
                    "type": "array",
                    "required": false,
                    "elements": {
                      "len_min": 1,
                      "type": "string",
                      "len_max": 500
                    },
                    "len_max": 100
                  }
                },
                {
                  "max_request_body_size": {
                    "type": "integer",
                    "description": "max allowed body size allowed to be introspected",
                    "gt": 0,
                    "default": 8192
                  }
                },
                {
                  "match_all_roles": {
                    "type": "boolean",
                    "description": "If true, will match all roles in addition to 'user' role in conversation history.",
                    "default": false,
                    "required": true
                  }
                }
              ],
              "required": true
            }
          },
          {
            "llm_format": {
              "description": "LLM input and output format and schema to use",
              "type": "string",
              "required": false,
              "default": "openai",
              "one_of": [
                "openai",
                "bedrock",
                "gemini"
              ]
            }
          }
        ],
        "required": true
      }
    }
  ],
  "entity_checks": [
    {
      "at_least_one_of": [
        "config.rules.allow_prompts",
        "config.rules.deny_prompts"
      ]
    }
  ]
}
{
  "fields": [
    {
      "protocols": {
        "type": "set",
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": true
      }
    },
    {
      "config": {
        "type": "record",
        "fields": [
          {
            "remove": {
              "type": "record",
              "fields": [
                {
                  "json": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "examples": [
                      [
                        "json-key-toremove",
                        "another-json-key"
                      ]
                    ],
                    "description": "List of property names. Remove the property from the JSON body if it is present."
                  }
                },
                {
                  "headers": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "examples": [
                      [
                        "x-toremove",
                        "x-another-one:application/json",
                        "x-list-of-values:v1,v2,v3",
                        "Set-Cookie:/JSESSIONID=.*/",
                        "x-another-regex://status/$/",
                        "x-one-more-regex:/^/begin//"
                      ]
                    ],
                    "description": "List of `headername[:value]`. If only `headername` is given, unset the header field with the given `headername`. If `headername:value` is given, unset the header field `headername` when it has a specific `value`. If `value` starts and ends with a `/` (slash character), then it is considered to be a regular expression. Note that in accordance with [RFC 7230](https://httpwg.org/specs/rfc7230.html#field.order) multiple header values with the same header name are allowed if the entire field value for that header field is defined as a comma-separated list or the header field is a `Set-Cookie` header field."
                  }
                },
                {
                  "if_status": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "description": "List of response status codes or status code ranges to which the transformation will apply. Empty means all response codes."
                  }
                }
              ],
              "required": true
            }
          },
          {
            "rename": {
              "type": "record",
              "fields": [
                {
                  "headers": {
                    "type": "array",
                    "elements": {
                      "type": "string",
                      "match": "^[^:]+:.*$"
                    },
                    "default": [

                    ],
                    "description": "List of `headername1:headername2` pairs. If a header with `headername1` exists and `headername2` is valid, rename header to `headername2`."
                  }
                },
                {
                  "if_status": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "description": "List of response status codes or status code ranges to which the transformation will apply. Empty means all response codes."
                  }
                }
              ],
              "required": true
            }
          },
          {
            "replace": {
              "type": "record",
              "fields": [
                {
                  "body": {
                    "type": "string",
                    "description": "String with which to replace the entire response body."
                  }
                },
                {
                  "json": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "description": "List of property `name:value` pairs. If and only if the parameter is already present, replace its old value with the new one. Ignored if the parameter is not already present."
                  }
                },
                {
                  "json_types": {
                    "type": "array",
                    "elements": {
                      "type": "string",
                      "one_of": [
                        "boolean",
                        "number",
                        "string"
                      ]
                    },
                    "default": [

                    ],
                    "description": "List of JSON type names. Specify the types of the JSON values returned when replacing JSON properties."
                  }
                },
                {
                  "headers": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "description": "List of `headername:value` pairs. If and only if the header is already set, replace its old value with the new one. Ignored if the header is not already set."
                  }
                },
                {
                  "if_status": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "description": "List of response status codes or status code ranges to which the transformation will apply. Empty means all response codes."
                  }
                }
              ],
              "required": true
            }
          },
          {
            "add": {
              "type": "record",
              "fields": [
                {
                  "json": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "examples": [
                      [
                        "new-json-key:some_value",
                        "another-json-key:some_value"
                      ]
                    ],
                    "description": "List of `name:value` pairs. If and only if the property is not present, add a new property with the given value to the JSON body. Ignored if the property is already present."
                  }
                },
                {
                  "json_types": {
                    "type": "array",
                    "elements": {
                      "type": "string",
                      "one_of": [
                        "boolean",
                        "number",
                        "string"
                      ]
                    },
                    "default": [

                    ],
                    "examples": [
                      [
                        "string",
                        "boolean",
                        "number"
                      ]
                    ],
                    "description": "List of JSON type names. Specify the types of the JSON values returned when adding a new JSON property."
                  }
                },
                {
                  "headers": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "examples": [
                      [
                        "x-new-header:value",
                        "x-another-header:something"
                      ]
                    ],
                    "description": "List of `headername:value` pairs. If and only if the header is not already set, set a new header with the given value. Ignored if the header is already set."
                  }
                },
                {
                  "if_status": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "description": "List of response status codes or status code ranges to which the transformation will apply. Empty means all response codes."
                  }
                }
              ],
              "required": true
            }
          },
          {
            "append": {
              "type": "record",
              "fields": [
                {
                  "json": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "description": "List of `name:value` pairs. If the property is not present in the JSON body, add it with the given value. If it is already present, the two values (old and new) will be aggregated in an array."
                  }
                },
                {
                  "json_types": {
                    "type": "array",
                    "elements": {
                      "type": "string",
                      "one_of": [
                        "boolean",
                        "number",
                        "string"
                      ]
                    },
                    "default": [

                    ],
                    "description": "List of JSON type names. Specify the types of the JSON values returned when appending JSON properties."
                  }
                },
                {
                  "headers": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "examples": [
                      [
                        "x-existing-header:some_value",
                        "x-another-header:some_value"
                      ]
                    ],
                    "description": "List of `headername:value` pairs. If the header is not set, set it with the given value. If it is already set, a new header with the same name and the new value will be set."
                  }
                },
                {
                  "if_status": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "description": "List of response status codes or status code ranges to which the transformation will apply. Empty means all response codes."
                  }
                }
              ],
              "required": true
            }
          },
          {
            "allow": {
              "type": "record",
              "fields": [
                {
                  "json": {
                    "type": "set",
                    "elements": {
                      "type": "string"
                    },
                    "description": "Set of parameter names. Only allowed parameters are present in the JSON response body."
                  }
                }
              ],
              "required": true
            }
          },
          {
            "transform": {
              "type": "record",
              "fields": [
                {
                  "functions": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "description": "Set of Lua functions to perform arbitrary transforms in a response JSON body."
                  }
                },
                {
                  "if_status": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "description": "List of response status codes or ranges to which the arbitrary transformation applies. Leaving empty implies that the transformations apply to all response codes."
                  }
                },
                {
                  "json": {
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "default": [

                    ],
                    "description": "Apply Lua functions to a particular list of JSON property `name` or `name:value` pairs."
                  }
                }
              ],
              "required": true
            }
          },
          {
            "dots_in_keys": {
              "default": true,
              "type": "boolean",
              "description": "Whether dots (for example, `customers.info.phone`) should be treated as part of a property name or used to descend into nested JSON objects. See [Arrays and nested objects](#arrays-and-nested-objects)."
            }
          }
        ],
        "required": true
      }
    }
  ]
}

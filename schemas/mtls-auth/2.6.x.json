{
  "fields": [
    {
      "consumer": {
        "type": "foreign",
        "eq": null,
        "reference": "consumers"
      }
    },
    {
      "protocols": {
        "elements": {
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ],
          "type": "string"
        },
        "required": true,
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "type": "set"
      }
    },
    {
      "config": {
        "fields": [
          {
            "anonymous": {
              "uuid": true,
              "legacy": true,
              "type": "string",
              "description": "An optional string (consumer UUID) value to use as an \"anonymous\" consumer if authentication fails.\nIf the request is left empty (which it is by default), it fails with an authentication failure of either\n`HTTP 495` if the client presented a certificate that is not acceptable, or `HTTP 496` if the client failed\nto present certificate as requested. Please note that this value must refer to the consumer `id`\nattribute, which is internal to Kong, and **not** its `custom_id`."
            }
          },
          {
            "consumer_by": {
              "default": [
                "username",
                "custom_id"
              ],
              "required": false,
              "elements": {
                "one_of": [
                  "username",
                  "custom_id"
                ],
                "type": "string"
              },
              "type": "array",
              "description": "Whether to match the subject name of the client-supplied certificate against consumer's `username` and/or `custom_id` attribute. If set to `[]` (the empty array), then auto-matching is disabled."
            }
          },
          {
            "ca_certificates": {
              "required": true,
              "elements": {
                "uuid": true,
                "type": "string"
              },
              "type": "array",
              "examples": [
                [
                  "fdac360e-7b19-4ade-a553-6dd22937c82f"
                ]
              ],
              "description": "List of CA Certificates strings to use as Certificate Authorities (CA) when validating a client certificate.\nAt least one is required but you can specify as many as needed. The value of this array is comprised\nof primary keys (`id`)."
            }
          },
          {
            "cache_ttl": {
              "required": true,
              "default": 60,
              "type": "number",
              "description": "Cache expiry time in seconds."
            }
          },
          {
            "skip_consumer_lookup": {
              "required": true,
              "default": false,
              "type": "boolean",
              "description": "Skip consumer lookup once certificate is trusted against the configured CA list."
            }
          },
          {
            "authenticated_group_by": {
              "one_of": [
                "CN",
                "DN"
              ],
              "required": false,
              "default": "CN",
              "type": "string",
              "description": "Certificate property to use as the authenticated group. Valid values are `CN` (Common Name) or\n`DN` (Distinguished Name). Once `skip_consumer_lookup` is applied, any client with a\nvalid certificate can access the Service/API. To restrict usage to only some of the authenticated users,\nalso add the ACL plugin (not covered here) and create allowed or denied groups of users."
            }
          },
          {
            "revocation_check_mode": {
              "one_of": [
                "SKIP",
                "IGNORE_CA_ERROR",
                "STRICT"
              ],
              "required": false,
              "default": "IGNORE_CA_ERROR",
              "type": "string",
              "description": ">**Known Issue:** The default value `IGNORE_CA_ERROR` has a known issue in versions 1.5.0.0 and later.m As a workaround, manually set the value to `SKIP`.\n\nControls client certificate revocation check behavior. Valid values are `SKIP`, `IGNORE_CA_ERROR`, or `STRICT`.\nIf set to `SKIP`, no revocation check is performed. If set to `IGNORE_CA_ERROR`, the plugin respects\nthe revocation status when either OCSP or CRL URL is set, and doesn't fail on network issues. If set to `STRICT`,\nthe plugin only treats the certificate as valid when it's able to verify the revocation status, and a missing\nOCSP or CRL URL in the certificate or a failure to connect to the server results in a revoked status.\nIf both OCSP and CRL URL are set, the plugin always checks OCSP first, and only checks the CRL URL if\nit can't communicate with the OCSP server."
            }
          },
          {
            "http_timeout": {
              "default": 30000,
              "type": "number",
              "description": "HTTP timeout threshold in milliseconds when communicating with the OCSP server or downloading CRL."
            }
          },
          {
            "cert_cache_ttl": {
              "default": 60000,
              "type": "number",
              "description": "The length of time in milliseconds between refreshes of the revocation check status cache."
            }
          }
        ],
        "required": true,
        "type": "record"
      }
    }
  ]
}
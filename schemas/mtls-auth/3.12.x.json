{
  "entity_checks": [],
  "fields": [
    {
      "consumer": {
        "type": "foreign",
        "reference": "consumers",
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "eq": null
      }
    },
    {
      "protocols": {
        "required": true,
        "type": "set",
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "description": "A set of strings representing HTTP protocols."
      }
    },
    {
      "consumer_group": {
        "type": "foreign",
        "reference": "consumer_groups",
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "eq": null
      }
    },
    {
      "config": {
        "fields": [
          {
            "anonymous": {
              "description": "An optional string (consumer UUID or username) value to use as an “anonymous” consumer if authentication fails. If empty (default null), the request fails with an authentication failure `4xx`. Note that this value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.",
              "type": "string"
            }
          },
          {
            "consumer_by": {
              "required": false,
              "description": "Whether to match the subject name of the client-supplied certificate against consumer's `username` and/or `custom_id` attribute. If set to `[]` (the empty array), then auto-matching is disabled.",
              "elements": {
                "type": "string",
                "one_of": [
                  "username",
                  "custom_id"
                ]
              },
              "default": [
                "username",
                "custom_id"
              ],
              "type": "array"
            }
          },
          {
            "ca_certificates": {
              "description": "List of CA Certificates strings to use as Certificate Authorities (CA) when validating a client certificate. At least one is required but you can specify as many as needed. The value of this array is comprised of primary keys (`id`).",
              "required": true,
              "type": "array",
              "elements": {
                "type": "string",
                "uuid": true
              }
            }
          },
          {
            "cache_ttl": {
              "type": "number",
              "required": true,
              "default": 60,
              "description": "Cache expiry time in seconds."
            }
          },
          {
            "skip_consumer_lookup": {
              "type": "boolean",
              "required": true,
              "default": false,
              "description": "Skip consumer lookup once certificate is trusted against the configured CA list."
            }
          },
          {
            "allow_partial_chain": {
              "type": "boolean",
              "required": true,
              "default": false,
              "description": "Allow certificate verification with only an intermediate certificate. When this is enabled, you don't need to upload the full chain to Kong Certificates."
            }
          },
          {
            "authenticated_group_by": {
              "required": false,
              "description": "Certificate property to use as the authenticated group. Valid values are `CN` (Common Name) or `DN` (Distinguished Name). Once `skip_consumer_lookup` is applied, any client with a valid certificate can access the Service/API. To restrict usage to only some of the authenticated users, also add the ACL plugin (not covered here) and create allowed or denied groups of users.",
              "one_of": [
                "CN",
                "DN"
              ],
              "default": "CN",
              "type": "string"
            }
          },
          {
            "revocation_check_mode": {
              "required": false,
              "description": "Controls client certificate revocation check behavior. If set to `SKIP`, no revocation check is performed. If set to `IGNORE_CA_ERROR`, the plugin respects the revocation status when either OCSP or CRL URL is set, and doesn't fail on network issues. If set to `STRICT`, the plugin only treats the certificate as valid when it's able to verify the revocation status.",
              "one_of": [
                "SKIP",
                "IGNORE_CA_ERROR",
                "STRICT"
              ],
              "default": "IGNORE_CA_ERROR",
              "type": "string"
            }
          },
          {
            "http_timeout": {
              "type": "number",
              "default": 30000,
              "description": "HTTP timeout threshold in milliseconds when communicating with the OCSP server or downloading CRL."
            }
          },
          {
            "cert_cache_ttl": {
              "type": "number",
              "default": 60000,
              "description": "The length of time in seconds between refreshes of the revocation check status cache."
            }
          },
          {
            "send_ca_dn": {
              "type": "boolean",
              "default": false,
              "description": "Sends the distinguished names (DN) of the configured CA list in the TLS handshake message."
            }
          },
          {
            "default_consumer": {
              "description": "The UUID or username of the consumer to use when a trusted client certificate is presented but no consumer matches. Note that this value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.",
              "type": "string"
            }
          },
          {
            "http_proxy_host": {
              "description": "A string representing a host name, such as example.com.",
              "type": "string"
            }
          },
          {
            "http_proxy_port": {
              "between": [
                0,
                65535
              ],
              "type": "integer",
              "description": "An integer representing a port number between 0 and 65535, inclusive."
            }
          },
          {
            "https_proxy_host": {
              "description": "A string representing a host name, such as example.com.",
              "type": "string"
            }
          },
          {
            "https_proxy_port": {
              "between": [
                0,
                65535
              ],
              "type": "integer",
              "description": "An integer representing a port number between 0 and 65535, inclusive."
            }
          }
        ],
        "required": true,
        "entity_checks": [
          {
            "mutually_required": [
              "http_proxy_host",
              "http_proxy_port"
            ]
          },
          {
            "mutually_required": [
              "https_proxy_host",
              "https_proxy_port"
            ]
          }
        ],
        "type": "record"
      }
    }
  ]
}
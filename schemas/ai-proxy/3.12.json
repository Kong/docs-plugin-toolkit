{
  "entity_checks": [
    {
      "conditional": {
        "if_match": {
          "eq": "bedrock"
        },
        "then_field": "config.model.provider",
        "if_field": "config.llm_format",
        "then_match": {
          "eq": "bedrock"
        },
        "then_err": "native llm_format 'bedrock' can only be used with the 'bedrock' model.provider"
      }
    },
    {
      "conditional": {
        "if_match": {
          "eq": "gemini"
        },
        "then_field": "config.model.provider",
        "if_field": "config.llm_format",
        "then_match": {
          "eq": "gemini"
        },
        "then_err": "native llm_format 'gemini' can only be used with the 'gemini' model.provider"
      }
    },
    {
      "conditional": {
        "if_match": {
          "eq": "cohere"
        },
        "then_field": "config.model.provider",
        "if_field": "config.llm_format",
        "then_match": {
          "eq": "cohere"
        },
        "then_err": "native llm_format 'cohere' can only be used with the 'cohere' model.provider"
      }
    },
    {
      "conditional": {
        "if_match": {
          "eq": "huggingface"
        },
        "then_field": "config.model.provider",
        "if_field": "config.llm_format",
        "then_match": {
          "eq": "huggingface"
        },
        "then_err": "native llm_format 'huggingface' can only be used with the 'huggingface' model.provider"
      }
    },
    {
      "conditional": {
        "if_match": {
          "one_of": [
            "llm/v1/assistants",
            "llm/v1/files",
            "llm/v1/batches"
          ]
        },
        "then_field": "config.model_name_header",
        "if_field": "config.route_type",
        "then_match": {
          "eq": false
        },
        "then_err": "current route type doesn't have model name thus can't return model_name_header"
      }
    },
    {
      "conditional": {
        "if_match": {
          "eq": "text/generation"
        },
        "then_field": "config.route_type",
        "if_field": "config.genai_category",
        "then_match": {
          "one_of": [
            "llm/v1/chat",
            "llm/v1/completions",
            "llm/v1/responses",
            "llm/v1/assistants",
            "llm/v1/files",
            "llm/v1/batches",
            "preserve"
          ]
        },
        "then_err": "category 'text/generation' cannot be used with this route_type"
      }
    },
    {
      "conditional": {
        "if_match": {
          "eq": "text/embeddings"
        },
        "then_field": "config.route_type",
        "if_field": "config.genai_category",
        "then_match": {
          "eq": "llm/v1/embeddings"
        },
        "then_err": "category 'text/embeddings' cannot be used with this route_type"
      }
    },
    {
      "conditional": {
        "if_match": {
          "eq": "image/generation"
        },
        "then_field": "config.route_type",
        "if_field": "config.genai_category",
        "then_match": {
          "one_of": [
            "image/v1/images/generations",
            "image/v1/images/edits"
          ]
        },
        "then_err": "category 'image/generation' cannot be used with this route_type"
      }
    },
    {
      "conditional": {
        "if_match": {
          "eq": "audio/speech"
        },
        "then_field": "config.route_type",
        "if_field": "config.genai_category",
        "then_match": {
          "one_of": [
            "audio/v1/audio/speech"
          ]
        },
        "then_err": "category 'audio/speech' cannot be used with this route_type"
      }
    },
    {
      "conditional": {
        "if_match": {
          "eq": "audio/transcription"
        },
        "then_field": "config.route_type",
        "if_field": "config.genai_category",
        "then_match": {
          "one_of": [
            "audio/v1/audio/transcriptions",
            "audio/v1/audio/translations"
          ]
        },
        "then_err": "category 'audio/transcription' cannot be used with this route_type"
      }
    }
  ],
  "fields": [
    {
      "protocols": {
        "type": "set",
        "required": true,
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https",
          "ws",
          "wss"
        ],
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https",
            "ws",
            "wss"
          ]
        }
      }
    },
    {
      "config": {
        "type": "record",
        "fields": [
          {
            "route_type": {
              "type": "string",
              "required": true,
              "description": "The model's operation implementation, for this provider. ",
              "one_of": [
                "llm/v1/chat",
                "llm/v1/completions",
                "llm/v1/embeddings",
                "llm/v1/responses",
                "llm/v1/assistants",
                "llm/v1/batches",
                "llm/v1/files",
                "image/v1/images/generations",
                "image/v1/images/edits",
                "audio/v1/audio/transcriptions",
                "audio/v1/audio/speech",
                "audio/v1/audio/translations",
                "realtime/v1/realtime",
                "preserve"
              ]
            }
          },
          {
            "auth": {
              "type": "record",
              "required": false,
              "fields": [
                {
                  "header_name": {
                    "type": "string",
                    "required": false,
                    "description": "If AI model requires authentication via Authorization or API key header, specify its name here.",
                    "referenceable": true
                  }
                },
                {
                  "header_value": {
                    "encrypted": true,
                    "type": "string",
                    "required": false,
                    "description": "Specify the full auth header value for 'header_name', for example 'Bearer key' or just 'key'.",
                    "referenceable": true
                  }
                },
                {
                  "param_name": {
                    "type": "string",
                    "required": false,
                    "description": "If AI model requires authentication via query parameter, specify its name here.",
                    "referenceable": true
                  }
                },
                {
                  "param_value": {
                    "encrypted": true,
                    "type": "string",
                    "required": false,
                    "description": "Specify the full parameter value for 'param_name'.",
                    "referenceable": true
                  }
                },
                {
                  "param_location": {
                    "type": "string",
                    "required": false,
                    "description": "Specify whether the 'param_name' and 'param_value' options go in a query string, or the POST form/JSON body.",
                    "one_of": [
                      "query",
                      "body"
                    ]
                  }
                },
                {
                  "azure_use_managed_identity": {
                    "type": "boolean",
                    "required": false,
                    "description": "Set true to use the Azure Cloud Managed Identity (or user-assigned identity) to authenticate with Azure-provider models.",
                    "default": false
                  }
                },
                {
                  "azure_client_id": {
                    "type": "string",
                    "required": false,
                    "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client ID.",
                    "referenceable": true
                  }
                },
                {
                  "azure_client_secret": {
                    "encrypted": true,
                    "type": "string",
                    "required": false,
                    "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the client secret.",
                    "referenceable": true
                  }
                },
                {
                  "azure_tenant_id": {
                    "type": "string",
                    "required": false,
                    "description": "If azure_use_managed_identity is set to true, and you need to use a different user-assigned identity for this LLM instance, set the tenant ID.",
                    "referenceable": true
                  }
                },
                {
                  "gcp_use_service_account": {
                    "type": "boolean",
                    "required": false,
                    "description": "Use service account auth for GCP-based providers and models.",
                    "default": false
                  }
                },
                {
                  "gcp_service_account_json": {
                    "encrypted": true,
                    "type": "string",
                    "required": false,
                    "description": "Set this field to the full JSON of the GCP service account to authenticate, if required. If null (and gcp_use_service_account is true), Kong will attempt to read from environment variable `GCP_SERVICE_ACCOUNT`.",
                    "referenceable": true
                  }
                },
                {
                  "aws_access_key_id": {
                    "encrypted": true,
                    "type": "string",
                    "required": false,
                    "description": "Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_ACCESS_KEY_ID environment variable for this plugin instance.",
                    "referenceable": true
                  }
                },
                {
                  "aws_secret_access_key": {
                    "encrypted": true,
                    "type": "string",
                    "required": false,
                    "description": "Set this if you are using an AWS provider (Bedrock) and you are authenticating using static IAM User credentials. Setting this will override the AWS_SECRET_ACCESS_KEY environment variable for this plugin instance.",
                    "referenceable": true
                  }
                },
                {
                  "allow_override": {
                    "type": "boolean",
                    "required": false,
                    "description": "If enabled, the authorization header or parameter can be overridden in the request by the value configured in the plugin.",
                    "default": false
                  }
                }
              ]
            }
          },
          {
            "model": {
              "type": "record",
              "required": true,
              "fields": [
                {
                  "provider": {
                    "type": "string",
                    "required": true,
                    "description": "AI provider request format - Kong translates requests to and from the specified backend compatible formats.",
                    "one_of": [
                      "openai",
                      "azure",
                      "anthropic",
                      "cohere",
                      "mistral",
                      "llama2",
                      "gemini",
                      "bedrock",
                      "huggingface"
                    ]
                  }
                },
                {
                  "name": {
                    "type": "string",
                    "required": false,
                    "description": "Model name to execute."
                  }
                },
                {
                  "options": {
                    "type": "record",
                    "required": false,
                    "description": "Key/value settings for the model",
                    "fields": [
                      {
                        "max_tokens": {
                          "type": "integer",
                          "required": false,
                          "description": "Defines the max_tokens, if using chat or completion models."
                        }
                      },
                      {
                        "input_cost": {
                          "type": "number",
                          "required": false,
                          "description": "Defines the cost per 1M tokens in your prompt.",
                          "gt": 0
                        }
                      },
                      {
                        "output_cost": {
                          "type": "number",
                          "required": false,
                          "description": "Defines the cost per 1M tokens in the output of the AI.",
                          "gt": 0
                        }
                      },
                      {
                        "temperature": {
                          "type": "number",
                          "required": false,
                          "description": "Defines the matching temperature, if using chat or completion models.",
                          "between": [
                            0,
                            5
                          ]
                        }
                      },
                      {
                        "top_p": {
                          "type": "number",
                          "required": false,
                          "description": "Defines the top-p probability mass, if supported.",
                          "between": [
                            0,
                            1
                          ]
                        }
                      },
                      {
                        "top_k": {
                          "type": "integer",
                          "required": false,
                          "description": "Defines the top-k most likely tokens, if supported.",
                          "between": [
                            0,
                            500
                          ]
                        }
                      },
                      {
                        "anthropic_version": {
                          "type": "string",
                          "required": false,
                          "description": "Defines the schema/API version, if using Anthropic provider."
                        }
                      },
                      {
                        "azure_instance": {
                          "type": "string",
                          "required": false,
                          "description": "Instance name for Azure OpenAI hosted models."
                        }
                      },
                      {
                        "azure_api_version": {
                          "type": "string",
                          "required": false,
                          "description": "'api-version' for Azure OpenAI instances.",
                          "default": "2023-05-15"
                        }
                      },
                      {
                        "azure_deployment_id": {
                          "type": "string",
                          "required": false,
                          "description": "Deployment ID for Azure OpenAI instances."
                        }
                      },
                      {
                        "llama2_format": {
                          "type": "string",
                          "required": false,
                          "description": "If using llama2 provider, select the upstream message format.",
                          "one_of": [
                            "raw",
                            "openai",
                            "ollama"
                          ]
                        }
                      },
                      {
                        "mistral_format": {
                          "type": "string",
                          "required": false,
                          "description": "If using mistral provider, select the upstream message format.",
                          "one_of": [
                            "openai",
                            "ollama"
                          ]
                        }
                      },
                      {
                        "upstream_url": {
                          "type": "string",
                          "required": false,
                          "description": "Manually specify or override the full URL to the AI operation endpoints, when calling (self-)hosted models, or for running via a private endpoint."
                        }
                      },
                      {
                        "upstream_path": {
                          "type": "string",
                          "required": false,
                          "description": "Manually specify or override the AI operation path, used when e.g. using the 'preserve' route_type.",
                          "deprecation": {
                            "removal_in_version": "4.0",
                            "message": "llm: config.model.options.upstream_path is deprecated, please use config.model.options.upstream_url instead"
                          }
                        }
                      },
                      {
                        "embeddings_dimensions": {
                          "type": "integer",
                          "required": false,
                          "description": "If using embeddings models, set the number of dimensions to generate.",
                          "gt": 0
                        }
                      },
                      {
                        "gemini": {
                          "type": "record",
                          "required": false,
                          "entity_checks": [
                            {
                              "mutually_required": [
                                "api_endpoint",
                                "project_id",
                                "location_id"
                              ]
                            }
                          ],
                          "fields": [
                            {
                              "api_endpoint": {
                                "type": "string",
                                "required": false,
                                "description": "If running Gemini on Vertex, specify the regional API endpoint (hostname only)."
                              }
                            },
                            {
                              "project_id": {
                                "type": "string",
                                "required": false,
                                "description": "If running Gemini on Vertex, specify the project ID."
                              }
                            },
                            {
                              "location_id": {
                                "type": "string",
                                "required": false,
                                "description": "If running Gemini on Vertex, specify the location ID."
                              }
                            }
                          ]
                        }
                      },
                      {
                        "bedrock": {
                          "type": "record",
                          "required": false,
                          "entity_checks": [
                            {
                              "mutually_required": [
                                "aws_assume_role_arn",
                                "aws_role_session_name"
                              ]
                            }
                          ],
                          "fields": [
                            {
                              "aws_region": {
                                "type": "string",
                                "required": false,
                                "description": "If using AWS providers (Bedrock) you can override the `AWS_REGION` environment variable by setting this option."
                              }
                            },
                            {
                              "aws_assume_role_arn": {
                                "type": "string",
                                "required": false,
                                "description": "If using AWS providers (Bedrock) you can assume a different role after authentication with the current IAM context is successful."
                              }
                            },
                            {
                              "aws_role_session_name": {
                                "description": "If using AWS providers (Bedrock), set the identifier of the assumed role session.",
                                "type": "string"
                              }
                            },
                            {
                              "aws_sts_endpoint_url": {
                                "type": "string",
                                "description": "If using AWS providers (Bedrock), override the STS endpoint URL when assuming a different role."
                              }
                            },
                            {
                              "embeddings_normalize": {
                                "type": "boolean",
                                "description": "If using AWS providers (Bedrock), set to true to normalize the embeddings.",
                                "default": false
                              }
                            },
                            {
                              "performance_config_latency": {
                                "type": "string",
                                "required": false,
                                "description": "Force the client's performance configuration 'latency' for all requests. Leave empty to let the consumer select the performance configuration."
                              }
                            }
                          ]
                        }
                      },
                      {
                        "huggingface": {
                          "type": "record",
                          "required": false,
                          "fields": [
                            {
                              "use_cache": {
                                "type": "boolean",
                                "required": false,
                                "description": "Use the cache layer on the inference API"
                              }
                            },
                            {
                              "wait_for_model": {
                                "type": "boolean",
                                "required": false,
                                "description": "Wait for the model if it is not ready"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "cohere": {
                          "type": "record",
                          "required": false,
                          "fields": [
                            {
                              "embedding_input_type": {
                                "one_of": [
                                  "search_document",
                                  "search_query",
                                  "classification",
                                  "clustering",
                                  "image"
                                ],
                                "type": "string",
                                "required": false,
                                "description": "The purpose of the input text to calculate embedding vectors.",
                                "default": "classification"
                              }
                            },
                            {
                              "wait_for_model": {
                                "type": "boolean",
                                "required": false,
                                "description": "Wait for the model if it is not ready"
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          },
          {
            "logging": {
              "type": "record",
              "required": true,
              "fields": [
                {
                  "log_statistics": {
                    "type": "boolean",
                    "required": true,
                    "description": "If enabled and supported by the driver, will add model usage and token metrics into the Kong log plugin(s) output.",
                    "default": false
                  }
                },
                {
                  "log_payloads": {
                    "type": "boolean",
                    "required": true,
                    "description": "If enabled, will log the request and response body into the Kong log plugin(s) output.",
                    "default": false
                  }
                }
              ]
            }
          },
          {
            "response_streaming": {
              "one_of": [
                "allow",
                "deny",
                "always"
              ],
              "type": "string",
              "required": false,
              "description": "Whether to 'optionally allow', 'deny', or 'always' (force) the streaming of answers via server sent events.",
              "default": "allow"
            }
          },
          {
            "max_request_body_size": {
              "type": "integer",
              "default": 8192,
              "description": "max allowed body size allowed to be introspected. 0 means unlimited, but the size of this body will still be limited by Nginx's client_max_body_size.",
              "gt": 0
            }
          },
          {
            "model_name_header": {
              "type": "boolean",
              "description": "Display the model name selected in the X-Kong-LLM-Model response header",
              "default": true
            }
          },
          {
            "llm_format": {
              "one_of": [
                "openai",
                "bedrock",
                "gemini",
                "cohere",
                "huggingface"
              ],
              "type": "string",
              "required": false,
              "description": "LLM input and output format and schema to use",
              "default": "openai"
            }
          },
          {
            "genai_category": {
              "one_of": [
                "text/generation",
                "text/embeddings",
                "audio/transcription",
                "audio/speech",
                "image/generation",
                "video/generation"
              ],
              "type": "string",
              "required": false,
              "description": "Generative AI category of the request",
              "default": "text/generation"
            }
          }
        ],
        "entity_checks": [
          {
            "conditional": {
              "if_match": {
                "one_of": [
                  "bedrock",
                  "gemini"
                ]
              },
              "then_field": "auth.allow_override",
              "if_field": "model.provider",
              "then_match": {
                "eq": false
              },
              "then_err": "bedrock and gemini only support auth.allow_override = false"
            }
          },
          {
            "mutually_required": [
              "auth.header_name",
              "auth.header_value"
            ]
          },
          {
            "mutually_required": [
              "auth.param_name",
              "auth.param_value",
              "auth.param_location"
            ]
          },
          {
            "conditional_at_least_one_of": {
              "if_field": "model.provider",
              "then_at_least_one_of": [
                "model.options.llama2_format"
              ],
              "if_match": {
                "one_of": [
                  "llama2"
                ]
              },
              "then_err": "must set %s for llama2 provider"
            }
          },
          {
            "conditional_at_least_one_of": {
              "if_field": "model.provider",
              "then_at_least_one_of": [
                "model.options.mistral_format"
              ],
              "if_match": {
                "one_of": [
                  "mistral"
                ]
              },
              "then_err": "must set %s for mistral provider"
            }
          },
          {
            "conditional_at_least_one_of": {
              "if_field": "model.provider",
              "then_at_least_one_of": [
                "model.options.anthropic_version"
              ],
              "if_match": {
                "one_of": [
                  "anthropic"
                ]
              },
              "then_err": "must set %s for anthropic provider"
            }
          },
          {
            "conditional_at_least_one_of": {
              "if_field": "model.provider",
              "then_at_least_one_of": [
                "model.options.azure_instance"
              ],
              "if_match": {
                "one_of": [
                  "azure"
                ]
              },
              "then_err": "must set %s for azure provider"
            }
          },
          {
            "conditional_at_least_one_of": {
              "if_field": "model.provider",
              "then_at_least_one_of": [
                "model.options.azure_api_version"
              ],
              "if_match": {
                "one_of": [
                  "azure"
                ]
              },
              "then_err": "must set %s for azure provider"
            }
          },
          {
            "conditional_at_least_one_of": {
              "if_field": "model.provider",
              "then_at_least_one_of": [
                "model.options.azure_deployment_id"
              ],
              "if_match": {
                "one_of": [
                  "azure"
                ]
              },
              "then_err": "must set %s for azure provider"
            }
          },
          {
            "conditional_at_least_one_of": {
              "if_field": "model.provider",
              "then_at_least_one_of": [
                "model.options.upstream_url"
              ],
              "if_match": {
                "one_of": [
                  "llama2"
                ]
              },
              "then_err": "must set %s for self-hosted providers/models"
            }
          },
          {
            "custom_entity_check": {
              "field_sources": [
                "route_type",
                "model",
                "logging"
              ]
            }
          },
          {
            "custom_entity_check": {
              "field_sources": [
                "route_type"
              ]
            }
          },
          {
            "custom_entity_check": {
              "field_sources": [
                "route_type",
                "model"
              ]
            }
          },
          {
            "custom_entity_check": {
              "field_sources": [
                "route_type",
                "model"
              ]
            }
          }
        ],
        "required": true
      }
    }
  ]
}
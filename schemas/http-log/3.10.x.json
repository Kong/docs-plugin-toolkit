{
  "entity_checks": [

  ],
  "fields": [
    {
      "protocols": {
        "elements": {
          "description": "A string representing a protocol, such as HTTP or HTTPS.",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https",
            "tcp",
            "tls",
            "tls_passthrough",
            "udp",
            "ws",
            "wss"
          ],
          "type": "string"
        },
        "description": "A set of strings representing protocols.",
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "type": "set",
        "required": true
      }
    },
    {
      "consumer_group": {
        "reference": "consumer_groups",
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "type": "foreign",
        "eq": null
      }
    },
    {
      "config": {
        "type": "record",
        "fields": [
          {
            "http_endpoint": {
              "type": "string",
              "referenceable": true,
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search.",
              "encrypted": true,
              "required": true
            }
          },
          {
            "method": {
              "description": "An optional method used to send data to the HTTP server. Supported values are `POST` (default), `PUT`, and `PATCH`.",
              "type": "string",
              "default": "POST",
              "one_of": [
                "POST",
                "PUT",
                "PATCH"
              ]
            }
          },
          {
            "content_type": {
              "description": "Indicates the type of data sent. The only available option is `application/json`.",
              "type": "string",
              "default": "application/json",
              "one_of": [
                "application/json",
                "application/json; charset=utf-8"
              ]
            }
          },
          {
            "timeout": {
              "description": "An optional timeout in milliseconds when sending data to the upstream server.",
              "default": 10000,
              "type": "number"
            }
          },
          {
            "keepalive": {
              "description": "An optional value in milliseconds that defines how long an idle connection will live before being closed.",
              "default": 60000,
              "type": "number"
            }
          },
          {
            "retry_count": {
              "description": "Number of times to retry when sending data to the upstream server.",
              "type": "integer",
              "deprecation": {
                "message": "http-log: config.retry_count no longer works, please use config.queue.max_retry_time instead",
                "old_default": 10,
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "queue_size": {
              "description": "Maximum number of log entries to be sent on each message to the upstream server.",
              "type": "integer",
              "deprecation": {
                "message": "http-log: config.queue_size is deprecated, please use config.queue.max_batch_size instead",
                "old_default": 1,
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "flush_timeout": {
              "description": "Optional time in seconds. If `queue_size` > 1, this is the max idle time before sending a log with less than `queue_size` records.",
              "type": "number",
              "deprecation": {
                "message": "http-log: config.flush_timeout is deprecated, please use config.queue.max_coalescing_delay instead",
                "old_default": 2,
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "headers": {
              "description": "An optional table of headers included in the HTTP message to the upstream server. Values are indexed by header name, and each header name accepts a single string.",
              "type": "map",
              "values": {
                "referenceable": true,
                "type": "string"
              },
              "keys": {
                "description": "A string representing an HTTP header name.",
                "type": "string",
                "match_none": [
                  {
                    "err": "cannot contain 'Host' header",
                    "pattern": "^[Hh][Oo][Ss][Tt]$"
                  },
                  {
                    "err": "cannot contain 'Content-Length' header",
                    "pattern": "^[Cc][Oo][Nn][Tt][Ee][Nn][Tt]%-[Ll][Ee][nn][Gg][Tt][Hh]$"
                  },
                  {
                    "err": "cannot contain 'Content-Type' header",
                    "pattern": "^[Cc][Oo][Nn][Tt][Ee][Nn][Tt]%-[Tt][Yy][Pp][Ee]$"
                  }
                ]
              }
            }
          },
          {
            "queue": {
              "type": "record",
              "fields": [
                {
                  "max_batch_size": {
                    "between": [
                      1,
                      1000000
                    ],
                    "default": 1,
                    "type": "integer",
                    "description": "Maximum number of entries that can be processed at a time."
                  }
                },
                {
                  "max_coalescing_delay": {
                    "between": [
                      0,
                      3600
                    ],
                    "default": 1,
                    "type": "number",
                    "description": "Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler."
                  }
                },
                {
                  "max_entries": {
                    "between": [
                      1,
                      1000000
                    ],
                    "default": 10000,
                    "type": "integer",
                    "description": "Maximum number of entries that can be waiting on the queue."
                  }
                },
                {
                  "max_bytes": {
                    "description": "Maximum number of bytes that can be waiting on a queue, requires string content.",
                    "type": "integer"
                  }
                },
                {
                  "max_retry_time": {
                    "description": "Time in seconds before the queue gives up calling a failed handler for a batch.",
                    "default": 60,
                    "type": "number"
                  }
                },
                {
                  "initial_retry_delay": {
                    "between": [
                      0.001,
                      1000000
                    ],
                    "default": 0.01,
                    "type": "number",
                    "description": "Time in seconds before the initial retry is made for a failing batch."
                  }
                },
                {
                  "max_retry_delay": {
                    "description": "Maximum time in seconds between retries, caps exponential backoff.",
                    "default": 60,
                    "type": "number",
                    "between": [
                      0.001,
                      1000000
                    ]
                  }
                },
                {
                  "concurrency_limit": {
                    "description": "The number of of queue delivery timers. -1 indicates unlimited.",
                    "default": 1,
                    "type": "integer",
                    "one_of": [
                      -1,
                      1
                    ]
                  }
                }
              ],
              "required": true
            }
          },
          {
            "custom_fields_by_lua": {
              "description": "Lua code as a key-value map",
              "type": "map",
              "values": {
                "len_min": 1,
                "type": "string"
              },
              "keys": {
                "type": "string",
                "len_min": 1
              }
            }
          }
        ],
        "required": true
      }
    }
  ]
}
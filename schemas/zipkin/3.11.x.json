{
  "fields": [
    {
      "protocols": {
        "required": true,
        "description": "A set of strings representing protocols.",
        "elements": {
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https",
            "tcp",
            "tls",
            "tls_passthrough",
            "udp",
            "ws",
            "wss"
          ],
          "description": "A string representing a protocol, such as HTTP or HTTPS.",
          "type": "string"
        },
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "type": "set"
      }
    },
    {
      "consumer_group": {
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "eq": null,
        "reference": "consumer_groups",
        "type": "foreign"
      }
    },
    {
      "config": {
        "required": true,
        "fields": [
          {
            "local_service_name": {
              "default": "kong",
              "required": true,
              "description": "The name of the service as displayed in Zipkin.",
              "type": "string"
            }
          },
          {
            "http_endpoint": {
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search.",
              "type": "string"
            }
          },
          {
            "sample_ratio": {
              "default": 0.001,
              "between": [
                0,
                1
              ],
              "description": "How often to sample requests that do not contain trace IDs. Set to `0` to turn sampling off, or to `1` to sample **all** requests. ",
              "type": "number"
            }
          },
          {
            "default_service_name": {
              "description": "Set a default service name to override `unknown-service-name` in the Zipkin spans.",
              "type": "string"
            }
          },
          {
            "include_credential": {
              "default": true,
              "required": true,
              "description": "Specify whether the credential of the currently authenticated consumer should be included in metadata sent to the Zipkin server.",
              "type": "boolean"
            }
          },
          {
            "traceid_byte_count": {
              "required": true,
              "description": "The length in bytes of each request's Trace ID.",
              "one_of": [
                8,
                16
              ],
              "default": 16,
              "type": "integer"
            }
          },
          {
            "header_type": {
              "required": true,
              "description": "All HTTP requests going through the plugin are tagged with a tracing HTTP request. This property codifies what kind of tracing header the plugin expects on incoming requests",
              "one_of": [
                "preserve",
                "ignore",
                "b3",
                "b3-single",
                "w3c",
                "jaeger",
                "ot",
                "aws",
                "datadog",
                "gcp",
                "instana"
              ],
              "deprecation": {
                "old_default": "preserve",
                "removal_in_version": "4.0",
                "message": "zipkin: config.header_type is deprecated, please use config.propagation options instead"
              },
              "default": "preserve",
              "type": "string"
            }
          },
          {
            "default_header_type": {
              "required": true,
              "description": "Allows specifying the type of header to be added to requests with no pre-existing tracing headers and when `config.header_type` is set to `\"preserve\"`. When `header_type` is set to any other value, `default_header_type` is ignored.",
              "one_of": [
                "b3",
                "b3-single",
                "w3c",
                "jaeger",
                "ot",
                "aws",
                "datadog",
                "gcp",
                "instana"
              ],
              "deprecation": {
                "old_default": "b3",
                "removal_in_version": "4.0",
                "message": "zipkin: config.default_header_type is deprecated, please use config.propagation.default_format instead"
              },
              "default": "b3",
              "type": "string"
            }
          },
          {
            "tags_header": {
              "default": "Zipkin-Tags",
              "required": true,
              "description": "The Zipkin plugin will add extra headers to the tags associated with any HTTP requests that come with a header named as configured by this property.",
              "type": "string"
            }
          },
          {
            "static_tags": {
              "type": "array",
              "description": "The tags specified on this property will be added to the generated request traces.",
              "elements": {
                "fields": [
                  {
                    "name": {
                      "required": true,
                      "not_one_of": [
                        "error",
                        "http.method",
                        "http.path",
                        "http.status_code",
                        "kong.balancer.state",
                        "kong.balancer.try",
                        "kong.consumer",
                        "kong.credential",
                        "kong.node.id",
                        "kong.route",
                        "kong.service",
                        "lc",
                        "peer.hostname"
                      ],
                      "type": "string"
                    }
                  },
                  {
                    "value": {
                      "required": true,
                      "type": "string"
                    }
                  }
                ],
                "type": "record"
              }
            }
          },
          {
            "http_span_name": {
              "required": true,
              "description": "Specify whether to include the HTTP path in the span name.",
              "one_of": [
                "method",
                "method_path"
              ],
              "default": "method",
              "type": "string"
            }
          },
          {
            "connect_timeout": {
              "default": 2000,
              "between": [
                0,
                2147483646
              ],
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "type": "integer"
            }
          },
          {
            "send_timeout": {
              "default": 5000,
              "between": [
                0,
                2147483646
              ],
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "type": "integer"
            }
          },
          {
            "read_timeout": {
              "default": 5000,
              "between": [
                0,
                2147483646
              ],
              "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
              "type": "integer"
            }
          },
          {
            "http_response_header_for_traceid": {
              "type": "string"
            }
          },
          {
            "phase_duration_flavor": {
              "required": true,
              "description": "Specify whether to include the duration of each phase as an annotation or a tag.",
              "one_of": [
                "annotations",
                "tags"
              ],
              "default": "annotations",
              "type": "string"
            }
          },
          {
            "queue": {
              "required": true,
              "fields": [
                {
                  "max_batch_size": {
                    "default": 1,
                    "between": [
                      1,
                      1000000
                    ],
                    "description": "Maximum number of entries that can be processed at a time.",
                    "type": "integer"
                  }
                },
                {
                  "max_coalescing_delay": {
                    "default": 1,
                    "between": [
                      0,
                      3600
                    ],
                    "description": "Maximum number of (fractional) seconds to elapse after the first entry was queued before the queue starts calling the handler.",
                    "type": "number"
                  }
                },
                {
                  "max_entries": {
                    "default": 10000,
                    "between": [
                      1,
                      1000000
                    ],
                    "description": "Maximum number of entries that can be waiting on the queue.",
                    "type": "integer"
                  }
                },
                {
                  "max_bytes": {
                    "description": "Maximum number of bytes that can be waiting on a queue, requires string content.",
                    "type": "integer"
                  }
                },
                {
                  "max_retry_time": {
                    "default": 60,
                    "description": "Time in seconds before the queue gives up calling a failed handler for a batch.",
                    "type": "number"
                  }
                },
                {
                  "initial_retry_delay": {
                    "default": 0.01,
                    "between": [
                      0.001,
                      1000000
                    ],
                    "description": "Time in seconds before the initial retry is made for a failing batch.",
                    "type": "number"
                  }
                },
                {
                  "max_retry_delay": {
                    "default": 60,
                    "between": [
                      0.001,
                      1000000
                    ],
                    "description": "Maximum time in seconds between retries, caps exponential backoff.",
                    "type": "number"
                  }
                },
                {
                  "concurrency_limit": {
                    "one_of": [
                      -1,
                      1
                    ],
                    "default": 1,
                    "description": "The number of of queue delivery timers. -1 indicates unlimited.",
                    "type": "integer"
                  }
                }
              ],
              "type": "record"
            }
          },
          {
            "propagation": {
              "default": {
                "default_format": "b3"
              },
              "required": true,
              "fields": [
                {
                  "extract": {
                    "type": "array",
                    "description": "Header formats used to extract tracing context from incoming requests. If multiple values are specified, the first one found will be used for extraction. If left empty, Kong will not extract any tracing context information from incoming requests and generate a trace with no parent and a new trace ID.",
                    "elements": {
                      "one_of": [
                        "w3c",
                        "b3",
                        "jaeger",
                        "ot",
                        "datadog",
                        "aws",
                        "gcp",
                        "instana"
                      ],
                      "type": "string"
                    }
                  }
                },
                {
                  "clear": {
                    "type": "array",
                    "description": "Header names to clear after context extraction. This allows to extract the context from a certain header and then remove it from the request, useful when extraction and injection are performed on different header formats and the original header should not be sent to the upstream. If left empty, no headers are cleared.",
                    "elements": {
                      "type": "string"
                    }
                  }
                },
                {
                  "inject": {
                    "type": "array",
                    "description": "Header formats used to inject tracing context. The value `preserve` will use the same header format as the incoming request. If multiple values are specified, all of them will be used during injection. If left empty, Kong will not inject any tracing context information in outgoing requests.",
                    "elements": {
                      "one_of": [
                        "preserve",
                        "w3c",
                        "b3",
                        "b3-single",
                        "jaeger",
                        "ot",
                        "datadog",
                        "aws",
                        "gcp",
                        "instana"
                      ],
                      "type": "string"
                    }
                  }
                },
                {
                  "default_format": {
                    "one_of": [
                      "w3c",
                      "b3",
                      "b3-single",
                      "jaeger",
                      "ot",
                      "datadog",
                      "aws",
                      "gcp",
                      "instana"
                    ],
                    "required": true,
                    "description": "The default header format to use when extractors did not match any format in the incoming headers and `inject` is configured with the value: `preserve`. This can happen when no tracing header was found in the request, or the incoming tracing header formats were not included in `extract`.",
                    "type": "string"
                  }
                }
              ],
              "type": "record"
            }
          }
        ],
        "type": "record"
      }
    }
  ],
  "entity_checks": [

  ]
}
{
  "fields": [
    {
      "consumer": {
        "reference": "consumers",
        "eq": null,
        "type": "foreign"
      }
    },
    {
      "protocols": {
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "required": true,
        "type": "set"
      }
    },
    {
      "config": {
        "required": true,
        "fields": [
          {
            "scopes": {
              "type": "array",
              "elements": {
                "type": "string"
              },
              "examples": [
                [
                  "email",
                  "phone",
                  "address"
                ]
              ],
              "description": "Describes an array of scope names that will be available to the end user. If `mandatory_scope` is\nset to `true`, then `scopes` are required."
            }
          },
          {
            "mandatory_scope": {
              "type": "boolean",
              "default": false,
              "required": true,
              "examples": [
                true
              ],
              "description": "An optional boolean value telling the plugin to require at least one `scope` to be authorized by the end user."
            }
          },
          {
            "provision_key": {
              "type": "string",
              "auto": true,
              "encrypted": true,
              "required": true,
              "unique": true,
              "examples": [
                "<autogenerated>"
              ],
              "description": "The unique key the plugin has generated when it has been added to the Service."
            }
          },
          {
            "token_expiration": {
              "type": "number",
              "default": 7200,
              "required": true,
              "description": "An optional integer value telling the plugin how many seconds a token should last, after which the client will\nneed to refresh the token. Set to `0` to disable the expiration."
            }
          },
          {
            "enable_authorization_code": {
              "type": "boolean",
              "default": false,
              "required": true,
              "examples": [
                true
              ],
              "description": "An optional boolean value to enable the three-legged Authorization Code flow ([RFC 6742 Section 4.1](https://tools.ietf.org/html/rfc6749#section-4.1))."
            }
          },
          {
            "enable_implicit_grant": {
              "type": "boolean",
              "default": false,
              "required": true,
              "description": "An optional boolean value to enable the Implicit Grant flow which allows to provision a token as a result of the authorization process ([RFC 6742 Section 4.2](https://tools.ietf.org/html/rfc6749#section-4.2))."
            }
          },
          {
            "enable_client_credentials": {
              "type": "boolean",
              "default": false,
              "required": true,
              "description": "An optional boolean value to enable the Client Credentials Grant flow ([RFC 6742 Section 4.4](https://tools.ietf.org/html/rfc6749#section-4.4))."
            }
          },
          {
            "enable_password_grant": {
              "type": "boolean",
              "default": false,
              "required": true,
              "description": "An optional boolean value to enable the Resource Owner Password Credentials Grant flow ([RFC 6742 Section 4.3](https://tools.ietf.org/html/rfc6749#section-4.3))."
            }
          },
          {
            "hide_credentials": {
              "type": "boolean",
              "default": false,
              "required": true,
              "description": "An optional boolean value telling the plugin to show or hide the credential from the upstream service.\nIf `true`, the plugin will strip the credential from the request (the header containing the client credentials)\nbefore proxying it."
            }
          },
          {
            "accept_http_if_already_terminated": {
              "type": "boolean",
              "default": false,
              "required": true,
              "description": "Accepts HTTPs requests that have already been terminated by a proxy or load balancer and the\n`x-forwarded-proto: https` header has been added to the request. Only enable this option\nif the Kong server cannot be publicly accessed and the only entry point is such proxy or load balancer."
            }
          },
          {
            "anonymous": {
              "type": "string",
              "description": "An optional string (consumer UUID) value to use as an anonymous consumer if authentication fails.\nIf empty (default), the request fails with an authentication failure `4xx`. Note that this value\nmust refer to the consumer `id` attribute that is internal to Kong Gateway, and **not** its `custom_id`."
            }
          },
          {
            "global_credentials": {
              "type": "boolean",
              "default": false,
              "required": true,
              "description": "An optional boolean value that allows using the same OAuth credentials generated by the plugin with\nany other Service whose OAuth 2.0 plugin configuration also has `config.global_credentials=true`."
            }
          },
          {
            "auth_header_name": {
              "type": "string",
              "default": "authorization",
              "description": "The name of the header that is supposed to carry the access token. Default: `authorization`."
            }
          },
          {
            "refresh_token_ttl": {
              "type": "number",
              "default": 1209600,
              "required": true,
              "description": "An optional integer value telling the plugin how many seconds a token/refresh token pair is valid for,\nand can be used to generate a new access token. Default value is 2 weeks. Set to `0` to keep the token/refresh\ntoken pair valid indefinitely."
            }
          },
          {
            "reuse_refresh_token": {
              "type": "boolean",
              "default": false,
              "required": true,
              "description": "An optional boolean value that indicates whether an OAuth refresh token is\nreused when refreshing an access token."
            }
          },
          {
            "persistent_refresh_token": {
              "type": "boolean",
              "default": false,
              "required": true
            }
          },
          {
            "pkce": {
              "type": "string",
              "one_of": [
                "none",
                "lax",
                "strict"
              ],
              "default": "lax",
              "required": false,
              "description": "Specifies a mode of how the Proof Key for Code Exchange (PKCE) should be\nhandled by the plugin. The possible modes are `none`, `lax`, and `strict`.\nThe `strict` mode enforces PKCE on both authorization and token endpoints for\nall the clients. The `lax` mode enforces PKCE for public clients, but it does\nnot enforce it for confidential clients. The `none` mode does not enforce PKCE\non any client. In any case, if a client asks for PKCE on authorization\nendpoint, the PKCE is also enforced on token endpoint."
            }
          }
        ],
        "entity_checks": [
          {
            "conditional": {
              "then_match": {
                "required": true
              },
              "if_match": {
                "eq": true
              },
              "then_field": "scopes",
              "if_field": "mandatory_scope"
            }
          }
        ],
        "type": "record"
      }
    }
  ]
}
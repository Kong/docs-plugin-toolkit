{
  "entity_checks": [
    {
      "custom_entity_check": {
        "field_sources": [
          "config"
        ]
      }
    }
  ],
  "fields": [
    {
      "consumer": {
        "eq": null,
        "reference": "consumers",
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "type": "foreign"
      }
    },
    {
      "protocols": {
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": true,
        "description": "A set of strings representing HTTP protocols.",
        "type": "set"
      }
    },
    {
      "consumer_group": {
        "eq": null,
        "reference": "consumer_groups",
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "type": "foreign"
      }
    },
    {
      "config": {
        "type": "record",
        "required": true,
        "fields": [
          {
            "assertion_consumer_path": {
              "match_none": [
                {
                  "pattern": "//",
                  "err": "must not have empty segments"
                }
              ],
              "starts_with": "/",
              "type": "string",
              "required": true,
              "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes)."
            }
          },
          {
            "idp_sso_url": {
              "type": "string",
              "required": true,
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
            }
          },
          {
            "idp_certificate": {
              "encrypted": true,
              "type": "string",
              "required": false,
              "description": "The public certificate provided by the IdP. This is used to validate responses from the IdP.  Only include the contents of the certificate. Do not include the header (`BEGIN CERTIFICATE`) and footer (`END CERTIFICATE`) lines.",
              "referenceable": true
            }
          },
          {
            "response_encryption_key": {
              "encrypted": true,
              "type": "string",
              "required": false,
              "description": "The private encryption key required to decrypt encrypted assertions.",
              "referenceable": true
            }
          },
          {
            "request_signing_key": {
              "encrypted": true,
              "type": "string",
              "required": false,
              "description": "The private key for signing requests.  If this parameter is set, requests sent to the IdP are signed.  The `request_signing_certificate` parameter must be set as well.",
              "referenceable": true
            }
          },
          {
            "request_signing_certificate": {
              "encrypted": true,
              "type": "string",
              "required": false,
              "description": "The certificate for signing requests.",
              "referenceable": true
            }
          },
          {
            "request_signature_algorithm": {
              "one_of": [
                "SHA256",
                "SHA384",
                "SHA512"
              ],
              "type": "string",
              "required": false,
              "description": "The signature algorithm for signing Authn requests. Options available are: - `SHA256` - `SHA384` - `SHA512`",
              "default": "SHA256"
            }
          },
          {
            "request_digest_algorithm": {
              "one_of": [
                "SHA256",
                "SHA1"
              ],
              "type": "string",
              "required": false,
              "description": "The digest algorithm for Authn requests: - `SHA256` - `SHA1`",
              "default": "SHA256"
            }
          },
          {
            "response_signature_algorithm": {
              "one_of": [
                "SHA256",
                "SHA384",
                "SHA512"
              ],
              "type": "string",
              "required": false,
              "description": "The algorithm for validating signatures in SAML responses. Options available are: - `SHA256` - `SHA384` - `SHA512`",
              "default": "SHA256"
            }
          },
          {
            "response_digest_algorithm": {
              "one_of": [
                "SHA256",
                "SHA1"
              ],
              "type": "string",
              "required": false,
              "description": "The algorithm for verifying digest in SAML responses: - `SHA256` - `SHA1`",
              "default": "SHA256"
            }
          },
          {
            "issuer": {
              "type": "string",
              "required": true,
              "description": "The unique identifier of the IdP application. Formatted as a URL containing information about the IdP so the SP can validate that the SAML assertions it receives are issued from the correct IdP."
            }
          },
          {
            "nameid_format": {
              "one_of": [
                "Unspecified",
                "EmailAddress",
                "Persistent",
                "Transient"
              ],
              "type": "string",
              "required": false,
              "description": "The requested `NameId` format. Options available are: - `Unspecified` - `EmailAddress` - `Persistent` - `Transient`",
              "default": "EmailAddress"
            }
          },
          {
            "validate_assertion_signature": {
              "type": "boolean",
              "required": false,
              "description": "Enable signature validation for SAML responses.",
              "default": true
            }
          },
          {
            "anonymous": {
              "type": "string",
              "required": false,
              "description": "An optional string (consumer UUID or username) value to use as an “anonymous” consumer. If not set, a Kong Consumer must exist for the SAML IdP user credentials, mapping the username format to the Kong Consumer username."
            }
          },
          {
            "session_secret": {
              "referenceable": true,
              "encrypted": true,
              "match": "^[0-9a-zA-Z/_+]+$",
              "len_max": 32,
              "type": "string",
              "required": true,
              "description": "The session secret. This must be a random string of 32 characters from the base64 alphabet (letters, numbers, `/`, `_` and `+`). It is used as the secret key for encrypting session data as well as state information that is sent to the IdP in the authentication exchange.",
              "len_min": 32
            }
          },
          {
            "session_audience": {
              "type": "string",
              "required": false,
              "description": "The session audience, for example \"my-application\"",
              "default": "default"
            }
          },
          {
            "session_cookie_name": {
              "type": "string",
              "required": false,
              "description": "The session cookie name.",
              "default": "session"
            }
          },
          {
            "session_remember": {
              "type": "boolean",
              "required": false,
              "description": "Enables or disables persistent sessions",
              "default": false
            }
          },
          {
            "session_remember_cookie_name": {
              "type": "string",
              "required": false,
              "description": "Persistent session cookie name",
              "default": "remember"
            }
          },
          {
            "session_remember_rolling_timeout": {
              "type": "number",
              "required": false,
              "description": "Persistent session rolling timeout in seconds.",
              "default": 604800
            }
          },
          {
            "session_remember_absolute_timeout": {
              "type": "number",
              "required": false,
              "description": "Persistent session absolute timeout in seconds.",
              "default": 2592000
            }
          },
          {
            "session_idling_timeout": {
              "type": "number",
              "required": false,
              "description": "The session cookie idle time in seconds.",
              "default": 900
            }
          },
          {
            "session_rolling_timeout": {
              "type": "number",
              "required": false,
              "description": "The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.",
              "default": 3600
            }
          },
          {
            "session_absolute_timeout": {
              "type": "number",
              "required": false,
              "description": "The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.",
              "default": 86400
            }
          },
          {
            "session_cookie_path": {
              "match_none": [
                {
                  "pattern": "//",
                  "err": "must not have empty segments"
                }
              ],
              "starts_with": "/",
              "default": "/",
              "required": false,
              "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).",
              "type": "string"
            }
          },
          {
            "session_cookie_domain": {
              "type": "string",
              "required": false,
              "description": "The session cookie domain flag."
            }
          },
          {
            "session_cookie_same_site": {
              "one_of": [
                "Strict",
                "Lax",
                "None",
                "Default"
              ],
              "type": "string",
              "required": false,
              "description": "Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks.",
              "default": "Lax"
            }
          },
          {
            "session_cookie_http_only": {
              "type": "boolean",
              "required": false,
              "description": "Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.",
              "default": true
            }
          },
          {
            "session_cookie_secure": {
              "type": "boolean",
              "required": false,
              "description": "The cookie is only sent to the server when a request is made with the https:scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks."
            }
          },
          {
            "session_request_headers": {
              "type": "set",
              "elements": {
                "type": "string",
                "one_of": [
                  "id",
                  "audience",
                  "subject",
                  "timeout",
                  "idling-timeout",
                  "rolling-timeout",
                  "absolute-timeout"
                ]
              }
            }
          },
          {
            "session_response_headers": {
              "type": "set",
              "elements": {
                "type": "string",
                "one_of": [
                  "id",
                  "audience",
                  "subject",
                  "timeout",
                  "idling-timeout",
                  "rolling-timeout",
                  "absolute-timeout"
                ]
              }
            }
          },
          {
            "session_storage": {
              "one_of": [
                "cookie",
                "memcache",
                "memcached",
                "redis"
              ],
              "type": "string",
              "required": false,
              "description": "The session storage for session data: - `cookie`: stores session data with the session cookie. The session cannot be invalidated or revoked without changing the session secret, but is stateless, and doesn't require a database. - `memcached`: stores session data in memcached - `redis`: stores session data in Redis",
              "default": "cookie"
            }
          },
          {
            "session_store_metadata": {
              "type": "boolean",
              "required": false,
              "description": "Configures whether or not session metadata should be stored. This includes information about the active sessions for the `specific_audience` belonging to a specific subject.",
              "default": false
            }
          },
          {
            "session_enforce_same_subject": {
              "type": "boolean",
              "required": false,
              "description": "When set to `true`, audiences are forced to share the same subject.",
              "default": false
            }
          },
          {
            "session_hash_subject": {
              "type": "boolean",
              "required": false,
              "description": "When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.",
              "default": false
            }
          },
          {
            "session_hash_storage_key": {
              "type": "boolean",
              "required": false,
              "description": "When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.",
              "default": false
            }
          },
          {
            "session_memcached_prefix": {
              "type": "string",
              "required": false,
              "description": "The memcached session key prefix."
            }
          },
          {
            "session_memcached_socket": {
              "type": "string",
              "required": false,
              "description": "The memcached unix socket path."
            }
          },
          {
            "session_memcached_host": {
              "type": "string",
              "required": false,
              "description": "The memcached host.",
              "default": "127.0.0.1"
            }
          },
          {
            "session_memcached_port": {
              "between": [
                0,
                65535
              ],
              "default": 11211,
              "required": false,
              "description": "An integer representing a port number between 0 and 65535, inclusive.",
              "type": "integer"
            }
          },
          {
            "redis": {
              "fields": [
                {
                  "host": {
                    "default": "127.0.0.1",
                    "description": "A string representing a host name, such as example.com.",
                    "type": "string"
                  }
                },
                {
                  "port": {
                    "default": 6379,
                    "type": "integer",
                    "description": "An integer representing a port number between 0 and 65535, inclusive.",
                    "between": [
                      0,
                      65535
                    ]
                  }
                },
                {
                  "connect_timeout": {
                    "default": 2000,
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                    "between": [
                      0,
                      2147483646
                    ]
                  }
                },
                {
                  "send_timeout": {
                    "default": 2000,
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                    "between": [
                      0,
                      2147483646
                    ]
                  }
                },
                {
                  "read_timeout": {
                    "default": 2000,
                    "type": "integer",
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                    "between": [
                      0,
                      2147483646
                    ]
                  }
                },
                {
                  "username": {
                    "type": "string",
                    "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.",
                    "referenceable": true
                  }
                },
                {
                  "password": {
                    "type": "string",
                    "encrypted": true,
                    "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.",
                    "referenceable": true
                  }
                },
                {
                  "sentinel_username": {
                    "type": "string",
                    "description": "Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.",
                    "referenceable": true
                  }
                },
                {
                  "sentinel_password": {
                    "type": "string",
                    "encrypted": true,
                    "description": "Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.",
                    "referenceable": true
                  }
                },
                {
                  "database": {
                    "type": "integer",
                    "description": "Database to use for the Redis connection when using the `redis` strategy",
                    "default": 0
                  }
                },
                {
                  "keepalive_pool_size": {
                    "type": "integer",
                    "default": 256,
                    "description": "The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.",
                    "between": [
                      1,
                      2147483646
                    ]
                  }
                },
                {
                  "keepalive_backlog": {
                    "type": "integer",
                    "description": "Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.",
                    "between": [
                      0,
                      2147483646
                    ]
                  }
                },
                {
                  "sentinel_master": {
                    "description": "Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.",
                    "type": "string"
                  }
                },
                {
                  "sentinel_role": {
                    "type": "string",
                    "description": "Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.",
                    "one_of": [
                      "master",
                      "slave",
                      "any"
                    ]
                  }
                },
                {
                  "sentinel_nodes": {
                    "len_min": 1,
                    "type": "array",
                    "required": false,
                    "description": "Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.",
                    "elements": {
                      "type": "record",
                      "fields": [
                        {
                          "host": {
                            "type": "string",
                            "required": true,
                            "description": "A string representing a host name, such as example.com.",
                            "default": "127.0.0.1"
                          }
                        },
                        {
                          "port": {
                            "default": 6379,
                            "type": "integer",
                            "description": "An integer representing a port number between 0 and 65535, inclusive.",
                            "between": [
                              0,
                              65535
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "cluster_nodes": {
                    "len_min": 1,
                    "type": "array",
                    "required": false,
                    "description": "Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.",
                    "elements": {
                      "type": "record",
                      "fields": [
                        {
                          "ip": {
                            "type": "string",
                            "required": true,
                            "description": "A string representing a host name, such as example.com.",
                            "default": "127.0.0.1"
                          }
                        },
                        {
                          "port": {
                            "default": 6379,
                            "type": "integer",
                            "description": "An integer representing a port number between 0 and 65535, inclusive.",
                            "between": [
                              0,
                              65535
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "ssl": {
                    "type": "boolean",
                    "required": false,
                    "description": "If set to true, uses SSL to connect to Redis.",
                    "default": false
                  }
                },
                {
                  "ssl_verify": {
                    "type": "boolean",
                    "required": false,
                    "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.",
                    "default": false
                  }
                },
                {
                  "server_name": {
                    "type": "string",
                    "required": false,
                    "description": "A string representing an SNI (server name indication) value for TLS."
                  }
                },
                {
                  "cluster_max_redirections": {
                    "type": "integer",
                    "required": false,
                    "description": "Maximum retry attempts for redirection.",
                    "default": 5
                  }
                },
                {
                  "connection_is_proxied": {
                    "type": "boolean",
                    "required": false,
                    "description": "If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.",
                    "default": false
                  }
                },
                {
                  "prefix": {
                    "type": "string",
                    "required": false,
                    "description": "The Redis session key prefix."
                  }
                },
                {
                  "socket": {
                    "type": "string",
                    "required": false,
                    "description": "The Redis unix socket path."
                  }
                }
              ],
              "entity_checks": [
                {
                  "mutually_required": [
                    "host",
                    "port"
                  ]
                },
                {
                  "mutually_required": [
                    "sentinel_master",
                    "sentinel_role",
                    "sentinel_nodes"
                  ]
                },
                {
                  "mutually_required": [
                    "connect_timeout",
                    "send_timeout",
                    "read_timeout"
                  ]
                },
                {
                  "conditional": {
                    "if_field": "connection_is_proxied",
                    "then_match": {
                      "required": true
                    },
                    "if_match": {
                      "eq": true
                    },
                    "then_field": "host"
                  }
                },
                {
                  "custom_entity_check": {
                    "run_with_missing_fields": true,
                    "field_sources": [
                      "database",
                      "connection_is_proxied"
                    ]
                  }
                },
                {
                  "custom_entity_check": {
                    "run_with_missing_fields": true,
                    "field_sources": [
                      "cluster_nodes",
                      "connection_is_proxied"
                    ]
                  }
                },
                {
                  "custom_entity_check": {
                    "run_with_missing_fields": true,
                    "field_sources": [
                      "sentinel_role",
                      "connection_is_proxied"
                    ]
                  }
                }
              ],
              "required": true,
              "type": "record",
              "shorthand_fields": [
                {
                  "timeout": {
                    "type": "integer",
                    "deprecation": {
                      "replaced_with": [
                        {
                          "path": [
                            "connect_timeout"
                          ]
                        },
                        {
                          "path": [
                            "send_timeout"
                          ]
                        },
                        {
                          "path": [
                            "read_timeout"
                          ]
                        }
                      ],
                      "removal_in_version": "4.0",
                      "message": "redis schema field `timeout` is deprecated, use `connect_timeout`, `send_timeout` and `read_timeout`"
                    }
                  }
                },
                {
                  "sentinel_addresses": {
                    "type": "array",
                    "deprecation": {
                      "replaced_with": [
                        {
                          "path": [
                            "sentinel_nodes"
                          ]
                        }
                      ],
                      "removal_in_version": "4.0",
                      "message": "sentinel_addresses is deprecated, please use sentinel_nodes instead"
                    },
                    "len_min": 1,
                    "elements": {
                      "type": "string"
                    }
                  }
                },
                {
                  "cluster_addresses": {
                    "type": "array",
                    "deprecation": {
                      "replaced_with": [
                        {
                          "path": [
                            "cluster_nodes"
                          ]
                        }
                      ],
                      "removal_in_version": "4.0",
                      "message": "cluster_addresses is deprecated, please use cluster_nodes instead"
                    },
                    "len_min": 1,
                    "elements": {
                      "type": "string"
                    }
                  }
                }
              ]
            }
          }
        ],
        "shorthand_fields": [
          {
            "session_cookie_lifetime": {
              "type": "number",
              "deprecation": {
                "removal_in_version": "4.0",
                "message": "openid-connect: config.session_cookie_lifetime is deprecated, please use config.session_rolling_timeout instead"
              }
            }
          },
          {
            "session_cookie_idletime": {
              "type": "number",
              "deprecation": {
                "removal_in_version": "4.0",
                "message": "openid-connect: config.session_cookie_idletime is deprecated, please use config.session_idling_timeout instead"
              }
            }
          },
          {
            "session_cookie_samesite": {
              "type": "string",
              "deprecation": {
                "removal_in_version": "4.0",
                "message": "openid-connect: config.session_cookie_samesite is deprecated, please use config.session_cookie_same_site instead"
              }
            }
          },
          {
            "session_cookie_httponly": {
              "type": "boolean",
              "deprecation": {
                "removal_in_version": "4.0",
                "message": "openid-connect: config.session_cookie_httponly is deprecated, please use config.session_cookie_http_only instead"
              }
            }
          },
          {
            "session_memcache_prefix": {
              "type": "string",
              "deprecation": {
                "removal_in_version": "4.0",
                "message": "openid-connect: config.session_memcache_prefix is deprecated, please use config.session_memcached_prefix instead"
              }
            }
          },
          {
            "session_memcache_socket": {
              "type": "string",
              "deprecation": {
                "removal_in_version": "4.0",
                "message": "openid-connect: config.session_memcache_socket is deprecated, please use config.session_memcached_socket instead"
              }
            }
          },
          {
            "session_memcache_host": {
              "type": "string",
              "deprecation": {
                "removal_in_version": "4.0",
                "message": "openid-connect: config.session_memcache_host is deprecated, please use config.session_memcached_host instead"
              }
            }
          },
          {
            "session_memcache_port": {
              "type": "integer",
              "deprecation": {
                "removal_in_version": "4.0",
                "message": "openid-connect: config.session_memcache_port is deprecated, please use config.session_memcached_port instead"
              }
            }
          },
          {
            "session_cookie_renew": {
              "type": "number",
              "deprecation": {
                "removal_in_version": "4.0",
                "message": "openid-connect: config.session_cookie_renew option does not exist anymore"
              }
            }
          },
          {
            "session_cookie_maxsize": {
              "type": "integer",
              "deprecation": {
                "removal_in_version": "4.0",
                "message": "openid-connect: config.session_cookie_maxsize option does not exist anymore"
              }
            }
          },
          {
            "session_strategy": {
              "type": "string",
              "deprecation": {
                "removal_in_version": "4.0",
                "message": "openid-connect: config.session_strategy option does not exist anymore"
              }
            }
          },
          {
            "session_compressor": {
              "type": "string",
              "deprecation": {
                "removal_in_version": "4.0",
                "message": "openid-connect: config.session_compressor option does not exist anymore"
              }
            }
          },
          {
            "session_auth_ttl": {
              "type": "number",
              "deprecation": {
                "removal_in_version": "4.0",
                "message": "openid-connect: config.session_auth_ttl option does not exist anymore"
              }
            }
          },
          {
            "session_redis_prefix": {
              "type": "string",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "prefix"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_prefix is deprecated, please use config.redis.prefix instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_socket": {
              "type": "string",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "socket"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_socket is deprecated, please use config.redis.socket instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_host": {
              "type": "string",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "host"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_host is deprecated, please use config.redis.host instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_port": {
              "type": "integer",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "port"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_port is deprecated, please use config.redis.port instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_username": {
              "type": "string",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "username"
                    ]
                  }
                ],
                "message": "saml: config.redis_host is deprecated, please use config.redis.host instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_password": {
              "type": "string",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "password"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_password is deprecated, please use config.redis.password instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_connect_timeout": {
              "type": "integer",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "connect_timeout"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_connect_timeout is deprecated, please use config.redis.connect_timeout instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_read_timeout": {
              "type": "integer",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "read_timeout"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_read_timeout is deprecated, please use config.redis.read_timeout instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_send_timeout": {
              "type": "integer",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "send_timeout"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_send_timeout is deprecated, please use config.redis.send_timeout instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_ssl": {
              "type": "boolean",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "ssl"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_ssl is deprecated, please use config.redis.ssl instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_ssl_verify": {
              "type": "boolean",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "ssl_verify"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_ssl_verify is deprecated, please use config.redis.ssl_verify instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_server_name": {
              "type": "string",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "server_name"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_server_name is deprecated, please use config.redis.server_name instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_cluster_nodes": {
              "type": "array",
              "elements": {
                "type": "record",
                "fields": [
                  {
                    "ip": {
                      "default": "127.0.0.1",
                      "required": true,
                      "description": "A string representing a host name, such as example.com.",
                      "type": "string"
                    }
                  },
                  {
                    "port": {
                      "default": 6379,
                      "type": "integer",
                      "description": "An integer representing a port number between 0 and 65535, inclusive.",
                      "between": [
                        0,
                        65535
                      ]
                    }
                  }
                ]
              },
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "cluster_nodes"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_cluster_nodes is deprecated, please use config.redis.cluster_nodes instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_cluster_max_redirections": {
              "type": "integer",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "cluster_max_redirections"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_cluster_max_redirections is deprecated, please use config.redis.cluster_max_redirections instead",
                "removal_in_version": "4.0"
              }
            }
          },
          {
            "session_redis_cluster_maxredirections": {
              "type": "integer",
              "deprecation": {
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "cluster_max_redirections"
                    ]
                  }
                ],
                "message": "saml: config.session_redis_cluster_maxredirections is deprecated, please use config.redis.cluster_max_redirections instead",
                "removal_in_version": "4.0"
              }
            }
          }
        ]
      }
    }
  ],
  "supported_partials": {
    "redis-ee": [
      "config.redis"
    ]
  }
}
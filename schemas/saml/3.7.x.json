{
  "fields": [
    {
      "consumer": {
        "type": "foreign",
        "reference": "consumers",
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "eq": null
      }
    },
    {
      "protocols": {
        "type": "set",
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "required": true,
        "description": "A set of strings representing HTTP protocols."
      }
    },
    {
      "consumer_group": {
        "type": "foreign",
        "reference": "consumer_groups",
        "description": "Custom type for representing a foreign key with a null value allowed.",
        "eq": null
      }
    },
    {
      "config": {
        "type": "record",
        "fields": [
          {
            "assertion_consumer_path": {
              "type": "string",
              "required": true,
              "match_none": [
                {
                  "pattern": "//",
                  "err": "must not have empty segments"
                }
              ],
              "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).",
              "starts_with": "/"
            }
          },
          {
            "idp_sso_url": {
              "type": "string",
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search.",
              "required": true
            }
          },
          {
            "idp_certificate": {
              "referenceable": true,
              "required": false,
              "encrypted": true,
              "type": "string",
              "description": "The public certificate provided by the IdP. This is used to validate responses from the IdP.  Only include the contents of the certificate. Do not include the header (`BEGIN CERTIFICATE`) and footer (`END CERTIFICATE`) lines."
            }
          },
          {
            "response_encryption_key": {
              "referenceable": true,
              "required": false,
              "encrypted": true,
              "type": "string",
              "description": "The private encryption key required to decrypt encrypted assertions."
            }
          },
          {
            "request_signing_key": {
              "referenceable": true,
              "required": false,
              "encrypted": true,
              "type": "string",
              "description": "The private key for signing requests.  If this parameter is set, requests sent to the IdP are signed.  The `request_signing_certificate` parameter must be set as well."
            }
          },
          {
            "request_signing_certificate": {
              "referenceable": true,
              "required": false,
              "encrypted": true,
              "type": "string",
              "description": "The certificate for signing requests."
            }
          },
          {
            "request_signature_algorithm": {
              "type": "string",
              "default": "SHA256",
              "required": false,
              "description": "The signature algorithm for signing Authn requests. Options available are: - `SHA256` - `SHA384` - `SHA512`",
              "one_of": [
                "SHA256",
                "SHA384",
                "SHA512"
              ]
            }
          },
          {
            "request_digest_algorithm": {
              "type": "string",
              "default": "SHA256",
              "required": false,
              "description": "The digest algorithm for Authn requests: - `SHA256` - `SHA1`",
              "one_of": [
                "SHA256",
                "SHA1"
              ]
            }
          },
          {
            "response_signature_algorithm": {
              "type": "string",
              "default": "SHA256",
              "required": false,
              "description": "The algorithm for validating signatures in SAML responses. Options available are: - `SHA256` - `SHA384` - `SHA512`",
              "one_of": [
                "SHA256",
                "SHA384",
                "SHA512"
              ]
            }
          },
          {
            "response_digest_algorithm": {
              "type": "string",
              "default": "SHA256",
              "required": false,
              "description": "The algorithm for verifying digest in SAML responses: - `SHA256` - `SHA1`",
              "one_of": [
                "SHA256",
                "SHA1"
              ]
            }
          },
          {
            "issuer": {
              "type": "string",
              "description": "The unique identifier of the IdP application. Formatted as a URL containing information about the IdP so the SP can validate that the SAML assertions it receives are issued from the correct IdP.",
              "required": true
            }
          },
          {
            "nameid_format": {
              "type": "string",
              "default": "EmailAddress",
              "required": false,
              "description": "The requested `NameId` format. Options available are: - `Unspecified` - `EmailAddress` - `Persistent` - `Transient`",
              "one_of": [
                "Unspecified",
                "EmailAddress",
                "Persistent",
                "Transient"
              ]
            }
          },
          {
            "validate_assertion_signature": {
              "type": "boolean",
              "description": "Enable signature validation for SAML responses.",
              "default": true,
              "required": false
            }
          },
          {
            "anonymous": {
              "type": "string",
              "description": "An optional string (consumer UUID or username) value to use as an “anonymous” consumer. If not set, a Kong Consumer must exist for the SAML IdP user credentials, mapping the username format to the Kong Consumer username.",
              "required": false
            }
          },
          {
            "session_secret": {
              "len_max": 32,
              "referenceable": true,
              "match": "^[0-9a-zA-Z/_+]+$",
              "required": true,
              "encrypted": true,
              "description": "The session secret. This must be a random string of 32 characters from the base64 alphabet (letters, numbers, `/`, `_` and `+`). It is used as the secret key for encrypting session data as well as state information that is sent to the IdP in the authentication exchange.",
              "type": "string",
              "len_min": 32
            }
          },
          {
            "session_audience": {
              "type": "string",
              "description": "The session audience, for example \"my-application\"",
              "default": "default",
              "required": false
            }
          },
          {
            "session_cookie_name": {
              "type": "string",
              "description": "The session cookie name.",
              "default": "session",
              "required": false
            }
          },
          {
            "session_remember": {
              "type": "boolean",
              "description": "Enables or disables persistent sessions",
              "default": false,
              "required": false
            }
          },
          {
            "session_remember_cookie_name": {
              "type": "string",
              "description": "Persistent session cookie name",
              "default": "remember",
              "required": false
            }
          },
          {
            "session_remember_rolling_timeout": {
              "type": "number",
              "description": "Persistent session rolling timeout in seconds.",
              "default": 604800,
              "required": false
            }
          },
          {
            "session_remember_absolute_timeout": {
              "type": "number",
              "description": "Persistent session absolute timeout in seconds.",
              "default": 2592000,
              "required": false
            }
          },
          {
            "session_idling_timeout": {
              "type": "number",
              "description": "The session cookie idle time in seconds.",
              "default": 900,
              "required": false
            }
          },
          {
            "session_rolling_timeout": {
              "type": "number",
              "description": "The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.",
              "default": 3600,
              "required": false
            }
          },
          {
            "session_absolute_timeout": {
              "type": "number",
              "description": "The session cookie absolute timeout in seconds. Specifies how long the session can be used until it is no longer valid.",
              "default": 86400,
              "required": false
            }
          },
          {
            "session_cookie_path": {
              "type": "string",
              "default": "/",
              "required": false,
              "match_none": [
                {
                  "pattern": "//",
                  "err": "must not have empty segments"
                }
              ],
              "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes).",
              "starts_with": "/"
            }
          },
          {
            "session_cookie_domain": {
              "type": "string",
              "description": "The session cookie domain flag.",
              "required": false
            }
          },
          {
            "session_cookie_same_site": {
              "type": "string",
              "default": "Lax",
              "required": false,
              "description": "Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks.",
              "one_of": [
                "Strict",
                "Lax",
                "None",
                "Default"
              ]
            }
          },
          {
            "session_cookie_http_only": {
              "type": "boolean",
              "description": "Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.",
              "default": true,
              "required": false
            }
          },
          {
            "session_cookie_secure": {
              "type": "boolean",
              "description": "The cookie is only sent to the server when a request is made with the https:scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.",
              "required": false
            }
          },
          {
            "session_request_headers": {
              "type": "set",
              "elements": {
                "type": "string",
                "one_of": [
                  "id",
                  "audience",
                  "subject",
                  "timeout",
                  "idling-timeout",
                  "rolling-timeout",
                  "absolute-timeout"
                ]
              }
            }
          },
          {
            "session_response_headers": {
              "type": "set",
              "elements": {
                "type": "string",
                "one_of": [
                  "id",
                  "audience",
                  "subject",
                  "timeout",
                  "idling-timeout",
                  "rolling-timeout",
                  "absolute-timeout"
                ]
              }
            }
          },
          {
            "session_storage": {
              "type": "string",
              "default": "cookie",
              "required": false,
              "description": "The session storage for session data: - `cookie`: stores session data with the session cookie. The session cannot be invalidated or revoked without changing the session secret, but is stateless, and doesn't require a database. - `memcached`: stores session data in memcached - `redis`: stores session data in Redis",
              "one_of": [
                "cookie",
                "memcache",
                "memcached",
                "redis"
              ]
            }
          },
          {
            "session_store_metadata": {
              "type": "boolean",
              "description": "Configures whether or not session metadata should be stored. This includes information about the active sessions for the `specific_audience` belonging to a specific subject.",
              "default": false,
              "required": false
            }
          },
          {
            "session_enforce_same_subject": {
              "type": "boolean",
              "description": "When set to `true`, audiences are forced to share the same subject.",
              "default": false,
              "required": false
            }
          },
          {
            "session_hash_subject": {
              "type": "boolean",
              "description": "When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.",
              "default": false,
              "required": false
            }
          },
          {
            "session_hash_storage_key": {
              "type": "boolean",
              "description": "When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.",
              "default": false,
              "required": false
            }
          },
          {
            "session_memcached_prefix": {
              "type": "string",
              "description": "The memcached session key prefix.",
              "required": false
            }
          },
          {
            "session_memcached_socket": {
              "type": "string",
              "description": "The memcached unix socket path.",
              "required": false
            }
          },
          {
            "session_memcached_host": {
              "type": "string",
              "description": "The memcached host.",
              "default": "127.0.0.1",
              "required": false
            }
          },
          {
            "session_memcached_port": {
              "type": "integer",
              "default": 11211,
              "required": false,
              "description": "An integer representing a port number between 0 and 65535, inclusive.",
              "between": [
                0,
                65535
              ]
            }
          },
          {
            "session_redis_prefix": {
              "type": "string",
              "description": "The Redis session key prefix.",
              "required": false
            }
          },
          {
            "session_redis_socket": {
              "type": "string",
              "description": "The Redis unix socket path.",
              "required": false
            }
          },
          {
            "session_redis_host": {
              "type": "string",
              "description": "The Redis host IP.",
              "default": "127.0.0.1",
              "required": false
            }
          },
          {
            "session_redis_port": {
              "type": "integer",
              "default": 6379,
              "required": false,
              "description": "An integer representing a port number between 0 and 65535, inclusive.",
              "between": [
                0,
                65535
              ]
            }
          },
          {
            "session_redis_username": {
              "type": "string",
              "description": "Redis username if the `redis` session storage is defined and ACL authentication is desired.If undefined, ACL authentication will not be performed.  This requires Redis v6.0.0+. The username **cannot** be set to `default`.",
              "referenceable": true,
              "required": false
            }
          },
          {
            "session_redis_password": {
              "referenceable": true,
              "required": false,
              "encrypted": true,
              "type": "string",
              "description": "Password to use for Redis connection when the `redis` session storage is defined. If undefined, no auth commands are sent to Redis. This value is pulled from"
            }
          },
          {
            "session_redis_connect_timeout": {
              "type": "integer",
              "description": "The Redis connection timeout in milliseconds.",
              "required": false
            }
          },
          {
            "session_redis_read_timeout": {
              "type": "integer",
              "description": "The Redis read timeout in milliseconds.",
              "required": false
            }
          },
          {
            "session_redis_send_timeout": {
              "type": "integer",
              "description": "The Redis send timeout in milliseconds.",
              "required": false
            }
          },
          {
            "session_redis_ssl": {
              "type": "boolean",
              "description": "Use SSL/TLS for the Redis connection.",
              "default": false,
              "required": false
            }
          },
          {
            "session_redis_ssl_verify": {
              "type": "boolean",
              "description": "Verify the Redis server certificate.",
              "default": false,
              "required": false
            }
          },
          {
            "session_redis_server_name": {
              "type": "string",
              "description": "The SNI used for connecting to the Redis server.",
              "required": false
            }
          },
          {
            "session_redis_cluster_nodes": {
              "type": "array",
              "description": "The Redis cluster node host. Takes an array of host records, with either `ip` or `host`, and `port` values.",
              "elements": {
                "type": "record",
                "fields": [
                  {
                    "ip": {
                      "type": "string",
                      "description": "A string representing a host name, such as example.com.",
                      "default": "127.0.0.1",
                      "required": true
                    }
                  },
                  {
                    "port": {
                      "type": "integer",
                      "description": "An integer representing a port number between 0 and 65535, inclusive.",
                      "default": 6379,
                      "between": [
                        0,
                        65535
                      ]
                    }
                  }
                ]
              },
              "required": false
            }
          },
          {
            "session_redis_cluster_max_redirections": {
              "type": "integer",
              "description": "The Redis cluster maximum redirects.",
              "required": false
            }
          }
        ],
        "shorthand_fields": [
          {
            "session_cookie_lifetime": {
              "type": "number"
            }
          },
          {
            "session_cookie_idletime": {
              "type": "number"
            }
          },
          {
            "session_cookie_samesite": {
              "type": "string"
            }
          },
          {
            "session_cookie_httponly": {
              "type": "boolean"
            }
          },
          {
            "session_memcache_prefix": {
              "type": "string"
            }
          },
          {
            "session_memcache_socket": {
              "type": "string"
            }
          },
          {
            "session_memcache_host": {
              "type": "string"
            }
          },
          {
            "session_memcache_port": {
              "type": "integer"
            }
          },
          {
            "session_redis_cluster_maxredirections": {
              "type": "integer"
            }
          },
          {
            "session_cookie_renew": {
              "type": "number"
            }
          },
          {
            "session_cookie_maxsize": {
              "type": "integer"
            }
          },
          {
            "session_strategy": {
              "type": "string"
            }
          },
          {
            "session_compressor": {
              "type": "string"
            }
          },
          {
            "session_auth_ttl": {
              "type": "number"
            }
          }
        ],
        "required": true
      }
    }
  ],
  "entity_checks": [

  ]
}
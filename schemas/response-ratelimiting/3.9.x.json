{
  "entity_checks": [
    {
      "conditional": {
        "if_match": {
          "eq": "redis"
        },
        "then_field": "config.redis.host",
        "if_field": "config.policy",
        "then_match": {
          "required": true
        }
      }
    },
    {
      "conditional": {
        "if_match": {
          "eq": "redis"
        },
        "then_field": "config.redis.port",
        "if_field": "config.policy",
        "then_match": {
          "required": true
        }
      }
    },
    {
      "conditional": {
        "if_match": {
          "eq": "redis"
        },
        "then_field": "config.redis.timeout",
        "if_field": "config.policy",
        "then_match": {
          "required": true
        }
      }
    }
  ],
  "fields": [
    {
      "protocols": {
        "required": true,
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "type": "set",
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "description": "A set of strings representing HTTP protocols."
      }
    },
    {
      "consumer_group": {
        "reference": "consumer_groups",
        "type": "foreign",
        "eq": null,
        "description": "Custom type for representing a foreign key with a null value allowed."
      }
    },
    {
      "config": {
        "fields": [
          {
            "header_name": {
              "description": "The name of the response header used to increment the counters.",
              "default": "x-kong-limit",
              "type": "string"
            }
          },
          {
            "limit_by": {
              "type": "string",
              "description": "The entity that will be used when aggregating the limits: `consumer`, `credential`, `ip`. If the `consumer` or the `credential` cannot be determined, the system will always fallback to `ip`.",
              "default": "consumer",
              "one_of": [
                "consumer",
                "credential",
                "ip"
              ]
            }
          },
          {
            "policy": {
              "type": "string",
              "description": "The rate-limiting policies to use for retrieving and incrementing the limits.",
              "default": "local",
              "one_of": [
                "local",
                "cluster",
                "redis"
              ]
            }
          },
          {
            "fault_tolerant": {
              "description": "A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party datastore. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the datastore is working again. If `false`, then the clients will see `500` errors.",
              "required": true,
              "default": true,
              "type": "boolean"
            }
          },
          {
            "redis": {
              "fields": [
                {
                  "host": {
                    "description": "A string representing a host name, such as example.com.",
                    "type": "string"
                  }
                },
                {
                  "port": {
                    "between": [
                      0,
                      65535
                    ],
                    "type": "integer",
                    "default": 6379,
                    "description": "An integer representing a port number between 0 and 65535, inclusive."
                  }
                },
                {
                  "timeout": {
                    "between": [
                      0,
                      2147483646
                    ],
                    "type": "integer",
                    "default": 2000,
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2."
                  }
                },
                {
                  "username": {
                    "type": "string",
                    "referenceable": true,
                    "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`."
                  }
                },
                {
                  "password": {
                    "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.",
                    "referenceable": true,
                    "len_min": 0,
                    "type": "string",
                    "encrypted": true
                  }
                },
                {
                  "database": {
                    "type": "integer",
                    "default": 0,
                    "description": "Database to use for the Redis connection when using the `redis` strategy"
                  }
                },
                {
                  "ssl": {
                    "description": "If set to true, uses SSL to connect to Redis.",
                    "type": "boolean",
                    "default": false,
                    "required": false
                  }
                },
                {
                  "ssl_verify": {
                    "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.",
                    "type": "boolean",
                    "default": false,
                    "required": false
                  }
                },
                {
                  "server_name": {
                    "type": "string",
                    "required": false,
                    "description": "A string representing an SNI (server name indication) value for TLS."
                  }
                }
              ],
              "description": "Redis configuration",
              "type": "record",
              "required": true
            }
          },
          {
            "block_on_first_violation": {
              "description": "A boolean value that determines if the requests should be blocked as soon as one limit is being exceeded. This will block requests that are supposed to consume other limits too.",
              "required": true,
              "default": false,
              "type": "boolean"
            }
          },
          {
            "hide_client_headers": {
              "description": "Optionally hide informative response headers.",
              "required": true,
              "default": false,
              "type": "boolean"
            }
          },
          {
            "limits": {
              "description": "A map that defines rate limits for the plugin.",
              "len_min": 1,
              "keys": {
                "type": "string"
              },
              "type": "map",
              "required": true,
              "values": {
                "fields": [
                  {
                    "second": {
                      "gt": 0,
                      "type": "number"
                    }
                  },
                  {
                    "minute": {
                      "gt": 0,
                      "type": "number"
                    }
                  },
                  {
                    "hour": {
                      "gt": 0,
                      "type": "number"
                    }
                  },
                  {
                    "day": {
                      "gt": 0,
                      "type": "number"
                    }
                  },
                  {
                    "month": {
                      "gt": 0,
                      "type": "number"
                    }
                  },
                  {
                    "year": {
                      "gt": 0,
                      "type": "number"
                    }
                  }
                ],
                "required": true,
                "entity_checks": [
                  {
                    "at_least_one_of": [
                      "second",
                      "minute",
                      "hour",
                      "day",
                      "month",
                      "year"
                    ]
                  }
                ],
                "type": "record"
              }
            }
          }
        ],
        "type": "record",
        "shorthand_fields": [
          {
            "redis_host": {
              "deprecation": {
                "message": "response-ratelimiting: config.redis_host is deprecated, please use config.redis.host instead",
                "removal_in_version": "4.0",
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "host"
                    ]
                  }
                ]
              },
              "type": "string"
            }
          },
          {
            "redis_port": {
              "deprecation": {
                "message": "response-ratelimiting: config.redis_port is deprecated, please use config.redis.port instead",
                "removal_in_version": "4.0",
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "port"
                    ]
                  }
                ]
              },
              "type": "integer"
            }
          },
          {
            "redis_password": {
              "deprecation": {
                "message": "response-ratelimiting: config.redis_password is deprecated, please use config.redis.password instead",
                "removal_in_version": "4.0",
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "password"
                    ]
                  }
                ]
              },
              "type": "string",
              "len_min": 0
            }
          },
          {
            "redis_username": {
              "deprecation": {
                "message": "response-ratelimiting: config.redis_username is deprecated, please use config.redis.username instead",
                "removal_in_version": "4.0",
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "username"
                    ]
                  }
                ]
              },
              "type": "string"
            }
          },
          {
            "redis_ssl": {
              "deprecation": {
                "message": "response-ratelimiting: config.redis_ssl is deprecated, please use config.redis.ssl instead",
                "removal_in_version": "4.0",
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "ssl"
                    ]
                  }
                ]
              },
              "type": "boolean"
            }
          },
          {
            "redis_ssl_verify": {
              "deprecation": {
                "message": "response-ratelimiting: config.redis_ssl_verify is deprecated, please use config.redis.ssl_verify instead",
                "removal_in_version": "4.0",
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "ssl_verify"
                    ]
                  }
                ]
              },
              "type": "boolean"
            }
          },
          {
            "redis_server_name": {
              "deprecation": {
                "message": "response-ratelimiting: config.redis_server_name is deprecated, please use config.redis.server_name instead",
                "removal_in_version": "4.0",
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "server_name"
                    ]
                  }
                ]
              },
              "type": "string"
            }
          },
          {
            "redis_timeout": {
              "deprecation": {
                "message": "response-ratelimiting: config.redis_timeout is deprecated, please use config.redis.timeout instead",
                "removal_in_version": "4.0",
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "timeout"
                    ]
                  }
                ]
              },
              "type": "integer"
            }
          },
          {
            "redis_database": {
              "deprecation": {
                "message": "response-ratelimiting: config.redis_database is deprecated, please use config.redis.database instead",
                "removal_in_version": "4.0",
                "replaced_with": [
                  {
                    "path": [
                      "redis",
                      "database"
                    ]
                  }
                ]
              },
              "type": "integer"
            }
          }
        ],
        "required": true
      }
    }
  ]
}
{
  "fields": [
    {
      "protocols": {
        "required": true,
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "type": "set",
        "description": "A set of strings representing HTTP protocols."
      }
    },
    {
      "consumer_group": {
        "type": "foreign",
        "reference": "consumer_groups",
        "eq": null,
        "description": "Custom type for representing a foreign key with a null value allowed."
      }
    },
    {
      "config": {
        "required": true,
        "type": "record",
        "fields": [
          {
            "header_name": {
              "default": "x-kong-limit",
              "type": "string",
              "description": "The name of the response header used to increment the counters."
            }
          },
          {
            "limit_by": {
              "description": "The entity that will be used when aggregating the limits: `consumer`, `credential`, `ip`. If the `consumer` or the `credential` cannot be determined, the system will always fallback to `ip`.",
              "default": "consumer",
              "type": "string",
              "one_of": [
                "consumer",
                "credential",
                "ip"
              ]
            }
          },
          {
            "policy": {
              "description": "The rate-limiting policies to use for retrieving and incrementing the limits.",
              "default": "local",
              "type": "string",
              "one_of": [
                "local",
                "cluster",
                "redis"
              ]
            }
          },
          {
            "fault_tolerant": {
              "default": true,
              "required": true,
              "type": "boolean",
              "description": "A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party datastore. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the datastore is working again. If `false`, then the clients will see `500` errors."
            }
          },
          {
            "redis_host": {
              "type": "string",
              "description": "When using the `redis` policy, this property specifies the address to the Redis server."
            }
          },
          {
            "redis_port": {
              "between": [
                0,
                65535
              ],
              "default": 6379,
              "type": "integer",
              "description": "When using the `redis` policy, this property specifies the port of the Redis server."
            }
          },
          {
            "redis_password": {
              "description": "When using the `redis` policy, this property specifies the password to connect to the Redis server.",
              "len_min": 0,
              "type": "string",
              "referenceable": true
            }
          },
          {
            "redis_username": {
              "description": "When using the `redis` policy, this property specifies the username to connect to the Redis server when ACL authentication is desired.\nThis requires Redis v6.0.0+. The username **cannot** be set to `default`.",
              "type": "string",
              "referenceable": true
            }
          },
          {
            "redis_ssl": {
              "default": false,
              "required": true,
              "type": "boolean",
              "description": "When using the `redis` policy, this property specifies if SSL is used to connect to the Redis server."
            }
          },
          {
            "redis_ssl_verify": {
              "default": false,
              "required": true,
              "type": "boolean",
              "description": "When using the `redis` policy with `redis_ssl` set to `true`, this property specifies if the server SSL certificate is validated. Note that you need to configure the `lua_ssl_trusted_certificate` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly."
            }
          },
          {
            "redis_server_name": {
              "type": "string",
              "description": "When using the `redis` policy with `redis_ssl` set to `true`, this property specifies the server name for the TLS extension Server Name Indication (SNI)."
            }
          },
          {
            "redis_timeout": {
              "default": 2000,
              "type": "number",
              "description": "When using the `redis` policy, this property specifies the timeout in milliseconds of any command submitted to the Redis server."
            }
          },
          {
            "redis_database": {
              "default": 0,
              "type": "number",
              "description": "When using the `redis` policy, this property specifies Redis database to use."
            }
          },
          {
            "block_on_first_violation": {
              "default": false,
              "required": true,
              "type": "boolean",
              "description": "A boolean value that determines if the requests should be blocked as soon as one limit is being exceeded. This will block requests that are supposed to consume other limits too."
            }
          },
          {
            "hide_client_headers": {
              "default": false,
              "required": true,
              "type": "boolean",
              "description": "Optionally hide informative response headers."
            }
          },
          {
            "limits": {
              "required": true,
              "len_min": 1,
              "keys": {
                "type": "string"
              },
              "values": {
                "entity_checks": [
                  {
                    "at_least_one_of": [
                      "second",
                      "minute",
                      "hour",
                      "day",
                      "month",
                      "year"
                    ]
                  }
                ],
                "required": true,
                "type": "record",
                "fields": [
                  {
                    "second": {
                      "type": "number",
                      "gt": 0
                    }
                  },
                  {
                    "minute": {
                      "type": "number",
                      "gt": 0
                    }
                  },
                  {
                    "hour": {
                      "type": "number",
                      "gt": 0
                    }
                  },
                  {
                    "day": {
                      "type": "number",
                      "gt": 0
                    }
                  },
                  {
                    "month": {
                      "type": "number",
                      "gt": 0
                    }
                  },
                  {
                    "year": {
                      "type": "number",
                      "gt": 0
                    }
                  }
                ]
              },
              "type": "map",
              "description": "A map that defines rate limits for the plugin."
            }
          }
        ]
      }
    }
  ],
  "entity_checks": [
    {
      "conditional": {
        "if_field": "config.policy",
        "if_match": {
          "eq": "redis"
        },
        "then_field": "config.redis_host",
        "then_match": {
          "required": true
        }
      }
    },
    {
      "conditional": {
        "if_field": "config.policy",
        "if_match": {
          "eq": "redis"
        },
        "then_field": "config.redis_port",
        "then_match": {
          "required": true
        }
      }
    },
    {
      "conditional": {
        "if_field": "config.policy",
        "if_match": {
          "eq": "redis"
        },
        "then_field": "config.redis_timeout",
        "then_match": {
          "required": true
        }
      }
    }
  ]
}
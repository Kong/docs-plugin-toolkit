{
  "fields": [
    {
      "protocols": {
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "required": true,
        "type": "set"
      }
    },
    {
      "config": {
        "fields": [
          {
            "header_name": {
              "type": "string",
              "default": "x-kong-limit",
              "description": "The name of the response header used to increment the counters."
            }
          },
          {
            "limit_by": {
              "one_of": [
                "consumer",
                "credential",
                "ip"
              ],
              "type": "string",
              "default": "consumer",
              "description": "The entity that will be used when aggregating the limits: `consumer`, `credential`, `ip`. If the `consumer` or the `credential` cannot be determined, the system will always fallback to `ip`."
            }
          },
          {
            "policy": {
              "one_of": [
                "local",
                "cluster",
                "redis"
              ],
              "type": "string",
              "default": "cluster",
              "examples": [
                "local"
              ],
              "description": "The rate-limiting policies to use for retrieving and incrementing the\nlimits. Available values are:\n- `local`: Counters are stored locally in-memory on the node.\n- `cluster`: Counters are stored in the Kong datastore and shared across\nthe nodes.\n- `redis`: Counters are stored on a Redis server and shared\nacross the nodes.\n\nIn DB-less, hybrid mode, and Konnect, the `cluster` config policy is not supported.\nFor DB-less mode or Konnect, use one of `redis` or `local`; for hybrid mode, use\n`redis`, or `local` for data planes only.\n\nFor details on which policy should be used, refer to the\n[implementation considerations](/hub/kong-inc/rate-limiting/#implementation-considerations)."
            }
          },
          {
            "fault_tolerant": {
              "type": "boolean",
              "required": true,
              "default": true,
              "description": "A boolean value that determines if the requests should be proxied even if Kong has troubles connecting a third-party datastore. If `true`, requests will be proxied anyway, effectively disabling the rate-limiting function until the datastore is working again. If `false`, then the clients will see `500` errors."
            }
          },
          {
            "redis_host": {
              "type": "string",
              "description": "When using the `redis` policy, this property specifies the address to the Redis server."
            }
          },
          {
            "redis_port": {
              "type": "integer",
              "default": 6379,
              "between": [
                0,
                65535
              ],
              "description": "When using the `redis` policy, this property specifies the port of the Redis server."
            }
          },
          {
            "redis_password": {
              "type": "string",
              "len_min": 0,
              "description": "When using the `redis` policy, this property specifies the password to connect to the Redis server."
            }
          },
          {
            "redis_timeout": {
              "type": "number",
              "default": 2000,
              "description": "When using the `redis` policy, this property specifies the timeout in milliseconds of any command submitted to the Redis server."
            }
          },
          {
            "redis_database": {
              "type": "number",
              "default": 0,
              "description": "When using the `redis` policy, this property specifies Redis database to use."
            }
          },
          {
            "block_on_first_violation": {
              "type": "boolean",
              "required": true,
              "default": false,
              "description": "A boolean value that determines if the requests should be blocked as soon as one limit is being exceeded. This will block requests that are supposed to consume other limits too."
            }
          },
          {
            "hide_client_headers": {
              "type": "boolean",
              "required": true,
              "default": false,
              "description": "Optionally hide informative response headers."
            }
          },
          {
            "limits": {
              "keys": {
                "type": "string"
              },
              "type": "map",
              "len_min": 1,
              "required": true,
              "values": {
                "required": true,
                "fields": [
                  {
                    "second": {
                      "type": "number",
                      "gt": 0
                    }
                  },
                  {
                    "minute": {
                      "type": "number",
                      "gt": 0
                    }
                  },
                  {
                    "hour": {
                      "type": "number",
                      "gt": 0
                    }
                  },
                  {
                    "day": {
                      "type": "number",
                      "gt": 0
                    }
                  },
                  {
                    "month": {
                      "type": "number",
                      "gt": 0
                    }
                  },
                  {
                    "year": {
                      "type": "number",
                      "gt": 0
                    }
                  }
                ],
                "type": "record",
                "entity_checks": [
                  {
                    "at_least_one_of": [
                      "second",
                      "minute",
                      "hour",
                      "day",
                      "month",
                      "year"
                    ]
                  }
                ]
              },
              "examples": [
                {
                  "limit_name": {
                    "minute": 10
                  }
                }
              ]
            }
          }
        ],
        "type": "record",
        "required": true
      }
    }
  ]
}
{
  "fields": [
    {
      "consumer": {
        "type": "foreign",
        "eq": null,
        "reference": "consumers",
        "description": "Custom type for representing a foreign key with a null value allowed."
      }
    },
    {
      "protocols": {
        "type": "set",
        "required": true,
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "description": "A set of strings representing HTTP protocols."
      }
    },
    {
      "consumer_group": {
        "type": "foreign",
        "reference": "consumer_groups",
        "eq": null,
        "description": "Custom type for representing a foreign key with a null value allowed."
      }
    },
    {
      "config": {
        "shorthand_fields": [
          {
            "authorization_cookie_lifetime": {
              "type": "number"
            }
          },
          {
            "authorization_cookie_samesite": {
              "type": "string"
            }
          },
          {
            "authorization_cookie_httponly": {
              "type": "boolean"
            }
          },
          {
            "session_cookie_lifetime": {
              "type": "number"
            }
          },
          {
            "session_cookie_idletime": {
              "type": "number"
            }
          },
          {
            "session_cookie_samesite": {
              "type": "string"
            }
          },
          {
            "session_cookie_httponly": {
              "type": "boolean"
            }
          },
          {
            "session_memcache_prefix": {
              "type": "string"
            }
          },
          {
            "session_memcache_socket": {
              "type": "string"
            }
          },
          {
            "session_memcache_host": {
              "type": "string"
            }
          },
          {
            "session_memcache_port": {
              "type": "integer"
            }
          },
          {
            "session_redis_cluster_maxredirections": {
              "type": "integer"
            }
          },
          {
            "session_cookie_renew": {
              "type": "number"
            }
          },
          {
            "session_cookie_maxsize": {
              "type": "integer"
            }
          },
          {
            "session_strategy": {
              "type": "string"
            }
          },
          {
            "session_compressor": {
              "type": "string"
            }
          }
        ],
        "fields": [
          {
            "issuer": {
              "required": true,
              "type": "string",
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
            }
          },
          {
            "discovery_headers_names": {
              "description": "Extra header names passed to the discovery endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "discovery_headers_values": {
              "description": "Extra header values passed to the discovery endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "extra_jwks_uris": {
              "description": "JWKS URIs whose public keys are trusted (in addition to the keys found with the discovery).",
              "elements": {
                "type": "string",
                "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
              },
              "type": "set",
              "required": false
            }
          },
          {
            "rediscovery_lifetime": {
              "description": "Specifies how long (in seconds) the plugin waits between discovery attempts. Discovery is still triggered on an as-needed basis.",
              "default": 30,
              "type": "number",
              "required": false
            }
          },
          {
            "auth_methods": {
              "type": "array",
              "required": false,
              "default": [
                "password",
                "client_credentials",
                "authorization_code",
                "bearer",
                "introspection",
                "userinfo",
                "kong_oauth2",
                "refresh_token",
                "session"
              ],
              "description": "Types of credentials/grants to enable.",
              "elements": {
                "type": "string",
                "one_of": [
                  "password",
                  "client_credentials",
                  "authorization_code",
                  "bearer",
                  "introspection",
                  "userinfo",
                  "kong_oauth2",
                  "refresh_token",
                  "session"
                ]
              }
            }
          },
          {
            "client_id": {
              "type": "array",
              "encrypted": true,
              "description": "The client id(s) that the plugin uses when it calls authenticated endpoints on the identity provider.",
              "required": false,
              "elements": {
                "type": "string",
                "referenceable": true
              }
            }
          },
          {
            "client_secret": {
              "type": "array",
              "encrypted": true,
              "description": "The client secret.",
              "required": false,
              "elements": {
                "type": "string",
                "referenceable": true
              }
            }
          },
          {
            "client_auth": {
              "description": "The authentication method used by the client (plugin) when calling the endpoint.",
              "elements": {
                "type": "string",
                "one_of": [
                  "client_secret_basic",
                  "client_secret_post",
                  "client_secret_jwt",
                  "private_key_jwt",
                  "none"
                ]
              },
              "type": "array",
              "required": false
            }
          },
          {
            "client_jwk": {
              "required": false,
              "type": "array",
              "elements": {
                "fields": [
                  {
                    "issuer": {
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "kty": {
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "use": {
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "key_ops": {
                      "required": false,
                      "type": "array",
                      "elements": {
                        "type": "string",
                        "required": false
                      }
                    }
                  },
                  {
                    "alg": {
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "kid": {
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "x5u": {
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "x5c": {
                      "required": false,
                      "type": "array",
                      "elements": {
                        "type": "string",
                        "required": false
                      }
                    }
                  },
                  {
                    "x5t": {
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "x5t#S256": {
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "k": {
                      "encrypted": true,
                      "referenceable": true,
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "x": {
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "y": {
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "crv": {
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "n": {
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "e": {
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "d": {
                      "encrypted": true,
                      "referenceable": true,
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "p": {
                      "encrypted": true,
                      "referenceable": true,
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "q": {
                      "encrypted": true,
                      "referenceable": true,
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "dp": {
                      "encrypted": true,
                      "referenceable": true,
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "dq": {
                      "encrypted": true,
                      "referenceable": true,
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "qi": {
                      "encrypted": true,
                      "referenceable": true,
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "oth": {
                      "encrypted": true,
                      "referenceable": true,
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "r": {
                      "encrypted": true,
                      "referenceable": true,
                      "type": "string",
                      "required": false
                    }
                  },
                  {
                    "t": {
                      "encrypted": true,
                      "referenceable": true,
                      "type": "string",
                      "required": false
                    }
                  }
                ],
                "type": "record",
                "required": false
              }
            }
          },
          {
            "client_alg": {
              "required": false,
              "type": "array",
              "elements": {
                "type": "string",
                "one_of": [
                  "HS256",
                  "HS384",
                  "HS512",
                  "RS256",
                  "RS384",
                  "RS512",
                  "ES256",
                  "ES384",
                  "ES512",
                  "PS256",
                  "PS384",
                  "PS512",
                  "EdDSA"
                ]
              }
            }
          },
          {
            "client_arg": {
              "description": "The client to use for this request (the selection is made with a request parameter with the same name).",
              "default": "client_id",
              "type": "string",
              "required": false
            }
          },
          {
            "redirect_uri": {
              "description": "The redirect URI passed to the authorization and token endpoints.",
              "elements": {
                "type": "string",
                "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
              },
              "type": "array",
              "required": false
            }
          },
          {
            "login_redirect_uri": {
              "description": "Where to redirect the client when `login_action` is set to `redirect`.",
              "elements": {
                "type": "string",
                "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
              },
              "type": "array",
              "required": false
            }
          },
          {
            "logout_redirect_uri": {
              "description": "Where to redirect the client after the logout.",
              "elements": {
                "type": "string",
                "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
              },
              "type": "array",
              "required": false
            }
          },
          {
            "forbidden_redirect_uri": {
              "description": "Where to redirect the client on forbidden requests.",
              "elements": {
                "type": "string",
                "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
              },
              "type": "array",
              "required": false
            }
          },
          {
            "forbidden_error_message": {
              "description": "The error message for the forbidden requests (when not using the redirection).",
              "default": "Forbidden",
              "type": "string",
              "required": false
            }
          },
          {
            "forbidden_destroy_session": {
              "description": "Destroy any active session for the forbidden requests.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "unauthorized_destroy_session": {
              "description": "Destroy any active session for the unauthorized requests.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "unauthorized_redirect_uri": {
              "description": "Where to redirect the client on unauthorized requests.",
              "elements": {
                "type": "string",
                "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
              },
              "type": "array",
              "required": false
            }
          },
          {
            "unauthorized_error_message": {
              "description": "The error message for the unauthorized requests (when not using the redirection).",
              "default": "Unauthorized",
              "type": "string",
              "required": false
            }
          },
          {
            "unexpected_redirect_uri": {
              "description": "Where to redirect the client when unexpected errors happen with the requests.",
              "elements": {
                "type": "string",
                "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
              },
              "type": "array",
              "required": false
            }
          },
          {
            "response_mode": {
              "type": "string",
              "required": false,
              "one_of": [
                "query",
                "form_post",
                "fragment"
              ],
              "default": "query",
              "description": "The response mode passed to the authorization endpoint: - `query`: Instructs the identity provider to pass parameters in query string - `form_post`: Instructs the identity provider to pass parameters in request body - `fragment`: Instructs the identity provider to pass parameters in uri fragment (rarely useful as the plugin itself cannot read it)"
            }
          },
          {
            "response_type": {
              "type": "array",
              "required": false,
              "default": [
                "code"
              ],
              "description": "The response type passed to the authorization endpoint.",
              "elements": {
                "type": "string"
              }
            }
          },
          {
            "scopes": {
              "type": "array",
              "required": false,
              "default": [
                "openid"
              ],
              "description": "The scopes passed to the authorization and token endpoints.",
              "elements": {
                "type": "string"
              }
            }
          },
          {
            "audience": {
              "description": "The audience passed to the authorization endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "issuers_allowed": {
              "description": "The issuers allowed to be present in the tokens (`iss` claim).",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "scopes_required": {
              "description": "The scopes (`scopes_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "scopes_claim": {
              "type": "array",
              "required": false,
              "default": [
                "scope"
              ],
              "description": "The claim that contains the scopes.",
              "elements": {
                "type": "string"
              }
            }
          },
          {
            "audience_required": {
              "description": "The audiences (`audience_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "audience_claim": {
              "type": "array",
              "required": false,
              "default": [
                "aud"
              ],
              "description": "The claim that contains the audience.",
              "elements": {
                "type": "string"
              }
            }
          },
          {
            "groups_required": {
              "description": "The groups (`groups_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "groups_claim": {
              "type": "array",
              "required": false,
              "default": [
                "groups"
              ],
              "description": "The claim that contains the groups.",
              "elements": {
                "type": "string"
              }
            }
          },
          {
            "roles_required": {
              "description": "The roles (`roles_claim` claim) required to be present in the access token (or introspection results) for successful authorization. This config parameter works in both **AND** / **OR** cases.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "roles_claim": {
              "type": "array",
              "required": false,
              "default": [
                "roles"
              ],
              "description": "The claim that contains the roles.",
              "elements": {
                "type": "string"
              }
            }
          },
          {
            "domains": {
              "description": "The allowed values for the `hd` claim.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "max_age": {
              "description": "The maximum age (in seconds) compared to the `auth_time` claim.",
              "type": "number",
              "required": false
            }
          },
          {
            "authenticated_groups_claim": {
              "description": "The claim that contains authenticated groups. This setting can be used together with ACL plugin, but it also enables IdP managed groups with other applications and integrations.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "authorization_endpoint": {
              "required": false,
              "type": "string",
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
            }
          },
          {
            "authorization_query_args_names": {
              "description": "Extra query argument names passed to the authorization endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "authorization_query_args_values": {
              "description": "Extra query argument values passed to the authorization endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "authorization_query_args_client": {
              "description": "Extra query arguments passed from the client to the authorization endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "authorization_rolling_timeout": {
              "description": "Specifies how long the session used for the authorization code flow can be used in seconds until it needs to be renewed. 0 disables the checks and rolling.",
              "default": 600,
              "type": "number",
              "required": false
            }
          },
          {
            "authorization_cookie_name": {
              "description": "The authorization cookie name.",
              "default": "authorization",
              "type": "string",
              "required": false
            }
          },
          {
            "authorization_cookie_path": {
              "type": "string",
              "required": false,
              "starts_with": "/",
              "default": "/",
              "match_none": [
                {
                  "pattern": "//",
                  "err": "must not have empty segments"
                }
              ],
              "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes)."
            }
          },
          {
            "authorization_cookie_domain": {
              "description": "The authorization cookie Domain flag.",
              "type": "string",
              "required": false
            }
          },
          {
            "authorization_cookie_same_site": {
              "type": "string",
              "required": false,
              "one_of": [
                "Strict",
                "Lax",
                "None",
                "Default"
              ],
              "default": "Default",
              "description": "Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks."
            }
          },
          {
            "authorization_cookie_http_only": {
              "description": "Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "authorization_cookie_secure": {
              "description": "Cookie is only sent to the server when a request is made with the https: scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.",
              "type": "boolean",
              "required": false
            }
          },
          {
            "preserve_query_args": {
              "description": "With this parameter, you can preserve request query arguments even when doing authorization code flow.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "token_endpoint": {
              "required": false,
              "type": "string",
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
            }
          },
          {
            "token_endpoint_auth_method": {
              "description": "The token endpoint authentication method: - `client_secret_basic`: send `client_id` and `client_secret` in `Authorization: Basic` header - `client_secret_post`: send `client_id` and `client_secret` as part of the body - `client_secret_jwt`: send client assertion signed with the `client_secret` as part of the body - `private_key_jwt`:  send client assertion signed with the `private key` as part of the body - `none`: do not authenticate",
              "one_of": [
                "client_secret_basic",
                "client_secret_post",
                "client_secret_jwt",
                "private_key_jwt",
                "none"
              ],
              "type": "string",
              "required": false
            }
          },
          {
            "token_headers_names": {
              "description": "Extra header names passed to the token endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "token_headers_values": {
              "description": "Extra header values passed to the token endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "token_headers_client": {
              "description": "Extra headers passed from the client to the token endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "token_headers_replay": {
              "description": "The names of token endpoint response headers to forward to the downstream client.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "token_headers_prefix": {
              "description": "Add a prefix to the token endpoint response headers before forwarding them to the downstream client.",
              "type": "string",
              "required": false
            }
          },
          {
            "token_headers_grants": {
              "description": "Enable the sending of the token endpoint response headers only with certain grants: - `password`: with OAuth password grant - `client_credentials`: with OAuth client credentials grant - `authorization_code`: with authorization code flow - `refresh_token` with refresh token grant",
              "elements": {
                "type": "string",
                "one_of": [
                  "password",
                  "client_credentials",
                  "authorization_code",
                  "refresh_token"
                ]
              },
              "type": "array",
              "required": false
            }
          },
          {
            "token_post_args_names": {
              "description": "Extra post argument names passed to the token endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "token_post_args_values": {
              "description": "Extra post argument values passed to the token endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "token_post_args_client": {
              "description": "Pass extra arguments from the client to the OpenID-Connect plugin. If arguments exist, the client can pass them using: - Request Body - Query parameters  This parameter can be used with `scope` values, like this:  `config.token_post_args_client=scope`  In this case, the token would take the `scope` value from the query parameter or from the request body and send it to the token endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "introspection_endpoint": {
              "required": false,
              "type": "string",
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
            }
          },
          {
            "introspection_endpoint_auth_method": {
              "description": "The introspection endpoint authentication method: - `client_secret_basic`: send `client_id` and `client_secret` in `Authorization: Basic` header - `client_secret_post`: send `client_id` and `client_secret` as part of the body - `client_secret_jwt`: send client assertion signed with the `client_secret` as part of the body - `private_key_jwt`:  send client assertion signed with the `private key` as part of the body - `none`: do not authenticate",
              "one_of": [
                "client_secret_basic",
                "client_secret_post",
                "client_secret_jwt",
                "private_key_jwt",
                "none"
              ],
              "type": "string",
              "required": false
            }
          },
          {
            "introspection_hint": {
              "description": "Introspection hint parameter value passed to the introspection endpoint.",
              "default": "access_token",
              "type": "string",
              "required": false
            }
          },
          {
            "introspection_check_active": {
              "description": "Check that the introspection response has an `active` claim with a value of `true`.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "introspection_accept": {
              "type": "string",
              "required": false,
              "one_of": [
                "application/json",
                "application/token-introspection+jwt",
                "application/jwt"
              ],
              "default": "application/json",
              "description": "The value of `Accept` header for introspection requests: - `application/json`: introspection response as JSON - `application/token-introspection+jwt`: introspection response as JWT (from the current IETF draft document) - `application/jwt`: introspection response as JWT (from the obsolete IETF draft document)"
            }
          },
          {
            "introspection_headers_names": {
              "description": "Extra header names passed to the introspection endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "introspection_headers_values": {
              "description": "Extra header values passed to the introspection endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "introspection_headers_client": {
              "description": "Extra headers passed from the client to the introspection endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "introspection_post_args_names": {
              "description": "Extra post argument names passed to the introspection endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "introspection_post_args_values": {
              "description": "Extra post argument values passed to the introspection endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "introspection_post_args_client": {
              "description": "Extra post arguments passed from the client to the introspection endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "introspect_jwt_tokens": {
              "description": "Specifies whether to introspect the JWT access tokens (can be used to check for revocations).",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "revocation_endpoint": {
              "required": false,
              "type": "string",
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
            }
          },
          {
            "revocation_endpoint_auth_method": {
              "description": "The revocation endpoint authentication method: - `client_secret_basic`: send `client_id` and `client_secret` in `Authorization: Basic` header - `client_secret_post`: send `client_id` and `client_secret` as part of the body - `client_secret_jwt`: send client assertion signed with the `client_secret` as part of the body - `private_key_jwt`:  send client assertion signed with the `private key` as part of the body - `none`: do not authenticate",
              "one_of": [
                "client_secret_basic",
                "client_secret_post",
                "client_secret_jwt",
                "private_key_jwt",
                "none"
              ],
              "type": "string",
              "required": false
            }
          },
          {
            "end_session_endpoint": {
              "required": false,
              "type": "string",
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
            }
          },
          {
            "userinfo_endpoint": {
              "required": false,
              "type": "string",
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
            }
          },
          {
            "userinfo_accept": {
              "type": "string",
              "required": false,
              "one_of": [
                "application/json",
                "application/jwt"
              ],
              "default": "application/json",
              "description": "The value of `Accept` header for user info requests: - `application/json`: user info response as JSON - `application/jwt`: user info response as JWT (from the obsolete IETF draft document)"
            }
          },
          {
            "userinfo_headers_names": {
              "description": "Extra header names passed to the user info endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "userinfo_headers_values": {
              "description": "Extra header values passed to the user info endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "userinfo_headers_client": {
              "description": "Extra headers passed from the client to the user info endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "userinfo_query_args_names": {
              "description": "Extra query argument names passed to the user info endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "userinfo_query_args_values": {
              "description": "Extra query argument values passed to the user info endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "userinfo_query_args_client": {
              "description": "Extra query arguments passed from the client to the user info endpoint.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "token_exchange_endpoint": {
              "required": false,
              "type": "string",
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
            }
          },
          {
            "session_secret": {
              "type": "string",
              "required": false,
              "referenceable": true,
              "encrypted": true,
              "description": "The session secret."
            }
          },
          {
            "session_audience": {
              "description": "The session audience, which is the intended target application. For example `\"my-application\"`.",
              "default": "default",
              "type": "string",
              "required": false
            }
          },
          {
            "session_cookie_name": {
              "description": "The session cookie name.",
              "default": "session",
              "type": "string",
              "required": false
            }
          },
          {
            "session_remember": {
              "description": "Enables or disables persistent sessions.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "session_remember_cookie_name": {
              "description": "Persistent session cookie name. Use with the `remember` configuration parameter.",
              "default": "remember",
              "type": "string",
              "required": false
            }
          },
          {
            "session_remember_rolling_timeout": {
              "description": "Specifies how long the persistent session is considered valid in seconds. 0 disables the checks and rolling.",
              "default": 604800,
              "type": "number",
              "required": false
            }
          },
          {
            "session_remember_absolute_timeout": {
              "description": "Limits how long the persistent session can be renewed in seconds, until re-authentication is required. 0 disables the checks.",
              "default": 2592000,
              "type": "number",
              "required": false
            }
          },
          {
            "session_idling_timeout": {
              "description": "Specifies how long the session can be inactive until it is considered invalid in seconds. 0 disables the checks and touching.",
              "default": 900,
              "type": "number",
              "required": false
            }
          },
          {
            "session_rolling_timeout": {
              "description": "Specifies how long the session can be used in seconds until it needs to be renewed. 0 disables the checks and rolling.",
              "default": 3600,
              "type": "number",
              "required": false
            }
          },
          {
            "session_absolute_timeout": {
              "description": "Limits how long the session can be renewed in seconds, until re-authentication is required. 0 disables the checks.",
              "default": 86400,
              "type": "number",
              "required": false
            }
          },
          {
            "session_cookie_path": {
              "type": "string",
              "required": false,
              "starts_with": "/",
              "default": "/",
              "match_none": [
                {
                  "pattern": "//",
                  "err": "must not have empty segments"
                }
              ],
              "description": "A string representing a URL path, such as /path/to/resource. Must start with a forward slash (/) and must not contain empty segments (i.e., two consecutive forward slashes)."
            }
          },
          {
            "session_cookie_domain": {
              "description": "The session cookie Domain flag.",
              "type": "string",
              "required": false
            }
          },
          {
            "session_cookie_same_site": {
              "type": "string",
              "required": false,
              "one_of": [
                "Strict",
                "Lax",
                "None",
                "Default"
              ],
              "default": "Lax",
              "description": "Controls whether a cookie is sent with cross-origin requests, providing some protection against cross-site request forgery attacks."
            }
          },
          {
            "session_cookie_http_only": {
              "description": "Forbids JavaScript from accessing the cookie, for example, through the `Document.cookie` property.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "session_cookie_secure": {
              "description": "Cookie is only sent to the server when a request is made with the https: scheme (except on localhost), and therefore is more resistant to man-in-the-middle attacks.",
              "type": "boolean",
              "required": false
            }
          },
          {
            "session_request_headers": {
              "type": "set",
              "elements": {
                "type": "string",
                "one_of": [
                  "id",
                  "audience",
                  "subject",
                  "timeout",
                  "idling-timeout",
                  "rolling-timeout",
                  "absolute-timeout"
                ]
              }
            }
          },
          {
            "session_response_headers": {
              "type": "set",
              "elements": {
                "type": "string",
                "one_of": [
                  "id",
                  "audience",
                  "subject",
                  "timeout",
                  "idling-timeout",
                  "rolling-timeout",
                  "absolute-timeout"
                ]
              }
            }
          },
          {
            "session_storage": {
              "type": "string",
              "required": false,
              "one_of": [
                "cookie",
                "memcache",
                "memcached",
                "redis"
              ],
              "default": "cookie",
              "description": "The session storage for session data: - `cookie`: stores session data with the session cookie (the session cannot be invalidated or revoked without changing session secret, but is stateless, and doesn't require a database) - `memcache`: stores session data in memcached - `redis`: stores session data in Redis"
            }
          },
          {
            "session_store_metadata": {
              "description": "Configures whether or not session metadata should be stored. This metadata includes information about the active sessions for a specific audience belonging to a specific subject.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "session_enforce_same_subject": {
              "description": "When set to `true`, audiences are forced to share the same subject.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "session_hash_subject": {
              "description": "When set to `true`, the value of subject is hashed before being stored. Only applies when `session_store_metadata` is enabled.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "session_hash_storage_key": {
              "description": "When set to `true`, the storage key (session ID) is hashed for extra security. Hashing the storage key means it is impossible to decrypt data from the storage without a cookie.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "session_memcached_prefix": {
              "description": "The memcached session key prefix.",
              "type": "string",
              "required": false
            }
          },
          {
            "session_memcached_socket": {
              "description": "The memcached unix socket path.",
              "type": "string",
              "required": false
            }
          },
          {
            "session_memcached_host": {
              "description": "The memcached host.",
              "default": "127.0.0.1",
              "type": "string",
              "required": false
            }
          },
          {
            "session_memcached_port": {
              "type": "integer",
              "required": false,
              "between": [
                0,
                65535
              ],
              "default": 11211,
              "description": "An integer representing a port number between 0 and 65535, inclusive."
            }
          },
          {
            "session_redis_prefix": {
              "description": "The Redis session key prefix.",
              "type": "string",
              "required": false
            }
          },
          {
            "session_redis_socket": {
              "description": "The Redis unix socket path.",
              "type": "string",
              "required": false
            }
          },
          {
            "session_redis_host": {
              "description": "The Redis host",
              "default": "127.0.0.1",
              "type": "string",
              "required": false
            }
          },
          {
            "session_redis_port": {
              "type": "integer",
              "required": false,
              "between": [
                0,
                65535
              ],
              "default": 6379,
              "description": "An integer representing a port number between 0 and 65535, inclusive."
            }
          },
          {
            "session_redis_username": {
              "description": "Username to use for Redis connection when the `redis` session storage is defined and ACL authentication is desired. If undefined, ACL authentication will not be performed. This requires Redis v6.0.0+. The username **cannot** be set to `default`.",
              "referenceable": true,
              "type": "string",
              "required": false
            }
          },
          {
            "session_redis_password": {
              "type": "string",
              "required": false,
              "referenceable": true,
              "encrypted": true,
              "description": "Password to use for Redis connection when the `redis` session storage is defined. If undefined, no AUTH commands are sent to Redis."
            }
          },
          {
            "session_redis_connect_timeout": {
              "description": "Session redis connection timeout in milliseconds.",
              "type": "integer",
              "required": false
            }
          },
          {
            "session_redis_read_timeout": {
              "description": "Session redis read timeout in milliseconds.",
              "type": "integer",
              "required": false
            }
          },
          {
            "session_redis_send_timeout": {
              "description": "Session redis send timeout in milliseconds.",
              "type": "integer",
              "required": false
            }
          },
          {
            "session_redis_ssl": {
              "description": "Use SSL/TLS for Redis connection.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "session_redis_ssl_verify": {
              "description": "Verify identity provider server certificate.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "session_redis_server_name": {
              "description": "The SNI used for connecting the Redis server.",
              "type": "string",
              "required": false
            }
          },
          {
            "session_redis_cluster_nodes": {
              "description": "The Redis cluster node host. Takes an array of host records, with either `ip` or `host`, and `port` values.",
              "elements": {
                "type": "record",
                "fields": [
                  {
                    "ip": {
                      "description": "A string representing a host name, such as example.com.",
                      "default": "127.0.0.1",
                      "type": "string",
                      "required": true
                    }
                  },
                  {
                    "port": {
                      "between": [
                        0,
                        65535
                      ],
                      "default": 6379,
                      "type": "integer",
                      "description": "An integer representing a port number between 0 and 65535, inclusive."
                    }
                  }
                ]
              },
              "type": "array",
              "required": false
            }
          },
          {
            "session_redis_cluster_max_redirections": {
              "description": "The Redis cluster maximum redirects.",
              "type": "integer",
              "required": false
            }
          },
          {
            "reverify": {
              "description": "Specifies whether to always verify tokens stored in the session.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "jwt_session_claim": {
              "description": "The claim to match against the JWT session cookie.",
              "default": "sid",
              "type": "string",
              "required": false
            }
          },
          {
            "jwt_session_cookie": {
              "description": "The name of the JWT session cookie.",
              "type": "string",
              "required": false
            }
          },
          {
            "bearer_token_param_type": {
              "type": "array",
              "required": false,
              "default": [
                "header",
                "query",
                "body"
              ],
              "description": "Where to look for the bearer token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body - `cookie`: search the HTTP request cookies specified with `config.bearer_token_cookie_name`",
              "elements": {
                "type": "string",
                "one_of": [
                  "header",
                  "cookie",
                  "query",
                  "body"
                ]
              }
            }
          },
          {
            "bearer_token_cookie_name": {
              "description": "The name of the cookie in which the bearer token is passed.",
              "type": "string",
              "required": false
            }
          },
          {
            "client_credentials_param_type": {
              "type": "array",
              "required": false,
              "default": [
                "header",
                "query",
                "body"
              ],
              "description": "Where to look for the client credentials: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search from the HTTP request body",
              "elements": {
                "type": "string",
                "one_of": [
                  "header",
                  "query",
                  "body"
                ]
              }
            }
          },
          {
            "password_param_type": {
              "type": "array",
              "required": false,
              "default": [
                "header",
                "query",
                "body"
              ],
              "description": "Where to look for the username and password: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body",
              "elements": {
                "type": "string",
                "one_of": [
                  "header",
                  "query",
                  "body"
                ]
              }
            }
          },
          {
            "id_token_param_type": {
              "type": "array",
              "required": false,
              "default": [
                "header",
                "query",
                "body"
              ],
              "description": "Where to look for the id token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body",
              "elements": {
                "type": "string",
                "one_of": [
                  "header",
                  "query",
                  "body"
                ]
              }
            }
          },
          {
            "id_token_param_name": {
              "description": "The name of the parameter used to pass the id token.",
              "type": "string",
              "required": false
            }
          },
          {
            "refresh_token_param_type": {
              "type": "array",
              "required": false,
              "default": [
                "header",
                "query",
                "body"
              ],
              "description": "Where to look for the refresh token: - `header`: search the HTTP headers - `query`: search the URL's query string - `body`: search the HTTP request body",
              "elements": {
                "type": "string",
                "one_of": [
                  "header",
                  "query",
                  "body"
                ]
              }
            }
          },
          {
            "refresh_token_param_name": {
              "description": "The name of the parameter used to pass the refresh token.",
              "type": "string",
              "required": false
            }
          },
          {
            "refresh_tokens": {
              "description": "Specifies whether the plugin should try to refresh (soon to be) expired access tokens if the plugin has a `refresh_token` available.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "upstream_headers_claims": {
              "description": "The upstream header claims.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "upstream_headers_names": {
              "description": "The upstream header names for the claim values.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "upstream_access_token_header": {
              "description": "The upstream access token header.",
              "default": "authorization:bearer",
              "type": "string",
              "required": false
            }
          },
          {
            "upstream_access_token_jwk_header": {
              "description": "The upstream access token JWK header.",
              "type": "string",
              "required": false
            }
          },
          {
            "upstream_id_token_header": {
              "description": "The upstream id token header.",
              "type": "string",
              "required": false
            }
          },
          {
            "upstream_id_token_jwk_header": {
              "description": "The upstream id token JWK header.",
              "type": "string",
              "required": false
            }
          },
          {
            "upstream_refresh_token_header": {
              "description": "The upstream refresh token header.",
              "type": "string",
              "required": false
            }
          },
          {
            "upstream_user_info_header": {
              "description": "The upstream user info header.",
              "type": "string",
              "required": false
            }
          },
          {
            "upstream_user_info_jwt_header": {
              "description": "The upstream user info JWT header (in case the user info returns a JWT response).",
              "type": "string",
              "required": false
            }
          },
          {
            "upstream_introspection_header": {
              "description": "The upstream introspection header.",
              "type": "string",
              "required": false
            }
          },
          {
            "upstream_introspection_jwt_header": {
              "type": "string",
              "required": false
            }
          },
          {
            "upstream_session_id_header": {
              "description": "The upstream session id header.",
              "type": "string",
              "required": false
            }
          },
          {
            "downstream_headers_claims": {
              "description": "The downstream header claims.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "downstream_headers_names": {
              "description": "The downstream header names for the claim values.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "downstream_access_token_header": {
              "description": "The downstream access token header.",
              "type": "string",
              "required": false
            }
          },
          {
            "downstream_access_token_jwk_header": {
              "description": "The downstream access token JWK header.",
              "type": "string",
              "required": false
            }
          },
          {
            "downstream_id_token_header": {
              "description": "The downstream id token header.",
              "type": "string",
              "required": false
            }
          },
          {
            "downstream_id_token_jwk_header": {
              "description": "The downstream id token JWK header.",
              "type": "string",
              "required": false
            }
          },
          {
            "downstream_refresh_token_header": {
              "description": "The downstream refresh token header.",
              "type": "string",
              "required": false
            }
          },
          {
            "downstream_user_info_header": {
              "description": "The downstream user info header.",
              "type": "string",
              "required": false
            }
          },
          {
            "downstream_user_info_jwt_header": {
              "description": "The downstream user info JWT header (in case the user info returns a JWT response).",
              "type": "string",
              "required": false
            }
          },
          {
            "downstream_introspection_header": {
              "description": "The downstream introspection header.",
              "type": "string",
              "required": false
            }
          },
          {
            "downstream_introspection_jwt_header": {
              "type": "string",
              "required": false
            }
          },
          {
            "downstream_session_id_header": {
              "description": "The downstream session id header.",
              "type": "string",
              "required": false
            }
          },
          {
            "login_methods": {
              "type": "array",
              "required": false,
              "default": [
                "authorization_code"
              ],
              "description": "Enable login functionality with specified grants.",
              "elements": {
                "type": "string",
                "one_of": [
                  "password",
                  "client_credentials",
                  "authorization_code",
                  "bearer",
                  "introspection",
                  "userinfo",
                  "kong_oauth2",
                  "refresh_token",
                  "session"
                ]
              }
            }
          },
          {
            "login_action": {
              "type": "string",
              "required": false,
              "one_of": [
                "upstream",
                "response",
                "redirect"
              ],
              "default": "upstream",
              "description": "What to do after successful login: - `upstream`: proxy request to upstream service - `response`: terminate request with a response - `redirect`: redirect to a different location"
            }
          },
          {
            "login_tokens": {
              "type": "array",
              "required": false,
              "default": [
                "id_token"
              ],
              "description": "What tokens to include in `response` body or `redirect` query string or fragment: - `id_token`: include id token - `access_token`: include access token - `refresh_token`: include refresh token - `tokens`: include the full token endpoint response - `introspection`: include introspection response",
              "elements": {
                "type": "string",
                "one_of": [
                  "id_token",
                  "access_token",
                  "refresh_token",
                  "tokens",
                  "introspection"
                ]
              }
            }
          },
          {
            "login_redirect_mode": {
              "type": "string",
              "required": false,
              "one_of": [
                "query",
                "fragment"
              ],
              "default": "fragment",
              "description": "Where to place `login_tokens` when using `redirect` `login_action`: - `query`: place tokens in query string - `fragment`: place tokens in url fragment (not readable by servers)"
            }
          },
          {
            "logout_query_arg": {
              "description": "The request query argument that activates the logout.",
              "type": "string",
              "required": false
            }
          },
          {
            "logout_post_arg": {
              "description": "The request body argument that activates the logout.",
              "type": "string",
              "required": false
            }
          },
          {
            "logout_uri_suffix": {
              "description": "The request URI suffix that activates the logout.",
              "type": "string",
              "required": false
            }
          },
          {
            "logout_methods": {
              "type": "array",
              "required": false,
              "default": [
                "POST",
                "DELETE"
              ],
              "description": "The request methods that can activate the logout: - `POST`: HTTP POST method - `GET`: HTTP GET method - `DELETE`: HTTP DELETE method",
              "elements": {
                "type": "string",
                "one_of": [
                  "POST",
                  "GET",
                  "DELETE"
                ]
              }
            }
          },
          {
            "logout_revoke": {
              "description": "Revoke tokens as part of the logout.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "logout_revoke_access_token": {
              "description": "Revoke the access token as part of the logout.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "logout_revoke_refresh_token": {
              "description": "Revoke the refresh token as part of the logout.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "consumer_claim": {
              "description": "The claim used for consumer mapping.",
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": false
            }
          },
          {
            "consumer_by": {
              "type": "array",
              "required": false,
              "default": [
                "username",
                "custom_id"
              ],
              "description": "Consumer fields used for mapping: - `id`: try to find the matching Consumer by `id` - `username`: try to find the matching Consumer by `username` - `custom_id`: try to find the matching Consumer by `custom_id`",
              "elements": {
                "type": "string",
                "one_of": [
                  "id",
                  "username",
                  "custom_id"
                ]
              }
            }
          },
          {
            "consumer_optional": {
              "description": "Do not terminate the request if consumer mapping fails.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "credential_claim": {
              "type": "array",
              "required": false,
              "default": [
                "sub"
              ],
              "description": "The claim used to derive virtual credentials (e.g. to be consumed by the rate-limiting plugin), in case the consumer mapping is not used.",
              "elements": {
                "type": "string"
              }
            }
          },
          {
            "anonymous": {
              "description": "An optional string (consumer UUID or username) value that functions as an “anonymous” consumer if authentication fails. If empty (default null), requests that fail authentication will return a `4xx` HTTP status code. This value must refer to the consumer `id` or `username` attribute, and **not** its `custom_id`.",
              "type": "string",
              "required": false
            }
          },
          {
            "run_on_preflight": {
              "description": "Specifies whether to run this plugin on pre-flight (`OPTIONS`) requests.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "leeway": {
              "description": "Allow some leeway (in seconds) on the iat claim and ttl / expiry verification.",
              "default": 0,
              "type": "number",
              "required": false
            }
          },
          {
            "verify_parameters": {
              "description": "Verify plugin configuration against discovery.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "verify_nonce": {
              "description": "Verify nonce on authorization code flow.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "verify_claims": {
              "description": "Verify tokens for standard claims.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "verify_signature": {
              "description": "Verify signature of tokens.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "ignore_signature": {
              "type": "array",
              "required": false,
              "default": [

              ],
              "description": "Skip the token signature verification on certain grants: - `password`: OAuth password grant - `client_credentials`: OAuth client credentials grant - `authorization_code`: authorization code flow - `refresh_token`: OAuth refresh token grant - `session`: session cookie authentication - `introspection`: OAuth introspection - `userinfo`: OpenID Connect user info endpoint authentication",
              "elements": {
                "type": "string",
                "one_of": [
                  "password",
                  "client_credentials",
                  "authorization_code",
                  "refresh_token",
                  "session",
                  "introspection",
                  "userinfo"
                ]
              }
            }
          },
          {
            "enable_hs_signatures": {
              "description": "Enable shared secret, for example, HS256, signatures (when disabled they will not be accepted).",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "disable_session": {
              "description": "Disable issuing the session cookie with the specified grants.",
              "elements": {
                "type": "string",
                "one_of": [
                  "password",
                  "client_credentials",
                  "authorization_code",
                  "bearer",
                  "introspection",
                  "userinfo",
                  "kong_oauth2",
                  "refresh_token",
                  "session"
                ]
              },
              "type": "array",
              "required": false
            }
          },
          {
            "cache_ttl": {
              "description": "The default cache ttl in seconds that is used in case the cached object does not specify the expiry.",
              "default": 3600,
              "type": "number",
              "required": false
            }
          },
          {
            "cache_ttl_max": {
              "description": "The maximum cache ttl in seconds (enforced).",
              "type": "number",
              "required": false
            }
          },
          {
            "cache_ttl_min": {
              "description": "The minimum cache ttl in seconds (enforced).",
              "type": "number",
              "required": false
            }
          },
          {
            "cache_ttl_neg": {
              "description": "The negative cache ttl in seconds.",
              "type": "number",
              "required": false
            }
          },
          {
            "cache_ttl_resurrect": {
              "description": "The resurrection ttl in seconds.",
              "type": "number",
              "required": false
            }
          },
          {
            "cache_tokens": {
              "description": "Cache the token endpoint requests.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "cache_tokens_salt": {
              "description": "Salt used for generating the cache key that is used for caching the token endpoint requests.",
              "type": "string",
              "auto": true,
              "required": false
            }
          },
          {
            "cache_introspection": {
              "description": "Cache the introspection endpoint requests.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "cache_token_exchange": {
              "description": "Cache the token exchange endpoint requests.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "cache_user_info": {
              "description": "Cache the user info requests.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "search_user_info": {
              "description": "Specify whether to use the user info endpoint to get additional claims for consumer mapping, credential mapping, authenticated groups, and upstream and downstream headers.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "hide_credentials": {
              "description": "Remove the credentials used for authentication from the request. If multiple credentials are sent with the same request, the plugin will remove those that were used for successful authentication.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "http_version": {
              "description": "The HTTP version used for the requests by this plugin: - `1.1`: HTTP 1.1 (the default) - `1.0`: HTTP 1.0",
              "default": 1.1,
              "type": "number",
              "required": false
            }
          },
          {
            "http_proxy": {
              "required": false,
              "type": "string",
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
            }
          },
          {
            "http_proxy_authorization": {
              "description": "The HTTP proxy authorization.",
              "type": "string",
              "required": false
            }
          },
          {
            "https_proxy": {
              "required": false,
              "type": "string",
              "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search."
            }
          },
          {
            "https_proxy_authorization": {
              "description": "The HTTPS proxy authorization.",
              "type": "string",
              "required": false
            }
          },
          {
            "no_proxy": {
              "description": "Do not use proxy with these hosts.",
              "type": "string",
              "required": false
            }
          },
          {
            "keepalive": {
              "description": "Use keepalive with the HTTP client.",
              "default": true,
              "type": "boolean",
              "required": false
            }
          },
          {
            "ssl_verify": {
              "description": "Verify identity provider server certificate.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "timeout": {
              "description": "Network IO timeout in milliseconds.",
              "default": 10000,
              "type": "number",
              "required": false
            }
          },
          {
            "display_errors": {
              "description": "Display errors on failure responses.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "by_username_ignore_case": {
              "description": "If `consumer_by` is set to `username`, specify whether `username` can match consumers case-insensitively.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "resolve_distributed_claims": {
              "description": "Distributed claims are represented by the `_claim_names` and `_claim_sources` members of the JSON object containing the claims. If this parameter is set to `true`, the plugin explicitly resolves these distributed claims.",
              "default": false,
              "type": "boolean",
              "required": false
            }
          },
          {
            "expose_error_code": {
              "default": true,
              "type": "boolean",
              "description": "Specifies whether to expose the error code header, as defined in RFC 6750. If an authorization request fails, this header is sent in the response. Set to `false` to disable."
            }
          },
          {
            "token_cache_key_include_scope": {
              "default": false,
              "type": "boolean",
              "description": "Include the scope in the token cache key, so token with different scopes are considered diffrent tokens."
            }
          },
          {
            "introspection_token_param_name": {
              "description": "Designate token's parameter name for introspection.",
              "default": "token",
              "type": "string",
              "required": false
            }
          },
          {
            "using_pseudo_issuer": {
              "default": false,
              "type": "boolean",
              "description": "If the plugin uses a pseudo issuer. When set to true, the plugin will not discover the configuration from the issuer URL."
            }
          },
          {
            "revocation_token_param_name": {
              "description": "Designate token's parameter name for revocation.",
              "default": "token",
              "type": "string",
              "required": false
            }
          },
          {
            "proof_of_possession_mtls": {
              "one_of": [
                "off",
                "strict",
                "optional"
              ],
              "default": "off",
              "type": "string",
              "description": "Enable mtls proof of possession. If set to strict, all tokens (from supported auth_methods: bearer, introspection, and session granted with bearer or introspection) are verified, if set to optional, only tokens that contain the certificate hash claim are verified. If the verification fails, the request will be rejected with 401."
            }
          },
          {
            "proof_of_possession_auth_methods_validation": {
              "default": true,
              "type": "boolean",
              "description": "If set to true, only the auth_methods that are compatible with Proof of Possession (PoP) can be configured when PoP is enabled. If set to false, all auth_methods will be configurable and PoP checks will be silently skipped for those auth_methods that are not compatible with PoP."
            }
          }
        ],
        "type": "record",
        "required": true
      }
    }
  ],
  "entity_checks": [

  ]
}
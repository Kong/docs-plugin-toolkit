{
  "entity_checks": [
    {
      "custom_entity_check": {
        "pass_errors_to_checker": true,
        "field_sources": [
          "config"
        ]
      }
    }
  ],
  "fields": [
    {
      "protocols": {
        "required": true,
        "description": "A set of strings representing HTTP protocols.",
        "type": "set",
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ]
      }
    },
    {
      "config": {
        "required": true,
        "fields": [
          {
            "nodes": {
              "required": true,
              "type": "array",
              "len_min": 1,
              "len_max": 64,
              "elements": {
                "subschema_error": "unknown node type: %q, expected one of: call, exit, jq, property, static",
                "description": "datakit nodes",
                "type": "record",
                "subschema_override_parent": true,
                "fields": [
                  {
                    "name": {
                      "required": true,
                      "description": "A label that uniquely identifies the node within the plugin configuration so that it can be used for input/output connections. Must be valid `snake_case` or `kebab-case`.",
                      "len_min": 1,
                      "len_max": 255,
                      "match_all": [
                        {
                          "err": "must be a valid identifier",
                          "pattern": "^[A-Za-z_][A-Za-z0-9_-]*$"
                        }
                      ],
                      "type": "string",
                      "match_none": [
                        {
                          "err": "reserved node name",
                          "pattern": "^_$"
                        },
                        {
                          "err": "reserved node name",
                          "pattern": "^context$"
                        },
                        {
                          "err": "reserved node name",
                          "pattern": "^ctx$"
                        },
                        {
                          "err": "reserved node name",
                          "pattern": "^error$"
                        },
                        {
                          "err": "reserved node name",
                          "pattern": "^globals$"
                        },
                        {
                          "err": "reserved node name",
                          "pattern": "^kong$"
                        },
                        {
                          "err": "reserved node name",
                          "pattern": "^ngx$"
                        },
                        {
                          "err": "reserved node name",
                          "pattern": "^node$"
                        },
                        {
                          "err": "reserved node name",
                          "pattern": "^plan$"
                        },
                        {
                          "err": "reserved node name",
                          "pattern": "^plugin$"
                        },
                        {
                          "err": "reserved node name",
                          "pattern": "^property$"
                        },
                        {
                          "err": "reserved node name",
                          "pattern": "^self$"
                        },
                        {
                          "err": "reserved node name",
                          "pattern": "^static$"
                        },
                        {
                          "err": "reserved node name",
                          "pattern": "^vars$"
                        }
                      ],
                      "examples": [
                        {
                          "value": "snake_case"
                        },
                        {
                          "value": "SCREAMING_SNAKE_CASE"
                        },
                        {
                          "value": "kebab-case"
                        },
                        {
                          "value": "KEBAB-CASE"
                        },
                        {
                          "value": "set-property"
                        },
                        {
                          "value": "get-property"
                        },
                        {
                          "value": "send_api_request"
                        },
                        {
                          "value": "filter_01"
                        },
                        {
                          "value": "filter_02"
                        }
                      ],
                      "not_one_of": [
                        "request",
                        "response",
                        "service_request",
                        "service_response",
                        "vault"
                      ]
                    }
                  },
                  {
                    "type": {
                      "required": true,
                      "one_of": [
                        "call",
                        "exit",
                        "jq",
                        "property",
                        "static"
                      ],
                      "type": "string"
                    }
                  }
                ],
                "subschema_definitions": {
                  "static": {
                    "fields": [
                      {
                        "values": {
                          "required": true,
                          "description": "An object with string keys and freeform values",
                          "json_schema": {
                            "inline": {
                              "type": "object"
                            }
                          },
                          "type": "json"
                        }
                      },
                      {
                        "output": {
                          "required": false,
                          "description": "The entire `.values` map",
                          "type": "string",
                          "len_min": 1,
                          "len_max": 255,
                          "match_any": {
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*$",
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                            ],
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                          }
                        }
                      },
                      {
                        "outputs": {
                          "required": false,
                          "description": "Individual items from `.values`, referenced by key",
                          "type": "map",
                          "values": {
                            "match_any": {
                              "patterns": [
                                "^[A-Za-z_][A-Za-z0-9_-]*$",
                                "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                              ],
                              "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                            },
                            "len_min": 1,
                            "len_max": 255,
                            "type": "string"
                          },
                          "keys": {
                            "len_min": 1,
                            "len_max": 255,
                            "type": "string"
                          }
                        }
                      }
                    ],
                    "description": "Produce reusable outputs from statically-configured values",
                    "entity_checks": [
                      {
                        "mutually_exclusive": [
                          "output",
                          "outputs"
                        ]
                      }
                    ],
                    "type": "record"
                  },
                  "exit": {
                    "fields": [
                      {
                        "status": {
                          "required": false,
                          "description": "HTTP status code",
                          "type": "integer",
                          "between": [
                            200,
                            599
                          ],
                          "default": 200
                        }
                      },
                      {
                        "warn_headers_sent": {
                          "required": false,
                          "type": "boolean"
                        }
                      },
                      {
                        "input": {
                          "required": false,
                          "description": "exit node input",
                          "type": "string",
                          "len_min": 1,
                          "len_max": 255,
                          "match_any": {
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*$",
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                            ],
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                          }
                        }
                      },
                      {
                        "inputs": {
                          "required": false,
                          "description": "exit node inputs",
                          "fields": [
                            {
                              "body": {
                                "required": false,
                                "description": "HTTP response body",
                                "type": "string",
                                "len_min": 1,
                                "len_max": 255,
                                "match_any": {
                                  "patterns": [
                                    "^[A-Za-z_][A-Za-z0-9_-]*$",
                                    "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                                  ],
                                  "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                                }
                              }
                            },
                            {
                              "headers": {
                                "required": false,
                                "description": "HTTP response headers",
                                "type": "string",
                                "len_min": 1,
                                "len_max": 255,
                                "match_any": {
                                  "patterns": [
                                    "^[A-Za-z_][A-Za-z0-9_-]*$",
                                    "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                                  ],
                                  "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                                }
                              }
                            }
                          ],
                          "type": "record"
                        }
                      }
                    ],
                    "description": "Terminate the request and send a response to the client",
                    "entity_checks": [
                      {
                        "mutually_exclusive": [
                          "input",
                          "inputs"
                        ]
                      }
                    ],
                    "type": "record"
                  },
                  "call": {
                    "fields": [
                      {
                        "method": {
                          "description": "A string representing an HTTP method, such as GET, POST, PUT, or DELETE. The string must contain only uppercase letters.",
                          "type": "string",
                          "match": "^%u+$",
                          "len_min": 1,
                          "len_max": 32,
                          "default": "GET"
                        }
                      },
                      {
                        "ssl_server_name": {
                          "type": "string",
                          "description": "A string representing an SNI (server name indication) value for TLS."
                        }
                      },
                      {
                        "timeout": {
                          "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                          "between": [
                            0,
                            2147483646
                          ],
                          "type": "integer"
                        }
                      },
                      {
                        "url": {
                          "required": true,
                          "description": "A string representing a URL, such as https://example.com/path/to/resource?q=search.",
                          "type": "string"
                        }
                      },
                      {
                        "input": {
                          "required": false,
                          "description": "call node input",
                          "type": "string",
                          "len_min": 1,
                          "len_max": 255,
                          "match_any": {
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*$",
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                            ],
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                          }
                        }
                      },
                      {
                        "inputs": {
                          "required": false,
                          "description": "call node inputs",
                          "fields": [
                            {
                              "body": {
                                "required": false,
                                "description": "HTTP request body",
                                "type": "string",
                                "len_min": 1,
                                "len_max": 255,
                                "match_any": {
                                  "patterns": [
                                    "^[A-Za-z_][A-Za-z0-9_-]*$",
                                    "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                                  ],
                                  "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                                }
                              }
                            },
                            {
                              "headers": {
                                "required": false,
                                "description": "HTTP request headers",
                                "type": "string",
                                "len_min": 1,
                                "len_max": 255,
                                "match_any": {
                                  "patterns": [
                                    "^[A-Za-z_][A-Za-z0-9_-]*$",
                                    "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                                  ],
                                  "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                                }
                              }
                            },
                            {
                              "query": {
                                "required": false,
                                "description": "HTTP request query",
                                "type": "string",
                                "len_min": 1,
                                "len_max": 255,
                                "match_any": {
                                  "patterns": [
                                    "^[A-Za-z_][A-Za-z0-9_-]*$",
                                    "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                                  ],
                                  "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                                }
                              }
                            }
                          ],
                          "type": "record"
                        }
                      },
                      {
                        "output": {
                          "required": false,
                          "description": "call node output",
                          "type": "string",
                          "len_min": 1,
                          "len_max": 255,
                          "match_any": {
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*$",
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                            ],
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                          }
                        }
                      },
                      {
                        "outputs": {
                          "required": false,
                          "description": "call node outputs",
                          "fields": [
                            {
                              "body": {
                                "required": false,
                                "description": "HTTP response body",
                                "type": "string",
                                "len_min": 1,
                                "len_max": 255,
                                "match_any": {
                                  "patterns": [
                                    "^[A-Za-z_][A-Za-z0-9_-]*$",
                                    "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                                  ],
                                  "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                                }
                              }
                            },
                            {
                              "headers": {
                                "required": false,
                                "description": "HTTP response headers",
                                "type": "string",
                                "len_min": 1,
                                "len_max": 255,
                                "match_any": {
                                  "patterns": [
                                    "^[A-Za-z_][A-Za-z0-9_-]*$",
                                    "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                                  ],
                                  "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                                }
                              }
                            },
                            {
                              "status": {
                                "required": false,
                                "description": "HTTP response status code",
                                "type": "string",
                                "len_min": 1,
                                "len_max": 255,
                                "match_any": {
                                  "patterns": [
                                    "^[A-Za-z_][A-Za-z0-9_-]*$",
                                    "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                                  ],
                                  "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                                }
                              }
                            }
                          ],
                          "type": "record"
                        }
                      }
                    ],
                    "description": "Make an external HTTP request",
                    "entity_checks": [
                      {
                        "mutually_exclusive": [
                          "input",
                          "inputs"
                        ]
                      },
                      {
                        "mutually_exclusive": [
                          "output",
                          "outputs"
                        ]
                      }
                    ],
                    "type": "record"
                  },
                  "jq": {
                    "fields": [
                      {
                        "jq": {
                          "required": true,
                          "description": "The jq filter text. Refer to https://jqlang.org/manual/ for full documentation.",
                          "type": "string",
                          "len_min": 1,
                          "len_max": 10240
                        }
                      },
                      {
                        "input": {
                          "required": false,
                          "description": "filter input(s)",
                          "type": "string",
                          "len_min": 1,
                          "len_max": 255,
                          "match_any": {
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*$",
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                            ],
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                          }
                        }
                      },
                      {
                        "inputs": {
                          "required": false,
                          "description": "filter input(s)",
                          "type": "map",
                          "values": {
                            "match_any": {
                              "patterns": [
                                "^[A-Za-z_][A-Za-z0-9_-]*$",
                                "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                              ],
                              "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                            },
                            "len_min": 1,
                            "len_max": 255,
                            "type": "string"
                          },
                          "keys": {
                            "len_min": 1,
                            "len_max": 255,
                            "type": "string"
                          }
                        }
                      },
                      {
                        "output": {
                          "required": false,
                          "description": "filter output(s)",
                          "type": "string",
                          "len_min": 1,
                          "len_max": 255,
                          "match_any": {
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*$",
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                            ],
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                          }
                        }
                      }
                    ],
                    "description": "Process data using `jq` syntax",
                    "entity_checks": [
                      {
                        "mutually_exclusive": [
                          "input",
                          "inputs"
                        ]
                      }
                    ],
                    "type": "record"
                  },
                  "property": {
                    "description": "Get or set a property",
                    "fields": [
                      {
                        "content_type": {
                          "required": false,
                          "description": "The expected mime type of the property value. When set to `application/json`, SET operations will JSON-encode input data before writing it, and GET operations will JSON-decode output data after reading it. Otherwise, this setting has no effect.",
                          "one_of": [
                            "application/json",
                            "text/plain",
                            "application/octet-stream"
                          ],
                          "type": "string"
                        }
                      },
                      {
                        "property": {
                          "required": true,
                          "description": "The property name to get/set",
                          "type": "string",
                          "len_min": 1,
                          "len_max": 255
                        }
                      },
                      {
                        "input": {
                          "required": false,
                          "description": "Property input source. When connected, this node operates in SET mode and writes input data to the property. Otherwise, the node operates in GET mode and reads the property.",
                          "type": "string",
                          "len_min": 1,
                          "len_max": 255,
                          "match_any": {
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*$",
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                            ],
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                          }
                        }
                      },
                      {
                        "output": {
                          "required": false,
                          "description": "Property output. This can be connected regardless of whether the node is operating in GET mode or SET mode.",
                          "type": "string",
                          "len_min": 1,
                          "len_max": 255,
                          "match_any": {
                            "patterns": [
                              "^[A-Za-z_][A-Za-z0-9_-]*$",
                              "^[A-Za-z_][A-Za-z0-9_-]*%..+$"
                            ],
                            "err": "must be one of NODE_NAME or NODE_NAME.FIELD"
                          }
                        }
                      }
                    ],
                    "type": "record"
                  }
                },
                "subschema_key": "type"
              }
            }
          },
          {
            "resources": {
              "required": false,
              "fields": [
                {
                  "vault": {
                    "required": false,
                    "type": "map",
                    "keys": {
                      "len_max": 255,
                      "len_min": 1,
                      "match_all": [
                        {
                          "err": "must be a valid identifier",
                          "pattern": "^[A-Za-z_][A-Za-z0-9_-]*$"
                        }
                      ],
                      "type": "string"
                    },
                    "values": {
                      "required": true,
                      "type": "string",
                      "len_min": 1,
                      "len_max": 4095,
                      "referenceable": true
                    },
                    "len_max": 64,
                    "len_min": 1
                  }
                }
              ],
              "type": "record"
            }
          },
          {
            "debug": {
              "required": false,
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "type": "record"
      }
    }
  ]
}
{
  "fields": [
    {
      "protocols": {
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ],
        "type": "set",
        "required": true,
        "elements": {
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https",
            "tcp",
            "tls",
            "tls_passthrough",
            "udp",
            "ws",
            "wss"
          ],
          "type": "string"
        }
      }
    },
    {
      "config": {
        "type": "record",
        "required": true,
        "fields": [
          {
            "response_code": {
              "default": [
                200,
                301,
                404
              ],
              "type": "array",
              "required": true,
              "elements": {
                "between": [
                  100,
                  900
                ],
                "type": "integer"
              },
              "len_min": 1,
              "description": "Upstream response status code considered cacheable."
            }
          },
          {
            "request_method": {
              "default": [
                "GET",
                "HEAD"
              ],
              "type": "array",
              "required": true,
              "elements": {
                "one_of": [
                  "HEAD",
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT"
                ],
                "type": "string"
              },
              "description": "Downstream request methods considered cacheable."
            }
          },
          {
            "content_type": {
              "default": [
                "text/plain",
                "application/json"
              ],
              "type": "array",
              "required": true,
              "elements": {
                "type": "string"
              },
              "description": "Upstream response content types considered cacheable. \n\nThe wildcard content type can be used to match any specific type or subtype.\nFor example, `application/*` matches any subtypes of the application, `*/*` matches all content types. \n\nNote that `*/*` does not match with a content type that contains a parameter (e.g. `*/*` would not match `application/json; charset=utf-8`). \nIf the response content type does not match the configuration, a `Bypass` cache status is returned."
            }
          },
          {
            "cache_ttl": {
              "gt": 0,
              "type": "integer",
              "default": 300,
              "description": "TTL, in seconds, of cache entities."
            }
          },
          {
            "strategy": {
              "type": "string",
              "required": true,
              "one_of": [
                "memory"
              ],
              "description": "The backing data store in which to hold cache entities. The only accepted value is `memory`."
            }
          },
          {
            "cache_control": {
              "default": false,
              "type": "boolean",
              "required": true,
              "description": "When enabled, respect the Cache-Control behaviors defined in [RFC7234](https://tools.ietf.org/html/rfc7234#section-5.2)."
            }
          },
          {
            "ignore_uri_case": {
              "default": false,
              "type": "boolean",
              "required": false,
              "description": "If set to `true`, requests will be cached while ignoring case sensitivity in the URI."
            }
          },
          {
            "storage_ttl": {
              "type": "integer",
              "description": "Number of seconds to keep resources in the storage backend. This value is independent of `cache_ttl` or resource TTLs defined by Cache-Control behaviors."
            }
          },
          {
            "memory": {
              "type": "record",
              "required": true,
              "fields": [
                {
                  "dictionary_name": {
                    "default": "kong_db_cache",
                    "type": "string",
                    "required": true,
                    "description": "The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template."
                  }
                }
              ]
            }
          },
          {
            "vary_query_params": {
              "elements": {
                "type": "string"
              },
              "type": "array",
              "description": "Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration."
            }
          },
          {
            "vary_headers": {
              "elements": {
                "type": "string"
              },
              "type": "array",
              "description": "Relevant headers considered for the cache key. If undefined, none of the headers are taken into consideration."
            }
          }
        ]
      }
    }
  ]
}

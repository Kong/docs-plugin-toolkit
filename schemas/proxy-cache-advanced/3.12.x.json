{
  "fields": [
    {
      "protocols": {
        "required": true,
        "description": "A set of strings representing HTTP protocols.",
        "type": "set",
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ]
      }
    },
    {
      "config": {
        "required": true,
        "fields": [
          {
            "response_code": {
              "required": true,
              "description": "Upstream response status code considered cacheable. The integers must be a value between 100 and 900.",
              "type": "array",
              "len_min": 1,
              "elements": {
                "between": [
                  100,
                  900
                ],
                "type": "integer"
              },
              "default": [
                200,
                301,
                404
              ]
            }
          },
          {
            "request_method": {
              "required": true,
              "description": "Downstream request methods considered cacheable. Available options: `HEAD`, `GET`, `POST`, `PATCH`, `PUT`.",
              "type": "array",
              "elements": {
                "type": "string",
                "one_of": [
                  "HEAD",
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT"
                ]
              },
              "default": [
                "GET",
                "HEAD"
              ]
            }
          },
          {
            "content_type": {
              "required": true,
              "description": "Upstream response content types considered cacheable. The plugin performs an **exact match** against each specified value; for example, if the upstream is expected to respond with a `application/json; charset=utf-8` content-type, the plugin configuration must contain said value or a `Bypass` cache status is returned.",
              "type": "array",
              "elements": {
                "type": "string"
              },
              "default": [
                "text/plain",
                "application/json"
              ]
            }
          },
          {
            "cache_ttl": {
              "default": 300,
              "description": "TTL in seconds of cache entities.",
              "gt": 0,
              "type": "integer"
            }
          },
          {
            "strategy": {
              "required": true,
              "description": "The backing data store in which to hold cache entities. Accepted values are: `memory` and `redis`.",
              "type": "string",
              "one_of": [
                "memory",
                "redis"
              ]
            }
          },
          {
            "cache_control": {
              "required": true,
              "description": "When enabled, respect the Cache-Control behaviors defined in RFC7234.",
              "default": false,
              "type": "boolean"
            }
          },
          {
            "ignore_uri_case": {
              "required": false,
              "description": "Determines whether to treat URIs as case sensitive. By default, case sensitivity is enabled. If set to true, requests are cached while ignoring case sensitivity in the URI.",
              "default": false,
              "type": "boolean"
            }
          },
          {
            "storage_ttl": {
              "type": "integer",
              "description": "Number of seconds to keep resources in the storage backend. This value is independent of `cache_ttl` or resource TTLs defined by Cache-Control behaviors."
            }
          },
          {
            "memory": {
              "required": true,
              "fields": [
                {
                  "dictionary_name": {
                    "required": true,
                    "description": "The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template.",
                    "default": "kong_db_cache",
                    "type": "string"
                  }
                }
              ],
              "type": "record"
            }
          },
          {
            "vary_query_params": {
              "elements": {
                "type": "string"
              },
              "description": "Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration. By default, the max number of params accepted is 100. You can change this value via the `lua_max_post_args` in `kong.conf`.",
              "type": "array"
            }
          },
          {
            "vary_headers": {
              "elements": {
                "type": "string"
              },
              "description": "Relevant headers considered for the cache key. If undefined, none of the headers are taken into consideration.",
              "type": "array"
            }
          },
          {
            "response_headers": {
              "required": true,
              "description": "Caching related diagnostic headers that should be included in cached responses",
              "fields": [
                {
                  "age": {
                    "type": "boolean",
                    "default": true
                  }
                },
                {
                  "X-Cache-Status": {
                    "type": "boolean",
                    "default": true
                  }
                },
                {
                  "X-Cache-Key": {
                    "type": "boolean",
                    "default": true
                  }
                }
              ],
              "type": "record"
            }
          },
          {
            "redis": {
              "required": true,
              "shorthand_fields": [
                {
                  "timeout": {
                    "type": "integer",
                    "deprecation": {
                      "removal_in_version": "4.0",
                      "message": "redis schema field `timeout` is deprecated, use `connect_timeout`, `send_timeout` and `read_timeout`",
                      "replaced_with": [
                        {
                          "path": [
                            "connect_timeout"
                          ]
                        },
                        {
                          "path": [
                            "send_timeout"
                          ]
                        },
                        {
                          "path": [
                            "read_timeout"
                          ]
                        }
                      ]
                    }
                  }
                },
                {
                  "sentinel_addresses": {
                    "elements": {
                      "type": "string"
                    },
                    "len_min": 1,
                    "deprecation": {
                      "removal_in_version": "4.0",
                      "message": "sentinel_addresses is deprecated, please use sentinel_nodes instead",
                      "replaced_with": [
                        {
                          "path": [
                            "sentinel_nodes"
                          ]
                        }
                      ]
                    },
                    "type": "array"
                  }
                },
                {
                  "cluster_addresses": {
                    "elements": {
                      "type": "string"
                    },
                    "len_min": 1,
                    "deprecation": {
                      "removal_in_version": "4.0",
                      "message": "cluster_addresses is deprecated, please use cluster_nodes instead",
                      "replaced_with": [
                        {
                          "path": [
                            "cluster_nodes"
                          ]
                        }
                      ]
                    },
                    "type": "array"
                  }
                }
              ],
              "fields": [
                {
                  "host": {
                    "description": "A string representing a host name, such as example.com.",
                    "default": "127.0.0.1",
                    "type": "string"
                  }
                },
                {
                  "port": {
                    "default": 6379,
                    "description": "An integer representing a port number between 0 and 65535, inclusive.",
                    "between": [
                      0,
                      65535
                    ],
                    "type": "integer"
                  }
                },
                {
                  "connect_timeout": {
                    "default": 2000,
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                    "between": [
                      0,
                      2147483646
                    ],
                    "type": "integer"
                  }
                },
                {
                  "send_timeout": {
                    "default": 2000,
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                    "between": [
                      0,
                      2147483646
                    ],
                    "type": "integer"
                  }
                },
                {
                  "read_timeout": {
                    "default": 2000,
                    "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                    "between": [
                      0,
                      2147483646
                    ],
                    "type": "integer"
                  }
                },
                {
                  "username": {
                    "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.",
                    "type": "string",
                    "referenceable": true
                  }
                },
                {
                  "password": {
                    "encrypted": true,
                    "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.",
                    "type": "string",
                    "referenceable": true
                  }
                },
                {
                  "sentinel_username": {
                    "description": "Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.",
                    "type": "string",
                    "referenceable": true
                  }
                },
                {
                  "sentinel_password": {
                    "encrypted": true,
                    "description": "Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.",
                    "type": "string",
                    "referenceable": true
                  }
                },
                {
                  "database": {
                    "description": "Database to use for the Redis connection when using the `redis` strategy",
                    "type": "integer",
                    "default": 0
                  }
                },
                {
                  "keepalive_pool_size": {
                    "type": "integer",
                    "description": "The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.",
                    "between": [
                      1,
                      2147483646
                    ],
                    "default": 256
                  }
                },
                {
                  "keepalive_backlog": {
                    "description": "Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.",
                    "between": [
                      0,
                      2147483646
                    ],
                    "type": "integer"
                  }
                },
                {
                  "sentinel_master": {
                    "type": "string",
                    "description": "Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel."
                  }
                },
                {
                  "sentinel_role": {
                    "description": "Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.",
                    "type": "string",
                    "one_of": [
                      "master",
                      "slave",
                      "any"
                    ]
                  }
                },
                {
                  "sentinel_nodes": {
                    "required": false,
                    "description": "Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.",
                    "type": "array",
                    "len_min": 1,
                    "elements": {
                      "type": "record",
                      "fields": [
                        {
                          "host": {
                            "required": true,
                            "description": "A string representing a host name, such as example.com.",
                            "default": "127.0.0.1",
                            "type": "string"
                          }
                        },
                        {
                          "port": {
                            "default": 6379,
                            "description": "An integer representing a port number between 0 and 65535, inclusive.",
                            "between": [
                              0,
                              65535
                            ],
                            "type": "integer"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "cluster_nodes": {
                    "required": false,
                    "description": "Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.",
                    "type": "array",
                    "len_min": 1,
                    "elements": {
                      "type": "record",
                      "fields": [
                        {
                          "ip": {
                            "required": true,
                            "description": "A string representing a host name, such as example.com.",
                            "default": "127.0.0.1",
                            "type": "string"
                          }
                        },
                        {
                          "port": {
                            "default": 6379,
                            "description": "An integer representing a port number between 0 and 65535, inclusive.",
                            "between": [
                              0,
                              65535
                            ],
                            "type": "integer"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "ssl": {
                    "required": false,
                    "description": "If set to true, uses SSL to connect to Redis.",
                    "type": "boolean",
                    "default": false
                  }
                },
                {
                  "ssl_verify": {
                    "required": false,
                    "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.",
                    "type": "boolean",
                    "default": false
                  }
                },
                {
                  "server_name": {
                    "required": false,
                    "description": "A string representing an SNI (server name indication) value for TLS.",
                    "type": "string"
                  }
                },
                {
                  "cluster_max_redirections": {
                    "required": false,
                    "description": "Maximum retry attempts for redirection.",
                    "type": "integer",
                    "default": 5
                  }
                },
                {
                  "connection_is_proxied": {
                    "required": false,
                    "description": "If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.",
                    "type": "boolean",
                    "default": false
                  }
                }
              ],
              "entity_checks": [
                {
                  "mutually_required": [
                    "host",
                    "port"
                  ]
                },
                {
                  "mutually_required": [
                    "sentinel_master",
                    "sentinel_role",
                    "sentinel_nodes"
                  ]
                },
                {
                  "mutually_required": [
                    "connect_timeout",
                    "send_timeout",
                    "read_timeout"
                  ]
                },
                {
                  "conditional": {
                    "then_match": {
                      "required": true
                    },
                    "if_match": {
                      "eq": true
                    },
                    "then_field": "host",
                    "if_field": "connection_is_proxied"
                  }
                },
                {
                  "custom_entity_check": {
                    "field_sources": [
                      "database",
                      "connection_is_proxied"
                    ],
                    "run_with_missing_fields": true
                  }
                },
                {
                  "custom_entity_check": {
                    "field_sources": [
                      "cluster_nodes",
                      "connection_is_proxied"
                    ],
                    "run_with_missing_fields": true
                  }
                },
                {
                  "custom_entity_check": {
                    "field_sources": [
                      "sentinel_role",
                      "connection_is_proxied"
                    ],
                    "run_with_missing_fields": true
                  }
                }
              ],
              "type": "record"
            }
          },
          {
            "bypass_on_err": {
              "description": "Unhandled errors while trying to retrieve a cache entry (such as redis down) are resolved with `Bypass`, with the request going upstream.",
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "type": "record"
      }
    }
  ],
  "entity_checks": [
    {
      "custom_entity_check": {
        "field_sources": [
          "config"
        ]
      }
    }
  ],
  "supported_partials": {
    "redis-ee": [
      "config.redis"
    ]
  }
}
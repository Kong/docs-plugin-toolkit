{
  "fields": [
    {
      "config": {
        "type": "record",
        "required": true,
        "fields": [
          {
            "response_code": {
              "elements": {
                "between": [
                  100,
                  900
                ],
                "type": "integer"
              },
              "type": "array",
              "required": true,
              "len_min": 1,
              "default": [
                200,
                301,
                404
              ],
              "examples": [
                [
                  200
                ]
              ],
              "description": "Upstream response status code considered cacheable. The integers must be a value\nbetween 100 and 900."
            }
          },
          {
            "request_method": {
              "elements": {
                "one_of": [
                  "HEAD",
                  "GET",
                  "POST",
                  "PATCH",
                  "PUT"
                ],
                "type": "string"
              },
              "type": "array",
              "required": true,
              "default": [
                "GET",
                "HEAD"
              ],
              "examples": [
                [
                  "GET",
                  "HEAD"
                ]
              ],
              "description": "Downstream request methods considered cacheable. Available options: `HEAD`, `GET`, `POST`, `PATCH`, `PUT`."
            }
          },
          {
            "content_type": {
              "elements": {
                "type": "string"
              },
              "type": "array",
              "required": true,
              "default": [
                "text/plain",
                "application/json"
              ],
              "examples": [
                [
                  "text/plain",
                  "application/json"
                ]
              ],
              "description": "Upstream response content types considered cacheable. The plugin performs an **exact match** against each specified value; for example, if the upstream is expected to respond with a `application/json; charset=utf-8` content-type, the plugin configuration must contain said value or a `Bypass` cache status is returned."
            }
          },
          {
            "cache_ttl": {
              "type": "integer",
              "gt": 0,
              "default": 300,
              "description": "TTL in seconds of cache entities."
            }
          },
          {
            "strategy": {
              "type": "string",
              "one_of": [
                "memory",
                "redis"
              ],
              "required": true,
              "examples": [
                "memory"
              ],
              "description": "The backing data store in which to hold cache entities. Accepted values are: `memory` and `redis`."
            }
          },
          {
            "cache_control": {
              "type": "boolean",
              "required": true,
              "default": false,
              "description": "When enabled, respect the Cache-Control behaviors defined in [RFC7234](https://tools.ietf.org/html/rfc7234#section-5.2)."
            }
          },
          {
            "storage_ttl": {
              "type": "integer",
              "description": "Number of seconds to keep resources in the storage backend. This value is independent\nof `cache_ttl` or resource TTLs defined by Cache-Control behaviors."
            }
          },
          {
            "memory": {
              "type": "record",
              "required": true,
              "fields": [
                {
                  "dictionary_name": {
                    "type": "string",
                    "default": "kong_db_cache",
                    "required": true,
                    "description": "The name of the shared dictionary in which to hold cache entities when the memory strategy is selected. Note that this dictionary currently must be defined manually in the Kong Nginx template."
                  }
                }
              ]
            }
          },
          {
            "vary_query_params": {
              "elements": {
                "type": "string"
              },
              "type": "array",
              "description": "Relevant query parameters considered for the cache key. If undefined, all params are taken into consideration."
            }
          },
          {
            "vary_headers": {
              "elements": {
                "type": "string"
              },
              "type": "array",
              "description": "Relevant headers considered for the cache key. If undefined, none of the headers are taken into consideration."
            }
          },
          {
            "redis": {
              "required": true,
              "type": "record",
              "entity_checks": [
                {
                  "mutually_exclusive_sets": {
                    "set1": [
                      "sentinel_master",
                      "sentinel_role",
                      "sentinel_addresses"
                    ],
                    "set2": [
                      "host",
                      "port"
                    ]
                  }
                },
                {
                  "mutually_exclusive_sets": {
                    "set1": [
                      "sentinel_master",
                      "sentinel_role",
                      "sentinel_addresses"
                    ],
                    "set2": [
                      "cluster_addresses"
                    ]
                  }
                },
                {
                  "mutually_exclusive_sets": {
                    "set1": [
                      "cluster_addresses"
                    ],
                    "set2": [
                      "host",
                      "port"
                    ]
                  }
                },
                {
                  "mutually_required": [
                    "sentinel_master",
                    "sentinel_role",
                    "sentinel_addresses"
                  ]
                },
                {
                  "mutually_required": [
                    "host",
                    "port"
                  ]
                }
              ],
              "fields": [
                {
                  "host": {
                    "type": "string",
                    "description": "Host to use for Redis connection when the redis strategy is defined."
                  }
                },
                {
                  "port": {
                    "between": [
                      0,
                      65535
                    ],
                    "type": "integer",
                    "description": "Port to use for Redis connections when the `redis` strategy is defined. Must be a\nvalue between 0 and 65535. Default: 6379."
                  }
                },
                {
                  "timeout": {
                    "between": [
                      0,
                      2147483646
                    ],
                    "type": "integer",
                    "default": 2000,
                    "description": "Connection timeout to use for Redis connection when the `redis` strategy is defined."
                  }
                },
                {
                  "password": {
                    "type": "string",
                    "description": "Password to use for Redis connection when the `redis` strategy is defined.\nIf undefined, no AUTH commands are sent to Redis."
                  }
                },
                {
                  "sentinel_password": {
                    "type": "string",
                    "description": "Sentinel password to authenticate with a Redis Sentinel instance.\nIf undefined, no AUTH commands are sent to Redis Sentinels."
                  }
                },
                {
                  "database": {
                    "type": "integer",
                    "default": 0,
                    "description": "Database to use for Redis connection when the `redis` strategy is defined."
                  }
                },
                {
                  "sentinel_master": {
                    "type": "string",
                    "description": "Sentinel master to use for Redis connection when the `redis` strategy is defined. Defining this value implies using Redis Sentinel."
                  }
                },
                {
                  "sentinel_role": {
                    "one_of": [
                      "master",
                      "slave",
                      "any"
                    ],
                    "type": "string",
                    "description": "Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value\nimplies using Redis Sentinel. Available options:  `master`, `slave`, `any`."
                  }
                },
                {
                  "sentinel_addresses": {
                    "len_min": 1,
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "description": "Sentinel addresses to use for Redis connections when the `redis` strategy is defined.\nDefining this value implies using Redis Sentinel. Each string element must\nbe a hostname. The minimum length of the array is 1 element."
                  }
                },
                {
                  "cluster_addresses": {
                    "len_min": 1,
                    "type": "array",
                    "elements": {
                      "type": "string"
                    },
                    "description": "Cluster addresses to use for Redis connection when the `redis` strategy is defined.\nDefining this value implies using Redis cluster. Each string element must\nbe a hostname. The minimum length of the array is 1 element."
                  }
                },
                {
                  "ssl": {
                    "type": "boolean",
                    "required": false,
                    "default": false,
                    "description": "If set to `true`, then uses SSL to connect to Redis.\n**Note:** This parameter is only available for Kong Gateway versions\n2.2.x and later."
                  }
                },
                {
                  "ssl_verify": {
                    "type": "boolean",
                    "required": false,
                    "default": false,
                    "description": "If set to `true`, then verifies the validity of the server SSL certificate. Note that you need to configure the\n[lua_ssl_trusted_certificate](/gateway/latest/reference/configuration/#lua_ssl_trusted_certificate)\nto specify the CA (or server) certificate used by your Redis server. You may also need to configure\n[lua_ssl_verify_depth](/gateway/latest/reference/configuration/#lua_ssl_verify_depth) accordingly.\n**Note:** This parameter is only available for Kong Gateway versions\n2.2.x and later."
                  }
                },
                {
                  "server_name": {
                    "required": false,
                    "type": "string",
                    "description": "Specifies the server name for the new TLS extension Server Name Indication (SNI) when connecting over SSL.\n**Note:** This parameter is only available for Kong Gateway versions\n2.2.x and later."
                  }
                }
              ]
            }
          },
          {
            "bypass_on_err": {
              "default": false,
              "type": "boolean",
              "description": "Unhandled errors while trying to retrieve a cache entry (such as redis down) are resolved with `Bypass`, with the request going upstream."
            }
          }
        ]
      }
    }
  ]
}
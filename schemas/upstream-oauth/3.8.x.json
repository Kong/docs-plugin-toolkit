{
  "fields": [
    {
      "protocols": {
        "description": "A set of strings representing HTTP protocols.",
        "required": true,
        "elements": {
          "type": "string",
          "one_of": [
            "grpc",
            "grpcs",
            "http",
            "https"
          ]
        },
        "type": "set",
        "default": [
          "grpc",
          "grpcs",
          "http",
          "https"
        ]
      }
    },
    {
      "config": {
        "fields": [
          {
            "client": {
              "fields": [
                {
                  "auth_method": {
                    "description": "The authentication method used in client requests to the IdP. Supported values are: `client_secret_basic` to send `client_id` and `client_secret` in the `Authorization: Basic` header, `client_secret_post` to send `client_id` and `client_secret` as part of the request body, or `client_secret_jwt` to send a JWT signed with the `client_secret` using the client assertion as part of the body.",
                    "required": true,
                    "one_of": [
                      "client_secret_post",
                      "client_secret_basic",
                      "client_secret_jwt",
                      "none"
                    ],
                    "type": "string",
                    "default": "client_secret_post"
                  }
                },
                {
                  "client_secret_jwt_alg": {
                    "description": "The algorithm to use with JWT when using `client_secret_jwt` authentication.",
                    "required": true,
                    "one_of": [
                      "HS512",
                      "HS256"
                    ],
                    "type": "string",
                    "default": "HS512"
                  }
                },
                {
                  "http_version": {
                    "description": "The HTTP version used for requests made by this plugin. Supported values: `1.1` for HTTP 1.1 and `1.0` for HTTP 1.0.",
                    "required": false,
                    "type": "number",
                    "default": 1.1
                  }
                },
                {
                  "http_proxy": {
                    "description": "The proxy to use when making HTTP requests to the IdP.",
                    "required": false,
                    "type": "string"
                  }
                },
                {
                  "http_proxy_authorization": {
                    "description": "The `Proxy-Authorization` header value to be used with `http_proxy`.",
                    "type": "string",
                    "required": false
                  }
                },
                {
                  "https_proxy": {
                    "description": "The proxy to use when making HTTPS requests to the IdP.",
                    "required": false,
                    "type": "string"
                  }
                },
                {
                  "https_proxy_authorization": {
                    "description": "The `Proxy-Authorization` header value to be used with `https_proxy`.",
                    "type": "string",
                    "required": false
                  }
                },
                {
                  "no_proxy": {
                    "description": "A comma-separated list of hosts that should not be proxied.",
                    "type": "string",
                    "required": false
                  }
                },
                {
                  "timeout": {
                    "description": "Network I/O timeout for requests to the IdP in milliseconds.",
                    "required": true,
                    "between": [
                      0,
                      2147483646
                    ],
                    "type": "integer",
                    "default": 10000
                  }
                },
                {
                  "keep_alive": {
                    "description": "Whether to use keepalive connections to the IdP.",
                    "type": "boolean",
                    "required": true,
                    "default": true
                  }
                },
                {
                  "ssl_verify": {
                    "description": "Whether to verify the certificate presented by the IdP when using HTTPS.",
                    "type": "boolean",
                    "required": false,
                    "default": false
                  }
                }
              ],
              "type": "record",
              "required": true
            }
          },
          {
            "oauth": {
              "fields": [
                {
                  "token_endpoint": {
                    "description": "The token endpoint URI.",
                    "required": true,
                    "type": "string"
                  }
                },
                {
                  "token_headers": {
                    "description": "Extra headers to be passed in the token endpoint request.",
                    "type": "map",
                    "values": {
                      "type": "string",
                      "referenceable": true
                    },
                    "keys": {
                      "description": "A string representing an HTTP header name.",
                      "type": "string"
                    }
                  }
                },
                {
                  "token_post_args": {
                    "description": "Extra post arguments to be passed in the token endpoint request.",
                    "type": "map",
                    "values": {
                      "type": "string",
                      "referenceable": true
                    },
                    "keys": {
                      "type": "string"
                    }
                  }
                },
                {
                  "grant_type": {
                    "description": "The OAuth grant type to be used.",
                    "required": true,
                    "one_of": [
                      "client_credentials",
                      "password"
                    ],
                    "type": "string",
                    "default": "client_credentials"
                  }
                },
                {
                  "client_id": {
                    "description": "The client ID for the application registration in the IdP.",
                    "required": false,
                    "type": "string",
                    "referenceable": true,
                    "encrypted": true
                  }
                },
                {
                  "client_secret": {
                    "description": "The client secret for the application registration in the IdP.",
                    "required": false,
                    "type": "string",
                    "referenceable": true,
                    "encrypted": true
                  }
                },
                {
                  "username": {
                    "description": "The username to use if `config.oauth.grant_type` is set to `password`.",
                    "required": false,
                    "type": "string",
                    "referenceable": true,
                    "encrypted": true
                  }
                },
                {
                  "password": {
                    "description": "The password to use if `config.oauth.grant_type` is set to `password`.",
                    "required": false,
                    "type": "string",
                    "referenceable": true,
                    "encrypted": true
                  }
                },
                {
                  "scopes": {
                    "description": "List of scopes to request from the IdP when obtaining a new token.",
                    "required": false,
                    "elements": {
                      "type": "string"
                    },
                    "type": "array",
                    "default": [
                      "openid"
                    ]
                  }
                },
                {
                  "audience": {
                    "description": "List of audiences passed to the IdP when obtaining a new token.",
                    "required": false,
                    "elements": {
                      "type": "string"
                    },
                    "type": "array",
                    "default": [

                    ]
                  }
                }
              ],
              "type": "record",
              "required": true
            }
          },
          {
            "cache": {
              "fields": [
                {
                  "strategy": {
                    "description": "The method Kong should use to cache tokens issued by the IdP.",
                    "required": true,
                    "one_of": [
                      "memory",
                      "redis"
                    ],
                    "type": "string",
                    "default": "memory"
                  }
                },
                {
                  "memory": {
                    "fields": [
                      {
                        "dictionary_name": {
                          "description": "The shared dictionary used by the plugin to cache tokens if `config.cache.strategy` is set to `memory`.",
                          "type": "string",
                          "required": true,
                          "default": "kong_db_cache"
                        }
                      }
                    ],
                    "type": "record",
                    "required": true
                  }
                },
                {
                  "redis": {
                    "fields": [
                      {
                        "host": {
                          "description": "A string representing a host name, such as example.com.",
                          "type": "string"
                        }
                      },
                      {
                        "port": {
                          "description": "An integer representing a port number between 0 and 65535, inclusive.",
                          "type": "integer",
                          "between": [
                            0,
                            65535
                          ]
                        }
                      },
                      {
                        "connect_timeout": {
                          "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                          "type": "integer",
                          "between": [
                            0,
                            2147483646
                          ],
                          "default": 2000
                        }
                      },
                      {
                        "send_timeout": {
                          "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                          "type": "integer",
                          "between": [
                            0,
                            2147483646
                          ],
                          "default": 2000
                        }
                      },
                      {
                        "read_timeout": {
                          "description": "An integer representing a timeout in milliseconds. Must be between 0 and 2^31-2.",
                          "type": "integer",
                          "between": [
                            0,
                            2147483646
                          ],
                          "default": 2000
                        }
                      },
                      {
                        "username": {
                          "description": "Username to use for Redis connections. If undefined, ACL authentication won't be performed. This requires Redis v6.0.0+. To be compatible with Redis v5.x.y, you can set it to `default`.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "password": {
                          "description": "Password to use for Redis connections. If undefined, no AUTH commands are sent to Redis.",
                          "type": "string",
                          "referenceable": true,
                          "encrypted": true
                        }
                      },
                      {
                        "sentinel_username": {
                          "description": "Sentinel username to authenticate with a Redis Sentinel instance. If undefined, ACL authentication won't be performed. This requires Redis v6.2.0+.",
                          "type": "string",
                          "referenceable": true
                        }
                      },
                      {
                        "sentinel_password": {
                          "description": "Sentinel password to authenticate with a Redis Sentinel instance. If undefined, no AUTH commands are sent to Redis Sentinels.",
                          "type": "string",
                          "referenceable": true,
                          "encrypted": true
                        }
                      },
                      {
                        "database": {
                          "description": "Database to use for the Redis connection when using the `redis` strategy",
                          "type": "integer",
                          "default": 0
                        }
                      },
                      {
                        "keepalive_pool_size": {
                          "description": "The size limit for every cosocket connection pool associated with every remote server, per worker process. If neither `keepalive_pool_size` nor `keepalive_backlog` is specified, no pool is created. If `keepalive_pool_size` isn't specified but `keepalive_backlog` is specified, then the pool uses the default value. Try to increase (e.g. 512) this value if latency is high or throughput is low.",
                          "type": "integer",
                          "between": [
                            1,
                            2147483646
                          ],
                          "default": 256
                        }
                      },
                      {
                        "keepalive_backlog": {
                          "description": "Limits the total number of opened connections for a pool. If the connection pool is full, connection queues above the limit go into the backlog queue. If the backlog queue is full, subsequent connect operations fail and return `nil`. Queued operations (subject to set timeouts) resume once the number of connections in the pool is less than `keepalive_pool_size`. If latency is high or throughput is low, try increasing this value. Empirically, this value is larger than `keepalive_pool_size`.",
                          "type": "integer",
                          "between": [
                            0,
                            2147483646
                          ]
                        }
                      },
                      {
                        "sentinel_master": {
                          "description": "Sentinel master to use for Redis connections. Defining this value implies using Redis Sentinel.",
                          "type": "string"
                        }
                      },
                      {
                        "sentinel_role": {
                          "description": "Sentinel role to use for Redis connections when the `redis` strategy is defined. Defining this value implies using Redis Sentinel.",
                          "type": "string",
                          "one_of": [
                            "master",
                            "slave",
                            "any"
                          ]
                        }
                      },
                      {
                        "sentinel_nodes": {
                          "description": "Sentinel node addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Sentinel. The minimum length of the array is 1 element.",
                          "required": false,
                          "elements": {
                            "fields": [
                              {
                                "host": {
                                  "description": "A string representing a host name, such as example.com.",
                                  "required": true,
                                  "type": "string",
                                  "default": "127.0.0.1"
                                }
                              },
                              {
                                "port": {
                                  "description": "An integer representing a port number between 0 and 65535, inclusive.",
                                  "type": "integer",
                                  "between": [
                                    0,
                                    65535
                                  ],
                                  "default": 6379
                                }
                              }
                            ],
                            "type": "record"
                          },
                          "type": "array",
                          "len_min": 1
                        }
                      },
                      {
                        "cluster_nodes": {
                          "description": "Cluster addresses to use for Redis connections when the `redis` strategy is defined. Defining this field implies using a Redis Cluster. The minimum length of the array is 1 element.",
                          "required": false,
                          "elements": {
                            "fields": [
                              {
                                "ip": {
                                  "description": "A string representing a host name, such as example.com.",
                                  "required": true,
                                  "type": "string",
                                  "default": "127.0.0.1"
                                }
                              },
                              {
                                "port": {
                                  "description": "An integer representing a port number between 0 and 65535, inclusive.",
                                  "type": "integer",
                                  "between": [
                                    0,
                                    65535
                                  ],
                                  "default": 6379
                                }
                              }
                            ],
                            "type": "record"
                          },
                          "type": "array",
                          "len_min": 1
                        }
                      },
                      {
                        "ssl": {
                          "description": "If set to true, uses SSL to connect to Redis.",
                          "required": false,
                          "type": "boolean",
                          "default": false
                        }
                      },
                      {
                        "ssl_verify": {
                          "description": "If set to true, verifies the validity of the server SSL certificate. If setting this parameter, also configure `lua_ssl_trusted_certificate` in `kong.conf` to specify the CA (or server) certificate used by your Redis server. You may also need to configure `lua_ssl_verify_depth` accordingly.",
                          "required": false,
                          "type": "boolean",
                          "default": false
                        }
                      },
                      {
                        "server_name": {
                          "description": "A string representing an SNI (server name indication) value for TLS.",
                          "required": false,
                          "type": "string"
                        }
                      },
                      {
                        "cluster_max_redirections": {
                          "description": "Maximum retry attempts for redirection.",
                          "required": false,
                          "type": "integer",
                          "default": 5
                        }
                      },
                      {
                        "connection_is_proxied": {
                          "description": "If the connection to Redis is proxied (e.g. Envoy), set it `true`. Set the `host` and `port` to point to the proxy address.",
                          "required": false,
                          "type": "boolean",
                          "default": false
                        }
                      }
                    ],
                    "entity_checks": [
                      {
                        "mutually_exclusive_sets": {
                          "set2": [
                            "host",
                            "port"
                          ],
                          "set1": [
                            "sentinel_master",
                            "sentinel_role",
                            "sentinel_nodes"
                          ]
                        }
                      },
                      {
                        "mutually_exclusive_sets": {
                          "set2": [
                            "cluster_nodes"
                          ],
                          "set1": [
                            "sentinel_master",
                            "sentinel_role",
                            "sentinel_nodes"
                          ]
                        }
                      },
                      {
                        "mutually_exclusive_sets": {
                          "set2": [
                            "host",
                            "port"
                          ],
                          "set1": [
                            "cluster_nodes"
                          ]
                        }
                      },
                      {
                        "mutually_required": [
                          "sentinel_master",
                          "sentinel_role",
                          "sentinel_nodes"
                        ]
                      },
                      {
                        "mutually_required": [
                          "host",
                          "port"
                        ]
                      },
                      {
                        "mutually_required": [
                          "connect_timeout",
                          "send_timeout",
                          "read_timeout"
                        ]
                      },
                      {
                        "conditional": {
                          "if_field": "connection_is_proxied",
                          "if_match": {
                            "eq": true
                          },
                          "then_field": "host",
                          "then_match": {
                            "required": true
                          }
                        }
                      },
                      {
                        "custom_entity_check": {
                          "run_with_missing_fields": true,
                          "field_sources": [
                            "database",
                            "connection_is_proxied"
                          ]
                        }
                      },
                      {
                        "custom_entity_check": {
                          "run_with_missing_fields": true,
                          "field_sources": [
                            "cluster_nodes",
                            "connection_is_proxied"
                          ]
                        }
                      },
                      {
                        "custom_entity_check": {
                          "run_with_missing_fields": true,
                          "field_sources": [
                            "sentinel_role",
                            "connection_is_proxied"
                          ]
                        }
                      }
                    ],
                    "type": "record",
                    "shorthand_fields": [
                      {
                        "timeout": {
                          "type": "integer",
                          "translate_backwards": [
                            "connect_timeout"
                          ],
                          "deprecation": {
                            "replaced_with": [
                              {
                                "path": [
                                  "connect_timeout"
                                ]
                              },
                              {
                                "path": [
                                  "send_timeout"
                                ]
                              },
                              {
                                "path": [
                                  "read_timeout"
                                ]
                              }
                            ],
                            "message": "redis schema field `timeout` is deprecated, use `connect_timeout`, `send_timeout` and `read_timeout`",
                            "removal_in_version": "4.0"
                          }
                        }
                      },
                      {
                        "sentinel_addresses": {
                          "deprecation": {
                            "replaced_with": [
                              {
                                "path": [
                                  "sentinel_nodes"
                                ]
                              }
                            ],
                            "message": "sentinel_addresses is deprecated, please use sentinel_nodes instead",
                            "removal_in_version": "4.0"
                          },
                          "len_min": 1,
                          "type": "array",
                          "elements": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "cluster_addresses": {
                          "deprecation": {
                            "replaced_with": [
                              {
                                "path": [
                                  "cluster_nodes"
                                ]
                              }
                            ],
                            "message": "cluster_addresses is deprecated, please use cluster_nodes instead",
                            "removal_in_version": "4.0"
                          },
                          "len_min": 1,
                          "type": "array",
                          "elements": {
                            "type": "string"
                          }
                        }
                      }
                    ],
                    "required": true
                  }
                },
                {
                  "eagerly_expire": {
                    "description": "The number of seconds to eagerly expire a cached token. By default, a cached token expires 5 seconds before its lifetime as defined in `expires_in`.",
                    "required": true,
                    "type": "integer",
                    "gt": -1,
                    "default": 5
                  }
                },
                {
                  "default_ttl": {
                    "description": "The lifetime of a token without an explicit `expires_in` value.",
                    "type": "number",
                    "gt": 0,
                    "default": 3600
                  }
                }
              ],
              "type": "record",
              "required": true
            }
          },
          {
            "behavior": {
              "fields": [
                {
                  "upstream_access_token_header_name": {
                    "description": "The name of the header used to send the access token (obtained from the IdP) to the upstream service.",
                    "len_min": 0,
                    "type": "string",
                    "required": true,
                    "default": "Authorization"
                  }
                },
                {
                  "idp_error_response_status_code": {
                    "description": "The response code to return to the consumer if Kong fails to obtain a token from the IdP.",
                    "required": true,
                    "between": [
                      500,
                      599
                    ],
                    "type": "integer",
                    "default": 502
                  }
                },
                {
                  "idp_error_response_content_type": {
                    "description": "The Content-Type of the response to return to the consumer if Kong fails to obtain a token from the IdP.",
                    "len_min": 0,
                    "type": "string",
                    "required": true,
                    "default": "application/json; charset=utf-8"
                  }
                },
                {
                  "idp_error_response_message": {
                    "description": "The message to embed in the body of the response to return to the consumer if Kong fails to obtain a token from the IdP.",
                    "len_min": 0,
                    "type": "string",
                    "required": true,
                    "default": "Failed to authenticate request to upstream"
                  }
                },
                {
                  "idp_error_response_body_template": {
                    "description": "The template to use to create the body of the response to return to the consumer if Kong fails to obtain a token from the IdP.",
                    "len_min": 0,
                    "type": "string",
                    "required": true,
                    "default": "{ \"code\": \"{{status}}\", \"message\": \"{{message}}\" }"
                  }
                },
                {
                  "purge_token_on_upstream_status_codes": {
                    "description": "An array of status codes which will force an access token to be purged when returned by the upstream. An empty array will disable this functionality.",
                    "type": "array",
                    "default": [
                      401
                    ],
                    "elements": {
                      "between": [
                        100,
                        599
                      ],
                      "type": "integer"
                    }
                  }
                }
              ],
              "type": "record",
              "required": true
            }
          }
        ],
        "type": "record",
        "required": true
      }
    }
  ],
  "entity_checks": [
    {
      "custom_entity_check": {
        "field_sources": [
          "config"
        ]
      }
    },
    {
      "custom_entity_check": {
        "field_sources": [
          "config"
        ]
      }
    }
  ]
}